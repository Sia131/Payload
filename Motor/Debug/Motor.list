
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eec  08003eec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003eec  08003eec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eec  08003eec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef0  08003ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003f64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003f64  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd72  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021d9  00000000  00000000  0002ce0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  0002efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  0002fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e03  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a723  00000000  00000000  00046893  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074f67  00000000  00000000  00050fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa8  00000000  00000000  000c5f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003df4 	.word	0x08003df4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003df4 	.word	0x08003df4

0800014c <encoder_init>:
#define MAX_COUNT_ENCODER_HEX 0x100
volatile float angle;



void encoder_init(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPBEN;
 8000150:	4b16      	ldr	r3, [pc, #88]	; (80001ac <encoder_init+0x60>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a15      	ldr	r2, [pc, #84]	; (80001ac <encoder_init+0x60>)
 8000156:	f043 0309 	orr.w	r3, r3, #9
 800015a:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; //AFIO might not even be needed?
 800015c:	4b13      	ldr	r3, [pc, #76]	; (80001ac <encoder_init+0x60>)
 800015e:	69db      	ldr	r3, [r3, #28]
 8000160:	4a12      	ldr	r2, [pc, #72]	; (80001ac <encoder_init+0x60>)
 8000162:	f043 0304 	orr.w	r3, r3, #4
 8000166:	61d3      	str	r3, [r2, #28]

	// value to count up to : 16 bit so max is 0xFFFF = 65535
	TIM4->ARR = MAX_COUNT_ENCODER_HEX;
 8000168:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <encoder_init+0x64>)
 800016a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016e:	62da      	str	r2, [r3, #44]	; 0x2c

	//per datasheet instructions
	TIM4->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0 );  //step 1 and 2
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <encoder_init+0x64>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a0e      	ldr	r2, [pc, #56]	; (80001b0 <encoder_init+0x64>)
 8000176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);  // step 3 and 4
 8000180:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <encoder_init+0x64>)
 8000182:	6a1b      	ldr	r3, [r3, #32]
 8000184:	4a0a      	ldr	r2, [pc, #40]	; (80001b0 <encoder_init+0x64>)
 8000186:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800018a:	6213      	str	r3, [r2, #32]
	TIM4->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;   //step 5
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <encoder_init+0x64>)
 800018e:	689b      	ldr	r3, [r3, #8]
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <encoder_init+0x64>)
 8000192:	f043 0303 	orr.w	r3, r3, #3
 8000196:	6093      	str	r3, [r2, #8]
	TIM4->CR1 |= TIM_CR1_CEN ;     //step 6
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <encoder_init+0x64>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <encoder_init+0x64>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6013      	str	r3, [r2, #0]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000
 80001b0:	40000800 	.word	0x40000800

080001b4 <enocder_get_count>:

uint16_t enocder_get_count(){
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	return TIM4->CNT;
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <enocder_get_count+0x14>)
 80001ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001bc:	b29b      	uxth	r3, r3
}
 80001be:	4618      	mov	r0, r3
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	40000800 	.word	0x40000800

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fbd4 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f820 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f964 	bl	80004a4 <MX_GPIO_Init>
  MX_RTC_Init();
 80001dc:	f000 f870 	bl	80002c0 <MX_RTC_Init>
  MX_TIM2_Init();
 80001e0:	f000 f8b8 	bl	8000354 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f934 	bl	8000450 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80001e8:	2100      	movs	r1, #0
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <main+0x44>)
 80001ec:	f002 f840 	bl	8002270 <HAL_TIM_PWM_Start>
  encoder_init();
 80001f0:	f7ff ffac 	bl	800014c <encoder_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_blink();
 80001f4:	f000 f9ae 	bl	8000554 <test_blink>
	  printf("%d \n\r",enocder_get_count());
 80001f8:	f7ff ffdc 	bl	80001b4 <enocder_get_count>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4619      	mov	r1, r3
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x48>)
 8000202:	f002 ff09 	bl	8003018 <iprintf>
	  HAL_Delay(100);
 8000206:	2064      	movs	r0, #100	; 0x64
 8000208:	f000 fc1a 	bl	8000a40 <HAL_Delay>
  {
 800020c:	e7f2      	b.n	80001f4 <main+0x28>
 800020e:	bf00      	nop
 8000210:	200000ac 	.word	0x200000ac
 8000214:	08003e0c 	.word	0x08003e0c

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b094      	sub	sp, #80	; 0x50
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 feee 	bl	8003008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000248:	230a      	movs	r3, #10
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000258:	2300      	movs	r3, #0
 800025a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fe89 	bl	8000f78 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800026c:	f000 f96c 	bl	8000548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000274:	2300      	movs	r3, #0
 8000276:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f8f4 	bl	8001478 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000296:	f000 f957 	bl	8000548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800029a:	2301      	movs	r3, #1
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800029e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fa82 	bl	80017b0 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002b2:	f000 f949 	bl	8000548 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3750      	adds	r7, #80	; 0x50
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	460a      	mov	r2, r1
 80002cc:	801a      	strh	r2, [r3, #0]
 80002ce:	460a      	mov	r2, r1
 80002d0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002d2:	2300      	movs	r3, #0
 80002d4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80002d6:	4b1d      	ldr	r3, [pc, #116]	; (800034c <MX_RTC_Init+0x8c>)
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <MX_RTC_Init+0x90>)
 80002da:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_RTC_Init+0x8c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295
 80002e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <MX_RTC_Init+0x8c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002ea:	4818      	ldr	r0, [pc, #96]	; (800034c <MX_RTC_Init+0x8c>)
 80002ec:	f001 fbd2 	bl	8001a94 <HAL_RTC_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80002f6:	f000 f927 	bl	8000548 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80002fe:	2300      	movs	r3, #0
 8000300:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000302:	2300      	movs	r3, #0
 8000304:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2201      	movs	r2, #1
 800030a:	4619      	mov	r1, r3
 800030c:	480f      	ldr	r0, [pc, #60]	; (800034c <MX_RTC_Init+0x8c>)
 800030e:	f001 fc57 	bl	8001bc0 <HAL_RTC_SetTime>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000318:	f000 f916 	bl	8000548 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800031c:	2301      	movs	r3, #1
 800031e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000320:	2301      	movs	r3, #1
 8000322:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000324:	2301      	movs	r3, #1
 8000326:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000328:	2300      	movs	r3, #0
 800032a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800032c:	463b      	mov	r3, r7
 800032e:	2201      	movs	r2, #1
 8000330:	4619      	mov	r1, r3
 8000332:	4806      	ldr	r0, [pc, #24]	; (800034c <MX_RTC_Init+0x8c>)
 8000334:	f001 fcdc 	bl	8001cf0 <HAL_RTC_SetDate>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800033e:	f000 f903 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000098 	.word	0x20000098
 8000350:	40002800 	.word	0x40002800

08000354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08e      	sub	sp, #56	; 0x38
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000368:	f107 0320 	add.w	r3, r7, #32
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
 8000380:	615a      	str	r2, [r3, #20]
 8000382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000384:	4b31      	ldr	r3, [pc, #196]	; (800044c <MX_TIM2_Init+0xf8>)
 8000386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800038c:	4b2f      	ldr	r3, [pc, #188]	; (800044c <MX_TIM2_Init+0xf8>)
 800038e:	224f      	movs	r2, #79	; 0x4f
 8000390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	4b2e      	ldr	r3, [pc, #184]	; (800044c <MX_TIM2_Init+0xf8>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2019;
 8000398:	4b2c      	ldr	r3, [pc, #176]	; (800044c <MX_TIM2_Init+0xf8>)
 800039a:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800039e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a0:	4b2a      	ldr	r3, [pc, #168]	; (800044c <MX_TIM2_Init+0xf8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_TIM2_Init+0xf8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ac:	4827      	ldr	r0, [pc, #156]	; (800044c <MX_TIM2_Init+0xf8>)
 80003ae:	f001 feff 	bl	80021b0 <HAL_TIM_Base_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003b8:	f000 f8c6 	bl	8000548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c6:	4619      	mov	r1, r3
 80003c8:	4820      	ldr	r0, [pc, #128]	; (800044c <MX_TIM2_Init+0xf8>)
 80003ca:	f002 f849 	bl	8002460 <HAL_TIM_ConfigClockSource>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003d4:	f000 f8b8 	bl	8000548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003d8:	481c      	ldr	r0, [pc, #112]	; (800044c <MX_TIM2_Init+0xf8>)
 80003da:	f001 ff14 	bl	8002206 <HAL_TIM_PWM_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003e4:	f000 f8b0 	bl	8000548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f0:	f107 0320 	add.w	r3, r7, #32
 80003f4:	4619      	mov	r1, r3
 80003f6:	4815      	ldr	r0, [pc, #84]	; (800044c <MX_TIM2_Init+0xf8>)
 80003f8:	f002 fb8e 	bl	8002b18 <HAL_TIMEx_MasterConfigSynchronization>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000402:	f000 f8a1 	bl	8000548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000406:	2360      	movs	r3, #96	; 0x60
 8000408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	480b      	ldr	r0, [pc, #44]	; (800044c <MX_TIM2_Init+0xf8>)
 800041e:	f001 ff59 	bl	80022d4 <HAL_TIM_PWM_ConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000428:	f000 f88e 	bl	8000548 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <MX_TIM2_Init+0xf8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	699a      	ldr	r2, [r3, #24]
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_TIM2_Init+0xf8>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f022 0208 	bic.w	r2, r2, #8
 800043a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <MX_TIM2_Init+0xf8>)
 800043e:	f000 f909 	bl	8000654 <HAL_TIM_MspPostInit>

}
 8000442:	bf00      	nop
 8000444:	3738      	adds	r7, #56	; 0x38
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000ac 	.word	0x200000ac

08000450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x4c>)
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <MX_USART2_UART_Init+0x50>)
 8000458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <MX_USART2_UART_Init+0x4c>)
 800045c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x4c>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x4c>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x4c>)
 8000488:	f002 fb8a 	bl	8002ba0 <HAL_UART_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000492:	f000 f859 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000ec 	.word	0x200000ec
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_GPIO_Init+0x78>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a17      	ldr	r2, [pc, #92]	; (800051c <MX_GPIO_Init+0x78>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_GPIO_Init+0x78>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0310 	and.w	r3, r3, #16
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_GPIO_Init+0x78>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a11      	ldr	r2, [pc, #68]	; (800051c <MX_GPIO_Init+0x78>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_GPIO_Init+0x78>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ee:	480c      	ldr	r0, [pc, #48]	; (8000520 <MX_GPIO_Init+0x7c>)
 80004f0:	f000 fd06 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	4619      	mov	r1, r3
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <MX_GPIO_Init+0x7c>)
 800050e:	f000 fb9d 	bl	8000c4c <HAL_GPIO_Init>

}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40011000 	.word	0x40011000

08000524 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800052c:	1d39      	adds	r1, r7, #4
 800052e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000532:	2201      	movs	r2, #1
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <__io_putchar+0x20>)
 8000536:	f002 fb80 	bl	8002c3a <HAL_UART_Transmit>

  return ch;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200000ec 	.word	0x200000ec

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <test_blink>:


#define A 	1
#define B  	0

void test_blink(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <test_blink+0x18>)
 800055e:	f000 fce7 	bl	8000f30 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f000 fa6c 	bl	8000a40 <HAL_Delay>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40011000 	.word	0x40011000

08000570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <HAL_MspInit+0x5c>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_MspInit+0x5c>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_MspInit+0x5c>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000598:	61d3      	str	r3, [r2, #28]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x5c>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_MspInit+0x60>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_MspInit+0x60>)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010000 	.word	0x40010000

080005d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <HAL_RTC_MspInit+0x3c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d110      	bne.n	8000608 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005e6:	f000 fcbb 	bl	8000f60 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_RTC_MspInit+0x40>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <HAL_RTC_MspInit+0x40>)
 80005f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_RTC_MspInit+0x40>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_RTC_MspInit+0x44>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40002800 	.word	0x40002800
 8000614:	40021000 	.word	0x40021000
 8000618:	4242043c 	.word	0x4242043c

0800061c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800062c:	d10b      	bne.n	8000646 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_TIM_Base_MspInit+0x34>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_TIM_Base_MspInit+0x34>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_TIM_Base_MspInit+0x34>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000672:	d117      	bne.n	80006a4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_TIM_MspPostInit+0x58>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_TIM_MspPostInit+0x58>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_TIM_MspPostInit+0x58>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068c:	2301      	movs	r3, #1
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <HAL_TIM_MspPostInit+0x5c>)
 80006a0:	f000 fad4 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010800 	.word	0x40010800

080006b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1b      	ldr	r2, [pc, #108]	; (800073c <HAL_UART_MspInit+0x88>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d12f      	bne.n	8000734 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_UART_MspInit+0x8c>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <HAL_UART_MspInit+0x8c>)
 80006da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006de:	61d3      	str	r3, [r2, #28]
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_UART_MspInit+0x8c>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_UART_MspInit+0x8c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <HAL_UART_MspInit+0x8c>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_UART_MspInit+0x8c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000704:	2304      	movs	r3, #4
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <HAL_UART_MspInit+0x90>)
 8000718:	f000 fa98 	bl	8000c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071c:	2308      	movs	r3, #8
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_UART_MspInit+0x90>)
 8000730:	f000 fa8c 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40004400 	.word	0x40004400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <HardFault_Handler+0x4>

0800075a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <MemManage_Handler+0x4>

08000760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <BusFault_Handler+0x4>

08000766 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f938 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <_read>:
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <_read+0x28>
 80007ae:	f3af 8000 	nop.w
 80007b2:	4601      	mov	r1, r0
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf0      	blt.n	80007ae <_read+0x12>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_write>:
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e009      	b.n	80007fc <_write+0x26>
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe97 	bl	8000524 <__io_putchar>
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf1      	blt.n	80007e8 <_write+0x12>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_close>:
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <_fstat>:
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	2300      	movs	r3, #0
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <_isatty>:
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	2301      	movs	r3, #1
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <_lseek>:
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	2300      	movs	r3, #0
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <_sbrk>:
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x50>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x16>
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <_sbrk+0x50>)
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <_sbrk+0x54>)
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <_sbrk+0x50>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <_sbrk+0x50>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4413      	add	r3, r2
 8000894:	466a      	mov	r2, sp
 8000896:	4293      	cmp	r3, r2
 8000898:	d907      	bls.n	80008aa <_sbrk+0x3a>
 800089a:	f002 fb8b 	bl	8002fb4 <__errno>
 800089e:	4602      	mov	r2, r0
 80008a0:	230c      	movs	r3, #12
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	e006      	b.n	80008b8 <_sbrk+0x48>
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <_sbrk+0x50>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <_sbrk+0x50>)
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	20000138 	.word	0x20000138

080008c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <SystemInit+0x5c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <SystemInit+0x5c>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <SystemInit+0x5c>)
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	4911      	ldr	r1, [pc, #68]	; (8000924 <SystemInit+0x5c>)
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <SystemInit+0x60>)
 80008e0:	4013      	ands	r3, r2
 80008e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <SystemInit+0x5c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <SystemInit+0x5c>)
 80008ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <SystemInit+0x5c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <SystemInit+0x5c>)
 80008fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <SystemInit+0x5c>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <SystemInit+0x5c>)
 8000906:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800090a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SystemInit+0x5c>)
 800090e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000912:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <SystemInit+0x64>)
 8000916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800091a:	609a      	str	r2, [r3, #8]
#endif 
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000
 8000928:	f8ff0000 	.word	0xf8ff0000
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:
 8000930:	2100      	movs	r1, #0
 8000932:	e003      	b.n	800093c <LoopCopyDataInit>

08000934 <CopyDataInit>:
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <LoopFillZerobss+0x14>)
 8000936:	585b      	ldr	r3, [r3, r1]
 8000938:	5043      	str	r3, [r0, r1]
 800093a:	3104      	adds	r1, #4

0800093c <LoopCopyDataInit>:
 800093c:	480a      	ldr	r0, [pc, #40]	; (8000968 <LoopFillZerobss+0x18>)
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <LoopFillZerobss+0x1c>)
 8000940:	1842      	adds	r2, r0, r1
 8000942:	429a      	cmp	r2, r3
 8000944:	d3f6      	bcc.n	8000934 <CopyDataInit>
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopFillZerobss+0x20>)
 8000948:	e002      	b.n	8000950 <LoopFillZerobss>

0800094a <FillZerobss>:
 800094a:	2300      	movs	r3, #0
 800094c:	f842 3b04 	str.w	r3, [r2], #4

08000950 <LoopFillZerobss>:
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <LoopFillZerobss+0x24>)
 8000952:	429a      	cmp	r2, r3
 8000954:	d3f9      	bcc.n	800094a <FillZerobss>
 8000956:	f7ff ffb7 	bl	80008c8 <SystemInit>
 800095a:	f002 fb31 	bl	8002fc0 <__libc_init_array>
 800095e:	f7ff fc35 	bl	80001cc <main>
 8000962:	4770      	bx	lr
 8000964:	08003ef4 	.word	0x08003ef4
 8000968:	20000000 	.word	0x20000000
 800096c:	20000070 	.word	0x20000070
 8000970:	20000070 	.word	0x20000070
 8000974:	20000134 	.word	0x20000134

08000978 <ADC1_2_IRQHandler>:
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f929 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fdea 	bl	8000570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f933 	bl	8000c32 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f909 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000008 	.word	0x20000008
 8000a28:	2000012c 	.word	0x2000012c

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	2000012c 	.word	0x2000012c

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_Delay+0x40>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000008 	.word	0x20000008

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff49 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5e:	e127      	b.n	8000eb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c60:	2201      	movs	r2, #1
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8116 	bne.w	8000eaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d034      	beq.n	8000cf0 <HAL_GPIO_Init+0xa4>
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d80d      	bhi.n	8000ca6 <HAL_GPIO_Init+0x5a>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d02b      	beq.n	8000ce6 <HAL_GPIO_Init+0x9a>
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d804      	bhi.n	8000c9c <HAL_GPIO_Init+0x50>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d031      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d01c      	beq.n	8000cd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9a:	e048      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d043      	beq.n	8000d28 <HAL_GPIO_Init+0xdc>
 8000ca0:	2b11      	cmp	r3, #17
 8000ca2:	d01b      	beq.n	8000cdc <HAL_GPIO_Init+0x90>
          break;
 8000ca4:	e043      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ca6:	4a89      	ldr	r2, [pc, #548]	; (8000ecc <HAL_GPIO_Init+0x280>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d026      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cac:	4a87      	ldr	r2, [pc, #540]	; (8000ecc <HAL_GPIO_Init+0x280>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d806      	bhi.n	8000cc0 <HAL_GPIO_Init+0x74>
 8000cb2:	4a87      	ldr	r2, [pc, #540]	; (8000ed0 <HAL_GPIO_Init+0x284>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d020      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cb8:	4a86      	ldr	r2, [pc, #536]	; (8000ed4 <HAL_GPIO_Init+0x288>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d01d      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
          break;
 8000cbe:	e036      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cc0:	4a85      	ldr	r2, [pc, #532]	; (8000ed8 <HAL_GPIO_Init+0x28c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d019      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cc6:	4a85      	ldr	r2, [pc, #532]	; (8000edc <HAL_GPIO_Init+0x290>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d016      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000ccc:	4a84      	ldr	r2, [pc, #528]	; (8000ee0 <HAL_GPIO_Init+0x294>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d013      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
          break;
 8000cd2:	e02c      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e028      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e023      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	3308      	adds	r3, #8
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e01e      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	330c      	adds	r3, #12
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e019      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d02:	2304      	movs	r3, #4
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e012      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	611a      	str	r2, [r3, #16]
          break;
 8000d1a:	e008      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	615a      	str	r2, [r3, #20]
          break;
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2bff      	cmp	r3, #255	; 0xff
 8000d32:	d801      	bhi.n	8000d38 <HAL_GPIO_Init+0xec>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	e001      	b.n	8000d3c <HAL_GPIO_Init+0xf0>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d802      	bhi.n	8000d4a <HAL_GPIO_Init+0xfe>
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x104>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	210f      	movs	r1, #15
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	401a      	ands	r2, r3
 8000d62:	6a39      	ldr	r1, [r7, #32]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 8096 	beq.w	8000eaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b59      	ldr	r3, [pc, #356]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d96:	4a54      	ldr	r2, [pc, #336]	; (8000ee8 <HAL_GPIO_Init+0x29c>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_GPIO_Init+0x2a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x19e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_GPIO_Init+0x2a4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x19a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a49      	ldr	r2, [pc, #292]	; (8000ef4 <HAL_GPIO_Init+0x2a8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x196>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2ac>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x192>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e004      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000dea:	2300      	movs	r3, #0
 8000dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dee:	f002 0203 	and.w	r2, r2, #3
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4093      	lsls	r3, r2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfc:	493a      	ldr	r1, [pc, #232]	; (8000ee8 <HAL_GPIO_Init+0x29c>)
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	3302      	adds	r3, #2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4938      	ldr	r1, [pc, #224]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e24:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4933      	ldr	r1, [pc, #204]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	492e      	ldr	r1, [pc, #184]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4929      	ldr	r1, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	4924      	ldr	r1, [pc, #144]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	608b      	str	r3, [r1, #8]
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	491f      	ldr	r1, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	491a      	ldr	r1, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60cb      	str	r3, [r1, #12]
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4915      	ldr	r1, [pc, #84]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	3301      	adds	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f47f aed0 	bne.w	8000c60 <HAL_GPIO_Init+0x14>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	372c      	adds	r7, #44	; 0x2c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	10120000 	.word	0x10120000
 8000ed8:	10310000 	.word	0x10310000
 8000edc:	10320000 	.word	0x10320000
 8000ee0:	10220000 	.word	0x10220000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	611a      	str	r2, [r3, #16]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	420e0020 	.word	0x420e0020

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e26c      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8087 	beq.w	80010a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f98:	4b92      	ldr	r3, [pc, #584]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d00c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa4:	4b8f      	ldr	r3, [pc, #572]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d112      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
 8000fb0:	4b8c      	ldr	r3, [pc, #560]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbe:	4b89      	ldr	r3, [pc, #548]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d06c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x12c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d168      	bne.n	80010a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e246      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fde:	d106      	bne.n	8000fee <HAL_RCC_OscConfig+0x76>
 8000fe0:	4b80      	ldr	r3, [pc, #512]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a7f      	ldr	r2, [pc, #508]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e02e      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x98>
 8000ff6:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a7a      	ldr	r2, [pc, #488]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b78      	ldr	r3, [pc, #480]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a77      	ldr	r2, [pc, #476]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e01d      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0xbc>
 800101a:	4b72      	ldr	r3, [pc, #456]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a71      	ldr	r2, [pc, #452]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b6f      	ldr	r3, [pc, #444]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a6e      	ldr	r2, [pc, #440]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8001034:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a6a      	ldr	r2, [pc, #424]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a67      	ldr	r2, [pc, #412]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fcea 	bl	8000a2c <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fce6 	bl	8000a2c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e1fa      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0xe4>
 800107a:	e014      	b.n	80010a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fcd6 	bl	8000a2c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fcd2 	bl	8000a2c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1e6      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x10c>
 80010a2:	e000      	b.n	80010a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d063      	beq.n	800117a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010b2:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d11c      	bne.n	8001104 <HAL_RCC_OscConfig+0x18c>
 80010ca:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d116      	bne.n	8001104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_RCC_OscConfig+0x176>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e1ba      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4939      	ldr	r1, [pc, #228]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	e03a      	b.n	800117a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_RCC_OscConfig+0x270>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fc8b 	bl	8000a2c <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111a:	f7ff fc87 	bl	8000a2c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e19b      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4927      	ldr	r1, [pc, #156]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_RCC_OscConfig+0x270>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc6a 	bl	8000a2c <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fc66 	bl	8000a2c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e17a      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d03a      	beq.n	80011fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d019      	beq.n	80011c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_RCC_OscConfig+0x274>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fc4a 	bl	8000a2c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fc46 	bl	8000a2c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e15a      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 fada 	bl	8001774 <RCC_Delay>
 80011c0:	e01c      	b.n	80011fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_RCC_OscConfig+0x274>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fc30 	bl	8000a2c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ce:	e00f      	b.n	80011f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc2c 	bl	8000a2c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d908      	bls.n	80011f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e140      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	42420000 	.word	0x42420000
 80011ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	4b9e      	ldr	r3, [pc, #632]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e9      	bne.n	80011d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a6 	beq.w	8001356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120e:	4b97      	ldr	r3, [pc, #604]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10d      	bne.n	8001236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b94      	ldr	r3, [pc, #592]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a93      	ldr	r2, [pc, #588]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b91      	ldr	r3, [pc, #580]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001236:	4b8e      	ldr	r3, [pc, #568]	; (8001470 <HAL_RCC_OscConfig+0x4f8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d118      	bne.n	8001274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	4b8b      	ldr	r3, [pc, #556]	; (8001470 <HAL_RCC_OscConfig+0x4f8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a8a      	ldr	r2, [pc, #552]	; (8001470 <HAL_RCC_OscConfig+0x4f8>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124e:	f7ff fbed 	bl	8000a2c <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff fbe9 	bl	8000a2c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0fd      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	4b81      	ldr	r3, [pc, #516]	; (8001470 <HAL_RCC_OscConfig+0x4f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x312>
 800127c:	4b7b      	ldr	r3, [pc, #492]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4a7a      	ldr	r2, [pc, #488]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6213      	str	r3, [r2, #32]
 8001288:	e02d      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x334>
 8001292:	4b76      	ldr	r3, [pc, #472]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a75      	ldr	r2, [pc, #468]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	4b73      	ldr	r3, [pc, #460]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a72      	ldr	r2, [pc, #456]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	e01c      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	d10c      	bne.n	80012ce <HAL_RCC_OscConfig+0x356>
 80012b4:	4b6d      	ldr	r3, [pc, #436]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a6c      	ldr	r2, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4a69      	ldr	r2, [pc, #420]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6213      	str	r3, [r2, #32]
 80012cc:	e00b      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a66      	ldr	r2, [pc, #408]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6213      	str	r3, [r2, #32]
 80012da:	4b64      	ldr	r3, [pc, #400]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a63      	ldr	r2, [pc, #396]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb9d 	bl	8000a2c <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fb99 	bl	8000a2c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	; 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0ab      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	4b57      	ldr	r3, [pc, #348]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ee      	beq.n	80012f6 <HAL_RCC_OscConfig+0x37e>
 8001318:	e014      	b.n	8001344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb87 	bl	8000a2c <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fb83 	bl	8000a2c <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e095      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ee      	bne.n	8001322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d105      	bne.n	8001356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134a:	4b48      	ldr	r3, [pc, #288]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a47      	ldr	r2, [pc, #284]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8081 	beq.w	8001462 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001360:	4b42      	ldr	r3, [pc, #264]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d061      	beq.n	8001430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d146      	bne.n	8001402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001374:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <HAL_RCC_OscConfig+0x4fc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fb57 	bl	8000a2c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fb53 	bl	8000a2c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e067      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	4b35      	ldr	r3, [pc, #212]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d108      	bne.n	80013bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	492d      	ldr	r1, [pc, #180]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a19      	ldr	r1, [r3, #32]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	430b      	orrs	r3, r1
 80013ce:	4927      	ldr	r1, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_RCC_OscConfig+0x4fc>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fb27 	bl	8000a2c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fb23 	bl	8000a2c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e037      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x46a>
 8001400:	e02f      	b.n	8001462 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_RCC_OscConfig+0x4fc>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fb10 	bl	8000a2c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff fb0c 	bl	8000a2c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e020      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x498>
 800142e:	e018      	b.n	8001462 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e013      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_OscConfig+0x4f4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	429a      	cmp	r2, r3
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	40007000 	.word	0x40007000
 8001474:	42420060 	.word	0x42420060

08001478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0d0      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	4b6a      	ldr	r3, [pc, #424]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d910      	bls.n	80014bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b67      	ldr	r3, [pc, #412]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 0207 	bic.w	r2, r3, #7
 80014a2:	4965      	ldr	r1, [pc, #404]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0b8      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a58      	ldr	r2, [pc, #352]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	494d      	ldr	r1, [pc, #308]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d040      	beq.n	8001598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d115      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e07f      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e073      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06b      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f023 0203 	bic.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4936      	ldr	r1, [pc, #216]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff fa60 	bl	8000a2c <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fa5c 	bl	8000a2c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e053      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 020c 	and.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d1eb      	bne.n	8001570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d210      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4922      	ldr	r1, [pc, #136]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e032      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4916      	ldr	r1, [pc, #88]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001606:	f000 f821 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800160a:	4601      	mov	r1, r0
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1c8>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	fa21 f303 	lsr.w	r3, r1, r3
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1cc>)
 8001620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f9be 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000
 800163c:	40021000 	.word	0x40021000
 8001640:	08003e3c 	.word	0x08003e3c
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	b490      	push	{r4, r7}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001654:	1d3c      	adds	r4, r7, #4
 8001656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb4>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d002      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x40>
 8001686:	2b08      	cmp	r3, #8
 8001688:	d003      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x46>
 800168a:	e02d      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_RCC_GetSysClockFreq+0xbc>)
 800168e:	623b      	str	r3, [r7, #32]
      break;
 8001690:	e02d      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	0c9b      	lsrs	r3, r3, #18
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800169e:	4413      	add	r3, r2
 80016a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	0c5b      	lsrs	r3, r3, #17
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016be:	4413      	add	r3, r2
 80016c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ca:	fb02 f203 	mul.w	r2, r2, r3
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	e004      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_RCC_GetSysClockFreq+0xc0>)
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	623b      	str	r3, [r7, #32]
      break;
 80016e6:	e002      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ea:	623b      	str	r3, [r7, #32]
      break;
 80016ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ee:	6a3b      	ldr	r3, [r7, #32]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc90      	pop	{r4, r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	08003e14 	.word	0x08003e14
 8001700:	08003e24 	.word	0x08003e24
 8001704:	40021000 	.word	0x40021000
 8001708:	007a1200 	.word	0x007a1200
 800170c:	003d0900 	.word	0x003d0900

08001710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <HAL_RCC_GetHCLKFreq+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001728:	f7ff fff2 	bl	8001710 <HAL_RCC_GetHCLKFreq>
 800172c:	4601      	mov	r1, r0
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	08003e4c 	.word	0x08003e4c

0800174c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001750:	f7ff ffde 	bl	8001710 <HAL_RCC_GetHCLKFreq>
 8001754:	4601      	mov	r1, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	0adb      	lsrs	r3, r3, #11
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	08003e4c 	.word	0x08003e4c

08001774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <RCC_Delay+0x34>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <RCC_Delay+0x38>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0a5b      	lsrs	r3, r3, #9
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001790:	bf00      	nop
  }
  while (Delay --);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	60fa      	str	r2, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f9      	bne.n	8001790 <RCC_Delay+0x1c>
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000
 80017ac:	10624dd3 	.word	0x10624dd3

080017b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d07d      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	61d3      	str	r3, [r2, #28]
 80017e8:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d118      	bne.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001804:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a42      	ldr	r2, [pc, #264]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff f90c 	bl	8000a2c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	e008      	b.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff f908 	bl	8000a2c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e06d      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800183e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d02e      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d027      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800185c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800186a:	4a29      	ldr	r2, [pc, #164]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d014      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff f8d7 	bl	8000a2c <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff f8d3 	bl	8000a2c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e036      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4917      	ldr	r1, [pc, #92]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	490b      	ldr	r1, [pc, #44]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	4904      	ldr	r1, [pc, #16]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
 8001918:	42420440 	.word	0x42420440

0800191c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b08d      	sub	sp, #52	; 0x34
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001926:	f107 040c 	add.w	r4, r7, #12
 800192a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800192c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d07f      	beq.n	8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001950:	2b10      	cmp	r3, #16
 8001952:	d002      	beq.n	800195a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001954:	2b01      	cmp	r3, #1
 8001956:	d048      	beq.n	80019ea <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001958:	e08b      	b.n	8001a72 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800195a:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d07f      	beq.n	8001a6c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001978:	4413      	add	r3, r2
 800197a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800197e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d018      	beq.n	80019bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	0c5b      	lsrs	r3, r3, #17
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001998:	4413      	add	r3, r2
 800199a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80019aa:	4a37      	ldr	r2, [pc, #220]	; (8001a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ba:	e004      	b.n	80019c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d2:	d102      	bne.n	80019da <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019d8:	e048      	b.n	8001a6c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019e8:	e040      	b.n	8001a6c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fa:	d108      	bne.n	8001a0e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0c:	e01f      	b.n	8001a4e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a18:	d109      	bne.n	8001a2e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001a26:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2c:	e00f      	b.n	8001a4e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a38:	d11a      	bne.n	8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d014      	beq.n	8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001a46:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001a4c:	e010      	b.n	8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001a50:	f7ff fe7c 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	0b9b      	lsrs	r3, r3, #14
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	3301      	adds	r3, #1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001a6c:	bf00      	nop
 8001a6e:	e000      	b.n	8001a72 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001a70:	bf00      	nop
    }
  }
  return (frequency);
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3734      	adds	r7, #52	; 0x34
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	08003e28 	.word	0x08003e28
 8001a80:	08003e38 	.word	0x08003e38
 8001a84:	40021000 	.word	0x40021000
 8001a88:	007a1200 	.word	0x007a1200
 8001a8c:	003d0900 	.word	0x003d0900
 8001a90:	aaaaaaab 	.word	0xaaaaaaab

08001a94 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e084      	b.n	8001bb4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7c5b      	ldrb	r3, [r3, #17]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fd8a 	bl	80005d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f9c8 	bl	8001e5c <HAL_RTC_WaitForSynchro>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e06b      	b.n	8001bb4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fa81 	bl	8001fe4 <RTC_EnterInitMode>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2204      	movs	r2, #4
 8001aec:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e060      	b.n	8001bb4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0207 	bic.w	r2, r2, #7
 8001b00:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <HAL_RTC_Init+0x128>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_RTC_Init+0x128>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_RTC_Init+0x128>)
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4926      	ldr	r1, [pc, #152]	; (8001bbc <HAL_RTC_Init+0x128>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d003      	beq.n	8001b3a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e00e      	b.n	8001b58 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff feee 	bl	800191c <HAL_RCCEx_GetPeriphCLKFreq>
 8001b40:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d104      	bne.n	8001b52 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e030      	b.n	8001bb4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 010f 	bic.w	r1, r3, #15
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0c1a      	lsrs	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	b291      	uxth	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fa55 	bl	8002034 <RTC_ExitInitMode>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2204      	movs	r2, #4
 8001b94:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00c      	b.n	8001bb4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40006c00 	.word	0x40006c00

08001bc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_RTC_SetTime+0x20>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e080      	b.n	8001ce6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	7c1b      	ldrb	r3, [r3, #16]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_RTC_SetTime+0x30>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e07a      	b.n	8001ce6 <HAL_RTC_SetTime+0x126>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d113      	bne.n	8001c2a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c0c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	4619      	mov	r1, r3
 8001c16:	460b      	mov	r3, r1
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	1a5b      	subs	r3, r3, r1
 8001c1c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001c1e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e01e      	b.n	8001c68 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fa28 	bl	8002084 <RTC_Bcd2ToByte>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c3c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fa1d 	bl	8002084 <RTC_Bcd2ToByte>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c56:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	789b      	ldrb	r3, [r3, #2]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fa11 	bl	8002084 <RTC_Bcd2ToByte>
 8001c62:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c64:	4423      	add	r3, r4
 8001c66:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f953 	bl	8001f16 <RTC_WriteTimeCounter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e02f      	b.n	8001ce6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0205 	bic.w	r2, r2, #5
 8001c94:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f964 	bl	8001f64 <RTC_ReadAlarmCounter>
 8001c9c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d018      	beq.n	8001cd8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d214      	bcs.n	8001cd8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001cb4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cb8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001cba:	6939      	ldr	r1, [r7, #16]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f96a 	bl	8001f96 <RTC_WriteAlarmCounter>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e006      	b.n	8001ce6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
  }
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
	...

08001cf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_RTC_SetDate+0x24>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e097      	b.n	8001e48 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	7c1b      	ldrb	r3, [r3, #16]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_RTC_SetDate+0x34>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e091      	b.n	8001e48 <HAL_RTC_SetDate+0x158>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	78da      	ldrb	r2, [r3, #3]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	785a      	ldrb	r2, [r3, #1]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	789a      	ldrb	r2, [r3, #2]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	739a      	strb	r2, [r3, #14]
 8001d4e:	e01a      	b.n	8001d86 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	78db      	ldrb	r3, [r3, #3]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f995 	bl	8002084 <RTC_Bcd2ToByte>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	785b      	ldrb	r3, [r3, #1]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f98c 	bl	8002084 <RTC_Bcd2ToByte>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	789b      	ldrb	r3, [r3, #2]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f983 	bl	8002084 <RTC_Bcd2ToByte>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	7bdb      	ldrb	r3, [r3, #15]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	7b59      	ldrb	r1, [r3, #13]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	7b9b      	ldrb	r3, [r3, #14]
 8001d94:	461a      	mov	r2, r3
 8001d96:	f000 f993 	bl	80020c0 <RTC_WeekDayNum>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	7b1a      	ldrb	r2, [r3, #12]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f883 	bl	8001eb6 <RTC_ReadTimeCounter>
 8001db0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_RTC_SetDate+0x160>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0adb      	lsrs	r3, r3, #11
 8001dbc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b18      	cmp	r3, #24
 8001dc2:	d93a      	bls.n	8001e3a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_RTC_SetDate+0x164>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_RTC_SetDate+0x168>)
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001dda:	69f9      	ldr	r1, [r7, #28]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f89a 	bl	8001f16 <RTC_WriteTimeCounter>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2204      	movs	r2, #4
 8001dec:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e027      	b.n	8001e48 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f8b3 	bl	8001f64 <RTC_ReadAlarmCounter>
 8001dfe:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e06:	d018      	beq.n	8001e3a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d214      	bcs.n	8001e3a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e16:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e1a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f8b9 	bl	8001f96 <RTC_WriteAlarmCounter>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e006      	b.n	8001e48 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	91a2b3c5 	.word	0x91a2b3c5
 8001e54:	aaaaaaab 	.word	0xaaaaaaab
 8001e58:	00015180 	.word	0x00015180

08001e5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e01d      	b.n	8001eae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001e82:	f7fe fdd3 	bl	8000a2c <HAL_GetTick>
 8001e86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e88:	e009      	b.n	8001e9e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001e8a:	f7fe fdcf 	bl	8000a2c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e98:	d901      	bls.n	8001e9e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e007      	b.n	8001eae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b087      	sub	sp, #28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	827b      	strh	r3, [r7, #18]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	823b      	strh	r3, [r7, #16]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001ee6:	8a7a      	ldrh	r2, [r7, #18]
 8001ee8:	8a3b      	ldrh	r3, [r7, #16]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d008      	beq.n	8001f00 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001eee:	8a3b      	ldrh	r3, [r7, #16]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e004      	b.n	8001f0a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001f00:	8a7b      	ldrh	r3, [r7, #18]
 8001f02:	041a      	lsls	r2, r3, #16
 8001f04:	89fb      	ldrh	r3, [r7, #14]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001f0a:	697b      	ldr	r3, [r7, #20]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f85d 	bl	8001fe4 <RTC_EnterInitMode>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e011      	b.n	8001f5a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	0c12      	lsrs	r2, r2, #16
 8001f3e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	b292      	uxth	r2, r2
 8001f48:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f872 	bl	8002034 <RTC_ExitInitMode>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	81fb      	strh	r3, [r7, #14]
 8001f70:	2300      	movs	r3, #0
 8001f72:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	041a      	lsls	r2, r3, #16
 8001f88:	89bb      	ldrh	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f81d 	bl	8001fe4 <RTC_EnterInitMode>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e011      	b.n	8001fda <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	0c12      	lsrs	r2, r2, #16
 8001fbe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f832 	bl	8002034 <RTC_ExitInitMode>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001ff0:	f7fe fd1c 	bl	8000a2c <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ff6:	e009      	b.n	800200c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ff8:	f7fe fd18 	bl	8000a2c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002006:	d901      	bls.n	800200c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e00f      	b.n	800202c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ee      	beq.n	8001ff8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0210 	orr.w	r2, r2, #16
 8002028:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0210 	bic.w	r2, r2, #16
 800204e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002050:	f7fe fcec 	bl	8000a2c <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002056:	e009      	b.n	800206c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002058:	f7fe fce8 	bl	8000a2c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002066:	d901      	bls.n	800206c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e007      	b.n	800207c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0ee      	beq.n	8002058 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	b2db      	uxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
	...

080020c0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
 80020cc:	4613      	mov	r3, r2
 80020ce:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80020de:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d82d      	bhi.n	8002142 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	4a2c      	ldr	r2, [pc, #176]	; (80021a4 <RTC_WeekDayNum+0xe4>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	085a      	lsrs	r2, r3, #1
 80020fa:	78bb      	ldrb	r3, [r7, #2]
 80020fc:	441a      	add	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	441a      	add	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3b01      	subs	r3, #1
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	4926      	ldr	r1, [pc, #152]	; (80021a8 <RTC_WeekDayNum+0xe8>)
 8002110:	fba1 1303 	umull	r1, r3, r1, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3b01      	subs	r3, #1
 800211c:	4922      	ldr	r1, [pc, #136]	; (80021a8 <RTC_WeekDayNum+0xe8>)
 800211e:	fba1 1303 	umull	r1, r3, r1, r3
 8002122:	09db      	lsrs	r3, r3, #7
 8002124:	4413      	add	r3, r2
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <RTC_WeekDayNum+0xec>)
 800212a:	fba3 1302 	umull	r1, r3, r3, r2
 800212e:	1ad1      	subs	r1, r2, r3
 8002130:	0849      	lsrs	r1, r1, #1
 8002132:	440b      	add	r3, r1
 8002134:	0899      	lsrs	r1, r3, #2
 8002136:	460b      	mov	r3, r1
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a5b      	subs	r3, r3, r1
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e029      	b.n	8002196 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <RTC_WeekDayNum+0xe4>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	085a      	lsrs	r2, r3, #1
 8002156:	78bb      	ldrb	r3, [r7, #2]
 8002158:	441a      	add	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	441a      	add	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4910      	ldr	r1, [pc, #64]	; (80021a8 <RTC_WeekDayNum+0xe8>)
 8002168:	fba1 1303 	umull	r1, r3, r1, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	1ad2      	subs	r2, r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	490d      	ldr	r1, [pc, #52]	; (80021a8 <RTC_WeekDayNum+0xe8>)
 8002174:	fba1 1303 	umull	r1, r3, r1, r3
 8002178:	09db      	lsrs	r3, r3, #7
 800217a:	4413      	add	r3, r2
 800217c:	1c9a      	adds	r2, r3, #2
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <RTC_WeekDayNum+0xec>)
 8002180:	fba3 1302 	umull	r1, r3, r3, r2
 8002184:	1ad1      	subs	r1, r2, r3
 8002186:	0849      	lsrs	r1, r1, #1
 8002188:	440b      	add	r3, r1
 800218a:	0899      	lsrs	r1, r3, #2
 800218c:	460b      	mov	r3, r1
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a5b      	subs	r3, r3, r1
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	b2db      	uxtb	r3, r3
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	38e38e39 	.word	0x38e38e39
 80021a8:	51eb851f 	.word	0x51eb851f
 80021ac:	24924925 	.word	0x24924925

080021b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e01d      	b.n	80021fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fa20 	bl	800061c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 f9ee 	bl	80025d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e01d      	b.n	8002254 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f815 	bl	800225c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3304      	adds	r3, #4
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f000 f9c3 	bl	80025d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
	...

08002270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2201      	movs	r2, #1
 8002280:	6839      	ldr	r1, [r7, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fc24 	bl	8002ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_TIM_PWM_Start+0x60>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d007      	beq.n	80022c4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40012c00 	.word	0x40012c00

080022d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0b4      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x184>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0c      	cmp	r3, #12
 8002302:	f200 809f 	bhi.w	8002444 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002306:	a201      	add	r2, pc, #4	; (adr r2, 800230c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	08002341 	.word	0x08002341
 8002310:	08002445 	.word	0x08002445
 8002314:	08002445 	.word	0x08002445
 8002318:	08002445 	.word	0x08002445
 800231c:	08002381 	.word	0x08002381
 8002320:	08002445 	.word	0x08002445
 8002324:	08002445 	.word	0x08002445
 8002328:	08002445 	.word	0x08002445
 800232c:	080023c3 	.word	0x080023c3
 8002330:	08002445 	.word	0x08002445
 8002334:	08002445 	.word	0x08002445
 8002338:	08002445 	.word	0x08002445
 800233c:	08002403 	.word	0x08002403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f9a4 	bl	8002694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0204 	bic.w	r2, r2, #4
 800236a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6999      	ldr	r1, [r3, #24]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	619a      	str	r2, [r3, #24]
      break;
 800237e:	e062      	b.n	8002446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f9ea 	bl	8002760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6999      	ldr	r1, [r3, #24]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	021a      	lsls	r2, r3, #8
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	619a      	str	r2, [r3, #24]
      break;
 80023c0:	e041      	b.n	8002446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fa33 	bl	8002834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0208 	orr.w	r2, r2, #8
 80023dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0204 	bic.w	r2, r2, #4
 80023ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69d9      	ldr	r1, [r3, #28]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	61da      	str	r2, [r3, #28]
      break;
 8002400:	e021      	b.n	8002446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fa7d 	bl	8002908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69d9      	ldr	r1, [r3, #28]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	021a      	lsls	r2, r3, #8
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	61da      	str	r2, [r3, #28]
      break;
 8002442:	e000      	b.n	8002446 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002444:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_TIM_ConfigClockSource+0x18>
 8002474:	2302      	movs	r3, #2
 8002476:	e0a6      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x166>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800249e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d067      	beq.n	8002580 <HAL_TIM_ConfigClockSource+0x120>
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d80b      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x6c>
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d073      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0x140>
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d802      	bhi.n	80024c2 <HAL_TIM_ConfigClockSource+0x62>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d06f      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024c0:	e078      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d06c      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0x140>
 80024c6:	2b30      	cmp	r3, #48	; 0x30
 80024c8:	d06a      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024ca:	e073      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024cc:	2b70      	cmp	r3, #112	; 0x70
 80024ce:	d00d      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x8c>
 80024d0:	2b70      	cmp	r3, #112	; 0x70
 80024d2:	d804      	bhi.n	80024de <HAL_TIM_ConfigClockSource+0x7e>
 80024d4:	2b50      	cmp	r3, #80	; 0x50
 80024d6:	d033      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0xe0>
 80024d8:	2b60      	cmp	r3, #96	; 0x60
 80024da:	d041      	beq.n	8002560 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024dc:	e06a      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	d066      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x152>
 80024e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e8:	d017      	beq.n	800251a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80024ea:	e063      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6899      	ldr	r1, [r3, #8]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f000 fac9 	bl	8002a92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800250e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]
      break;
 8002518:	e04c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6899      	ldr	r1, [r3, #8]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f000 fab2 	bl	8002a92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800253c:	609a      	str	r2, [r3, #8]
      break;
 800253e:	e039      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	461a      	mov	r2, r3
 800254e:	f000 fa29 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2150      	movs	r1, #80	; 0x50
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa80 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 800255e:	e029      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	461a      	mov	r2, r3
 800256e:	f000 fa47 	bl	8002a00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2160      	movs	r1, #96	; 0x60
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fa70 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 800257e:	e019      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	461a      	mov	r2, r3
 800258e:	f000 fa09 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa60 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 800259e:	e009      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 fa57 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 80025b0:	e000      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a29      	ldr	r2, [pc, #164]	; (8002688 <TIM_Base_SetConfig+0xb8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00b      	beq.n	8002600 <TIM_Base_SetConfig+0x30>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d007      	beq.n	8002600 <TIM_Base_SetConfig+0x30>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a26      	ldr	r2, [pc, #152]	; (800268c <TIM_Base_SetConfig+0xbc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d003      	beq.n	8002600 <TIM_Base_SetConfig+0x30>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a25      	ldr	r2, [pc, #148]	; (8002690 <TIM_Base_SetConfig+0xc0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d108      	bne.n	8002612 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <TIM_Base_SetConfig+0xb8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <TIM_Base_SetConfig+0x62>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002620:	d007      	beq.n	8002632 <TIM_Base_SetConfig+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <TIM_Base_SetConfig+0xbc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_Base_SetConfig+0x62>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a18      	ldr	r2, [pc, #96]	; (8002690 <TIM_Base_SetConfig+0xc0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d108      	bne.n	8002644 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <TIM_Base_SetConfig+0xb8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d103      	bne.n	8002678 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	615a      	str	r2, [r3, #20]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40000400 	.word	0x40000400
 8002690:	40000800 	.word	0x40000800

08002694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f023 0201 	bic.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f023 0302 	bic.w	r3, r3, #2
 80026dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a1c      	ldr	r2, [pc, #112]	; (800275c <TIM_OC1_SetConfig+0xc8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10c      	bne.n	800270a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0308 	bic.w	r3, r3, #8
 80026f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <TIM_OC1_SetConfig+0xc8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d111      	bne.n	8002736 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	621a      	str	r2, [r3, #32]
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00

08002760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f023 0210 	bic.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0320 	bic.w	r3, r3, #32
 80027aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <TIM_OC2_SetConfig+0xd0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10d      	bne.n	80027dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <TIM_OC2_SetConfig+0xd0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d113      	bne.n	800280c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00

08002834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800287c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <TIM_OC3_SetConfig+0xd0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10d      	bne.n	80028ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <TIM_OC3_SetConfig+0xd0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d113      	bne.n	80028de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00

08002908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	031b      	lsls	r3, r3, #12
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <TIM_OC4_SetConfig+0x98>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d109      	bne.n	800297c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800296e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00

080029a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f023 030a 	bic.w	r3, r3, #10
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	621a      	str	r2, [r3, #32]
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f023 0210 	bic.w	r2, r3, #16
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	031b      	lsls	r3, r3, #12
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	621a      	str	r2, [r3, #32]
}
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f043 0307 	orr.w	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	021a      	lsls	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	609a      	str	r2, [r3, #8]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	401a      	ands	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e032      	b.n	8002b96 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b68:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e03f      	b.n	8002c32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fd74 	bl	80006b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f90b 	bl	8002e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b088      	sub	sp, #32
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 8083 	bne.w	8002d62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_UART_Transmit+0x2e>
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e07b      	b.n	8002d64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Transmit+0x40>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e074      	b.n	8002d64 <HAL_UART_Transmit+0x12a>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2221      	movs	r2, #33	; 0x21
 8002c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c90:	f7fd fecc 	bl	8000a2c <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ca2:	e042      	b.n	8002d2a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	d122      	bne.n	8002d02 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f850 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e046      	b.n	8002d64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	e017      	b.n	8002d2a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	e013      	b.n	8002d2a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f82d 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e023      	b.n	8002d64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	60ba      	str	r2, [r7, #8]
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1b7      	bne.n	8002ca4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f814 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e00a      	b.n	8002d64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	e02c      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d028      	beq.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8c:	f7fd fe4e 	bl	8000a2c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d21d      	bcs.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002daa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e00f      	b.n	8002df8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d0c3      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e3a:	f023 030c 	bic.w	r3, r3, #12
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a52      	ldr	r2, [pc, #328]	; (8002fac <UART_SetConfig+0x1ac>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d14e      	bne.n	8002f06 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7fe fc70 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8002e6c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009a      	lsls	r2, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	4a4a      	ldr	r2, [pc, #296]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	0119      	lsls	r1, r3, #4
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2064      	movs	r0, #100	; 0x64
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	3332      	adds	r3, #50	; 0x32
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	4419      	add	r1, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002ede:	fba3 0302 	umull	r0, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2064      	movs	r0, #100	; 0x64
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	3332      	adds	r3, #50	; 0x32
 8002ef0:	4a2f      	ldr	r2, [pc, #188]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	440a      	add	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002f04:	e04d      	b.n	8002fa2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7fe fc0d 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8002f0a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	009a      	lsls	r2, r3, #2
 8002f16:	441a      	add	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	0119      	lsls	r1, r3, #4
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009a      	lsls	r2, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002f44:	fba3 0302 	umull	r0, r3, r3, r2
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2064      	movs	r0, #100	; 0x64
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f62:	4419      	add	r1, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009a      	lsls	r2, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002f7c:	fba3 0302 	umull	r0, r3, r3, r2
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	2064      	movs	r0, #100	; 0x64
 8002f84:	fb00 f303 	mul.w	r3, r0, r3
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	3332      	adds	r3, #50	; 0x32
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <UART_SetConfig+0x1b0>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	f003 020f 	and.w	r2, r3, #15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	440a      	add	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	51eb851f 	.word	0x51eb851f

08002fb4 <__errno>:
 8002fb4:	4b01      	ldr	r3, [pc, #4]	; (8002fbc <__errno+0x8>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000000c 	.word	0x2000000c

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2500      	movs	r5, #0
 8002fc4:	4e0c      	ldr	r6, [pc, #48]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc6:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc8:	1ba4      	subs	r4, r4, r6
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	42a5      	cmp	r5, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	f000 ff10 	bl	8003df4 <_init>
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	4e0a      	ldr	r6, [pc, #40]	; (8003000 <__libc_init_array+0x40>)
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	; (8003004 <__libc_init_array+0x44>)
 8002fda:	1ba4      	subs	r4, r4, r6
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	42a5      	cmp	r5, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe8:	4798      	blx	r3
 8002fea:	3501      	adds	r5, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff2:	4798      	blx	r3
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08003eec 	.word	0x08003eec
 8002ffc:	08003eec 	.word	0x08003eec
 8003000:	08003eec 	.word	0x08003eec
 8003004:	08003ef0 	.word	0x08003ef0

08003008 <memset>:
 8003008:	4603      	mov	r3, r0
 800300a:	4402      	add	r2, r0
 800300c:	4293      	cmp	r3, r2
 800300e:	d100      	bne.n	8003012 <memset+0xa>
 8003010:	4770      	bx	lr
 8003012:	f803 1b01 	strb.w	r1, [r3], #1
 8003016:	e7f9      	b.n	800300c <memset+0x4>

08003018 <iprintf>:
 8003018:	b40f      	push	{r0, r1, r2, r3}
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <iprintf+0x2c>)
 800301c:	b513      	push	{r0, r1, r4, lr}
 800301e:	681c      	ldr	r4, [r3, #0]
 8003020:	b124      	cbz	r4, 800302c <iprintf+0x14>
 8003022:	69a3      	ldr	r3, [r4, #24]
 8003024:	b913      	cbnz	r3, 800302c <iprintf+0x14>
 8003026:	4620      	mov	r0, r4
 8003028:	f000 f84e 	bl	80030c8 <__sinit>
 800302c:	ab05      	add	r3, sp, #20
 800302e:	9a04      	ldr	r2, [sp, #16]
 8003030:	68a1      	ldr	r1, [r4, #8]
 8003032:	4620      	mov	r0, r4
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	f000 f953 	bl	80032e0 <_vfiprintf_r>
 800303a:	b002      	add	sp, #8
 800303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003040:	b004      	add	sp, #16
 8003042:	4770      	bx	lr
 8003044:	2000000c 	.word	0x2000000c

08003048 <std>:
 8003048:	2300      	movs	r3, #0
 800304a:	b510      	push	{r4, lr}
 800304c:	4604      	mov	r4, r0
 800304e:	e9c0 3300 	strd	r3, r3, [r0]
 8003052:	6083      	str	r3, [r0, #8]
 8003054:	8181      	strh	r1, [r0, #12]
 8003056:	6643      	str	r3, [r0, #100]	; 0x64
 8003058:	81c2      	strh	r2, [r0, #14]
 800305a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800305e:	6183      	str	r3, [r0, #24]
 8003060:	4619      	mov	r1, r3
 8003062:	2208      	movs	r2, #8
 8003064:	305c      	adds	r0, #92	; 0x5c
 8003066:	f7ff ffcf 	bl	8003008 <memset>
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <std+0x38>)
 800306c:	6224      	str	r4, [r4, #32]
 800306e:	6263      	str	r3, [r4, #36]	; 0x24
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <std+0x3c>)
 8003072:	62a3      	str	r3, [r4, #40]	; 0x28
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <std+0x40>)
 8003076:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <std+0x44>)
 800307a:	6323      	str	r3, [r4, #48]	; 0x30
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	0800383d 	.word	0x0800383d
 8003084:	0800385f 	.word	0x0800385f
 8003088:	08003897 	.word	0x08003897
 800308c:	080038bb 	.word	0x080038bb

08003090 <_cleanup_r>:
 8003090:	4901      	ldr	r1, [pc, #4]	; (8003098 <_cleanup_r+0x8>)
 8003092:	f000 b885 	b.w	80031a0 <_fwalk_reent>
 8003096:	bf00      	nop
 8003098:	08003b95 	.word	0x08003b95

0800309c <__sfmoreglue>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	2568      	movs	r5, #104	; 0x68
 80030a0:	1e4a      	subs	r2, r1, #1
 80030a2:	4355      	muls	r5, r2
 80030a4:	460e      	mov	r6, r1
 80030a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030aa:	f000 f897 	bl	80031dc <_malloc_r>
 80030ae:	4604      	mov	r4, r0
 80030b0:	b140      	cbz	r0, 80030c4 <__sfmoreglue+0x28>
 80030b2:	2100      	movs	r1, #0
 80030b4:	e9c0 1600 	strd	r1, r6, [r0]
 80030b8:	300c      	adds	r0, #12
 80030ba:	60a0      	str	r0, [r4, #8]
 80030bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030c0:	f7ff ffa2 	bl	8003008 <memset>
 80030c4:	4620      	mov	r0, r4
 80030c6:	bd70      	pop	{r4, r5, r6, pc}

080030c8 <__sinit>:
 80030c8:	6983      	ldr	r3, [r0, #24]
 80030ca:	b510      	push	{r4, lr}
 80030cc:	4604      	mov	r4, r0
 80030ce:	bb33      	cbnz	r3, 800311e <__sinit+0x56>
 80030d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80030d4:	6503      	str	r3, [r0, #80]	; 0x50
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <__sinit+0x58>)
 80030d8:	4a12      	ldr	r2, [pc, #72]	; (8003124 <__sinit+0x5c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6282      	str	r2, [r0, #40]	; 0x28
 80030de:	4298      	cmp	r0, r3
 80030e0:	bf04      	itt	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	6183      	streq	r3, [r0, #24]
 80030e6:	f000 f81f 	bl	8003128 <__sfp>
 80030ea:	6060      	str	r0, [r4, #4]
 80030ec:	4620      	mov	r0, r4
 80030ee:	f000 f81b 	bl	8003128 <__sfp>
 80030f2:	60a0      	str	r0, [r4, #8]
 80030f4:	4620      	mov	r0, r4
 80030f6:	f000 f817 	bl	8003128 <__sfp>
 80030fa:	2200      	movs	r2, #0
 80030fc:	60e0      	str	r0, [r4, #12]
 80030fe:	2104      	movs	r1, #4
 8003100:	6860      	ldr	r0, [r4, #4]
 8003102:	f7ff ffa1 	bl	8003048 <std>
 8003106:	2201      	movs	r2, #1
 8003108:	2109      	movs	r1, #9
 800310a:	68a0      	ldr	r0, [r4, #8]
 800310c:	f7ff ff9c 	bl	8003048 <std>
 8003110:	2202      	movs	r2, #2
 8003112:	2112      	movs	r1, #18
 8003114:	68e0      	ldr	r0, [r4, #12]
 8003116:	f7ff ff97 	bl	8003048 <std>
 800311a:	2301      	movs	r3, #1
 800311c:	61a3      	str	r3, [r4, #24]
 800311e:	bd10      	pop	{r4, pc}
 8003120:	08003e54 	.word	0x08003e54
 8003124:	08003091 	.word	0x08003091

08003128 <__sfp>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <__sfp+0x70>)
 800312c:	4607      	mov	r7, r0
 800312e:	681e      	ldr	r6, [r3, #0]
 8003130:	69b3      	ldr	r3, [r6, #24]
 8003132:	b913      	cbnz	r3, 800313a <__sfp+0x12>
 8003134:	4630      	mov	r0, r6
 8003136:	f7ff ffc7 	bl	80030c8 <__sinit>
 800313a:	3648      	adds	r6, #72	; 0x48
 800313c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003140:	3b01      	subs	r3, #1
 8003142:	d503      	bpl.n	800314c <__sfp+0x24>
 8003144:	6833      	ldr	r3, [r6, #0]
 8003146:	b133      	cbz	r3, 8003156 <__sfp+0x2e>
 8003148:	6836      	ldr	r6, [r6, #0]
 800314a:	e7f7      	b.n	800313c <__sfp+0x14>
 800314c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003150:	b16d      	cbz	r5, 800316e <__sfp+0x46>
 8003152:	3468      	adds	r4, #104	; 0x68
 8003154:	e7f4      	b.n	8003140 <__sfp+0x18>
 8003156:	2104      	movs	r1, #4
 8003158:	4638      	mov	r0, r7
 800315a:	f7ff ff9f 	bl	800309c <__sfmoreglue>
 800315e:	6030      	str	r0, [r6, #0]
 8003160:	2800      	cmp	r0, #0
 8003162:	d1f1      	bne.n	8003148 <__sfp+0x20>
 8003164:	230c      	movs	r3, #12
 8003166:	4604      	mov	r4, r0
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4620      	mov	r0, r4
 800316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800316e:	4b0b      	ldr	r3, [pc, #44]	; (800319c <__sfp+0x74>)
 8003170:	6665      	str	r5, [r4, #100]	; 0x64
 8003172:	e9c4 5500 	strd	r5, r5, [r4]
 8003176:	60a5      	str	r5, [r4, #8]
 8003178:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800317c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003180:	2208      	movs	r2, #8
 8003182:	4629      	mov	r1, r5
 8003184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003188:	f7ff ff3e 	bl	8003008 <memset>
 800318c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003194:	e7e9      	b.n	800316a <__sfp+0x42>
 8003196:	bf00      	nop
 8003198:	08003e54 	.word	0x08003e54
 800319c:	ffff0001 	.word	0xffff0001

080031a0 <_fwalk_reent>:
 80031a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a4:	4680      	mov	r8, r0
 80031a6:	4689      	mov	r9, r1
 80031a8:	2600      	movs	r6, #0
 80031aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031ae:	b914      	cbnz	r4, 80031b6 <_fwalk_reent+0x16>
 80031b0:	4630      	mov	r0, r6
 80031b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80031ba:	3f01      	subs	r7, #1
 80031bc:	d501      	bpl.n	80031c2 <_fwalk_reent+0x22>
 80031be:	6824      	ldr	r4, [r4, #0]
 80031c0:	e7f5      	b.n	80031ae <_fwalk_reent+0xe>
 80031c2:	89ab      	ldrh	r3, [r5, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d907      	bls.n	80031d8 <_fwalk_reent+0x38>
 80031c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031cc:	3301      	adds	r3, #1
 80031ce:	d003      	beq.n	80031d8 <_fwalk_reent+0x38>
 80031d0:	4629      	mov	r1, r5
 80031d2:	4640      	mov	r0, r8
 80031d4:	47c8      	blx	r9
 80031d6:	4306      	orrs	r6, r0
 80031d8:	3568      	adds	r5, #104	; 0x68
 80031da:	e7ee      	b.n	80031ba <_fwalk_reent+0x1a>

080031dc <_malloc_r>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	1ccd      	adds	r5, r1, #3
 80031e0:	f025 0503 	bic.w	r5, r5, #3
 80031e4:	3508      	adds	r5, #8
 80031e6:	2d0c      	cmp	r5, #12
 80031e8:	bf38      	it	cc
 80031ea:	250c      	movcc	r5, #12
 80031ec:	2d00      	cmp	r5, #0
 80031ee:	4606      	mov	r6, r0
 80031f0:	db01      	blt.n	80031f6 <_malloc_r+0x1a>
 80031f2:	42a9      	cmp	r1, r5
 80031f4:	d903      	bls.n	80031fe <_malloc_r+0x22>
 80031f6:	230c      	movs	r3, #12
 80031f8:	6033      	str	r3, [r6, #0]
 80031fa:	2000      	movs	r0, #0
 80031fc:	bd70      	pop	{r4, r5, r6, pc}
 80031fe:	f000 fd77 	bl	8003cf0 <__malloc_lock>
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <_malloc_r+0xac>)
 8003204:	6814      	ldr	r4, [r2, #0]
 8003206:	4621      	mov	r1, r4
 8003208:	b991      	cbnz	r1, 8003230 <_malloc_r+0x54>
 800320a:	4c20      	ldr	r4, [pc, #128]	; (800328c <_malloc_r+0xb0>)
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	b91b      	cbnz	r3, 8003218 <_malloc_r+0x3c>
 8003210:	4630      	mov	r0, r6
 8003212:	f000 fb03 	bl	800381c <_sbrk_r>
 8003216:	6020      	str	r0, [r4, #0]
 8003218:	4629      	mov	r1, r5
 800321a:	4630      	mov	r0, r6
 800321c:	f000 fafe 	bl	800381c <_sbrk_r>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d124      	bne.n	800326e <_malloc_r+0x92>
 8003224:	230c      	movs	r3, #12
 8003226:	4630      	mov	r0, r6
 8003228:	6033      	str	r3, [r6, #0]
 800322a:	f000 fd62 	bl	8003cf2 <__malloc_unlock>
 800322e:	e7e4      	b.n	80031fa <_malloc_r+0x1e>
 8003230:	680b      	ldr	r3, [r1, #0]
 8003232:	1b5b      	subs	r3, r3, r5
 8003234:	d418      	bmi.n	8003268 <_malloc_r+0x8c>
 8003236:	2b0b      	cmp	r3, #11
 8003238:	d90f      	bls.n	800325a <_malloc_r+0x7e>
 800323a:	600b      	str	r3, [r1, #0]
 800323c:	18cc      	adds	r4, r1, r3
 800323e:	50cd      	str	r5, [r1, r3]
 8003240:	4630      	mov	r0, r6
 8003242:	f000 fd56 	bl	8003cf2 <__malloc_unlock>
 8003246:	f104 000b 	add.w	r0, r4, #11
 800324a:	1d23      	adds	r3, r4, #4
 800324c:	f020 0007 	bic.w	r0, r0, #7
 8003250:	1ac3      	subs	r3, r0, r3
 8003252:	d0d3      	beq.n	80031fc <_malloc_r+0x20>
 8003254:	425a      	negs	r2, r3
 8003256:	50e2      	str	r2, [r4, r3]
 8003258:	e7d0      	b.n	80031fc <_malloc_r+0x20>
 800325a:	684b      	ldr	r3, [r1, #4]
 800325c:	428c      	cmp	r4, r1
 800325e:	bf16      	itet	ne
 8003260:	6063      	strne	r3, [r4, #4]
 8003262:	6013      	streq	r3, [r2, #0]
 8003264:	460c      	movne	r4, r1
 8003266:	e7eb      	b.n	8003240 <_malloc_r+0x64>
 8003268:	460c      	mov	r4, r1
 800326a:	6849      	ldr	r1, [r1, #4]
 800326c:	e7cc      	b.n	8003208 <_malloc_r+0x2c>
 800326e:	1cc4      	adds	r4, r0, #3
 8003270:	f024 0403 	bic.w	r4, r4, #3
 8003274:	42a0      	cmp	r0, r4
 8003276:	d005      	beq.n	8003284 <_malloc_r+0xa8>
 8003278:	1a21      	subs	r1, r4, r0
 800327a:	4630      	mov	r0, r6
 800327c:	f000 face 	bl	800381c <_sbrk_r>
 8003280:	3001      	adds	r0, #1
 8003282:	d0cf      	beq.n	8003224 <_malloc_r+0x48>
 8003284:	6025      	str	r5, [r4, #0]
 8003286:	e7db      	b.n	8003240 <_malloc_r+0x64>
 8003288:	20000090 	.word	0x20000090
 800328c:	20000094 	.word	0x20000094

08003290 <__sfputc_r>:
 8003290:	6893      	ldr	r3, [r2, #8]
 8003292:	b410      	push	{r4}
 8003294:	3b01      	subs	r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	6093      	str	r3, [r2, #8]
 800329a:	da07      	bge.n	80032ac <__sfputc_r+0x1c>
 800329c:	6994      	ldr	r4, [r2, #24]
 800329e:	42a3      	cmp	r3, r4
 80032a0:	db01      	blt.n	80032a6 <__sfputc_r+0x16>
 80032a2:	290a      	cmp	r1, #10
 80032a4:	d102      	bne.n	80032ac <__sfputc_r+0x1c>
 80032a6:	bc10      	pop	{r4}
 80032a8:	f000 bb0c 	b.w	80038c4 <__swbuf_r>
 80032ac:	6813      	ldr	r3, [r2, #0]
 80032ae:	1c58      	adds	r0, r3, #1
 80032b0:	6010      	str	r0, [r2, #0]
 80032b2:	7019      	strb	r1, [r3, #0]
 80032b4:	4608      	mov	r0, r1
 80032b6:	bc10      	pop	{r4}
 80032b8:	4770      	bx	lr

080032ba <__sfputs_r>:
 80032ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032bc:	4606      	mov	r6, r0
 80032be:	460f      	mov	r7, r1
 80032c0:	4614      	mov	r4, r2
 80032c2:	18d5      	adds	r5, r2, r3
 80032c4:	42ac      	cmp	r4, r5
 80032c6:	d101      	bne.n	80032cc <__sfputs_r+0x12>
 80032c8:	2000      	movs	r0, #0
 80032ca:	e007      	b.n	80032dc <__sfputs_r+0x22>
 80032cc:	463a      	mov	r2, r7
 80032ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d2:	4630      	mov	r0, r6
 80032d4:	f7ff ffdc 	bl	8003290 <__sfputc_r>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	d1f3      	bne.n	80032c4 <__sfputs_r+0xa>
 80032dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032e0 <_vfiprintf_r>:
 80032e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e4:	460c      	mov	r4, r1
 80032e6:	b09d      	sub	sp, #116	; 0x74
 80032e8:	4617      	mov	r7, r2
 80032ea:	461d      	mov	r5, r3
 80032ec:	4606      	mov	r6, r0
 80032ee:	b118      	cbz	r0, 80032f8 <_vfiprintf_r+0x18>
 80032f0:	6983      	ldr	r3, [r0, #24]
 80032f2:	b90b      	cbnz	r3, 80032f8 <_vfiprintf_r+0x18>
 80032f4:	f7ff fee8 	bl	80030c8 <__sinit>
 80032f8:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <_vfiprintf_r+0x20c>)
 80032fa:	429c      	cmp	r4, r3
 80032fc:	d158      	bne.n	80033b0 <_vfiprintf_r+0xd0>
 80032fe:	6874      	ldr	r4, [r6, #4]
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	0718      	lsls	r0, r3, #28
 8003304:	d55e      	bpl.n	80033c4 <_vfiprintf_r+0xe4>
 8003306:	6923      	ldr	r3, [r4, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <_vfiprintf_r+0xe4>
 800330c:	2300      	movs	r3, #0
 800330e:	9309      	str	r3, [sp, #36]	; 0x24
 8003310:	2320      	movs	r3, #32
 8003312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003316:	2330      	movs	r3, #48	; 0x30
 8003318:	f04f 0b01 	mov.w	fp, #1
 800331c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003320:	9503      	str	r5, [sp, #12]
 8003322:	46b8      	mov	r8, r7
 8003324:	4645      	mov	r5, r8
 8003326:	f815 3b01 	ldrb.w	r3, [r5], #1
 800332a:	b10b      	cbz	r3, 8003330 <_vfiprintf_r+0x50>
 800332c:	2b25      	cmp	r3, #37	; 0x25
 800332e:	d154      	bne.n	80033da <_vfiprintf_r+0xfa>
 8003330:	ebb8 0a07 	subs.w	sl, r8, r7
 8003334:	d00b      	beq.n	800334e <_vfiprintf_r+0x6e>
 8003336:	4653      	mov	r3, sl
 8003338:	463a      	mov	r2, r7
 800333a:	4621      	mov	r1, r4
 800333c:	4630      	mov	r0, r6
 800333e:	f7ff ffbc 	bl	80032ba <__sfputs_r>
 8003342:	3001      	adds	r0, #1
 8003344:	f000 80c2 	beq.w	80034cc <_vfiprintf_r+0x1ec>
 8003348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800334a:	4453      	add	r3, sl
 800334c:	9309      	str	r3, [sp, #36]	; 0x24
 800334e:	f898 3000 	ldrb.w	r3, [r8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80ba 	beq.w	80034cc <_vfiprintf_r+0x1ec>
 8003358:	2300      	movs	r3, #0
 800335a:	f04f 32ff 	mov.w	r2, #4294967295
 800335e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003362:	9304      	str	r3, [sp, #16]
 8003364:	9307      	str	r3, [sp, #28]
 8003366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800336a:	931a      	str	r3, [sp, #104]	; 0x68
 800336c:	46a8      	mov	r8, r5
 800336e:	2205      	movs	r2, #5
 8003370:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003374:	485e      	ldr	r0, [pc, #376]	; (80034f0 <_vfiprintf_r+0x210>)
 8003376:	f000 fcad 	bl	8003cd4 <memchr>
 800337a:	9b04      	ldr	r3, [sp, #16]
 800337c:	bb78      	cbnz	r0, 80033de <_vfiprintf_r+0xfe>
 800337e:	06d9      	lsls	r1, r3, #27
 8003380:	bf44      	itt	mi
 8003382:	2220      	movmi	r2, #32
 8003384:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003388:	071a      	lsls	r2, r3, #28
 800338a:	bf44      	itt	mi
 800338c:	222b      	movmi	r2, #43	; 0x2b
 800338e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003392:	782a      	ldrb	r2, [r5, #0]
 8003394:	2a2a      	cmp	r2, #42	; 0x2a
 8003396:	d02a      	beq.n	80033ee <_vfiprintf_r+0x10e>
 8003398:	46a8      	mov	r8, r5
 800339a:	2000      	movs	r0, #0
 800339c:	250a      	movs	r5, #10
 800339e:	9a07      	ldr	r2, [sp, #28]
 80033a0:	4641      	mov	r1, r8
 80033a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033a6:	3b30      	subs	r3, #48	; 0x30
 80033a8:	2b09      	cmp	r3, #9
 80033aa:	d969      	bls.n	8003480 <_vfiprintf_r+0x1a0>
 80033ac:	b360      	cbz	r0, 8003408 <_vfiprintf_r+0x128>
 80033ae:	e024      	b.n	80033fa <_vfiprintf_r+0x11a>
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <_vfiprintf_r+0x214>)
 80033b2:	429c      	cmp	r4, r3
 80033b4:	d101      	bne.n	80033ba <_vfiprintf_r+0xda>
 80033b6:	68b4      	ldr	r4, [r6, #8]
 80033b8:	e7a2      	b.n	8003300 <_vfiprintf_r+0x20>
 80033ba:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <_vfiprintf_r+0x218>)
 80033bc:	429c      	cmp	r4, r3
 80033be:	bf08      	it	eq
 80033c0:	68f4      	ldreq	r4, [r6, #12]
 80033c2:	e79d      	b.n	8003300 <_vfiprintf_r+0x20>
 80033c4:	4621      	mov	r1, r4
 80033c6:	4630      	mov	r0, r6
 80033c8:	f000 fae0 	bl	800398c <__swsetup_r>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d09d      	beq.n	800330c <_vfiprintf_r+0x2c>
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	b01d      	add	sp, #116	; 0x74
 80033d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033da:	46a8      	mov	r8, r5
 80033dc:	e7a2      	b.n	8003324 <_vfiprintf_r+0x44>
 80033de:	4a44      	ldr	r2, [pc, #272]	; (80034f0 <_vfiprintf_r+0x210>)
 80033e0:	4645      	mov	r5, r8
 80033e2:	1a80      	subs	r0, r0, r2
 80033e4:	fa0b f000 	lsl.w	r0, fp, r0
 80033e8:	4318      	orrs	r0, r3
 80033ea:	9004      	str	r0, [sp, #16]
 80033ec:	e7be      	b.n	800336c <_vfiprintf_r+0x8c>
 80033ee:	9a03      	ldr	r2, [sp, #12]
 80033f0:	1d11      	adds	r1, r2, #4
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	9103      	str	r1, [sp, #12]
 80033f6:	2a00      	cmp	r2, #0
 80033f8:	db01      	blt.n	80033fe <_vfiprintf_r+0x11e>
 80033fa:	9207      	str	r2, [sp, #28]
 80033fc:	e004      	b.n	8003408 <_vfiprintf_r+0x128>
 80033fe:	4252      	negs	r2, r2
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	9207      	str	r2, [sp, #28]
 8003406:	9304      	str	r3, [sp, #16]
 8003408:	f898 3000 	ldrb.w	r3, [r8]
 800340c:	2b2e      	cmp	r3, #46	; 0x2e
 800340e:	d10e      	bne.n	800342e <_vfiprintf_r+0x14e>
 8003410:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003414:	2b2a      	cmp	r3, #42	; 0x2a
 8003416:	d138      	bne.n	800348a <_vfiprintf_r+0x1aa>
 8003418:	9b03      	ldr	r3, [sp, #12]
 800341a:	f108 0802 	add.w	r8, r8, #2
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	9203      	str	r2, [sp, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	bfb8      	it	lt
 8003428:	f04f 33ff 	movlt.w	r3, #4294967295
 800342c:	9305      	str	r3, [sp, #20]
 800342e:	4d33      	ldr	r5, [pc, #204]	; (80034fc <_vfiprintf_r+0x21c>)
 8003430:	2203      	movs	r2, #3
 8003432:	f898 1000 	ldrb.w	r1, [r8]
 8003436:	4628      	mov	r0, r5
 8003438:	f000 fc4c 	bl	8003cd4 <memchr>
 800343c:	b140      	cbz	r0, 8003450 <_vfiprintf_r+0x170>
 800343e:	2340      	movs	r3, #64	; 0x40
 8003440:	1b40      	subs	r0, r0, r5
 8003442:	fa03 f000 	lsl.w	r0, r3, r0
 8003446:	9b04      	ldr	r3, [sp, #16]
 8003448:	f108 0801 	add.w	r8, r8, #1
 800344c:	4303      	orrs	r3, r0
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	f898 1000 	ldrb.w	r1, [r8]
 8003454:	2206      	movs	r2, #6
 8003456:	482a      	ldr	r0, [pc, #168]	; (8003500 <_vfiprintf_r+0x220>)
 8003458:	f108 0701 	add.w	r7, r8, #1
 800345c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003460:	f000 fc38 	bl	8003cd4 <memchr>
 8003464:	2800      	cmp	r0, #0
 8003466:	d037      	beq.n	80034d8 <_vfiprintf_r+0x1f8>
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <_vfiprintf_r+0x224>)
 800346a:	bb1b      	cbnz	r3, 80034b4 <_vfiprintf_r+0x1d4>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	3307      	adds	r3, #7
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	3308      	adds	r3, #8
 8003476:	9303      	str	r3, [sp, #12]
 8003478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800347a:	444b      	add	r3, r9
 800347c:	9309      	str	r3, [sp, #36]	; 0x24
 800347e:	e750      	b.n	8003322 <_vfiprintf_r+0x42>
 8003480:	fb05 3202 	mla	r2, r5, r2, r3
 8003484:	2001      	movs	r0, #1
 8003486:	4688      	mov	r8, r1
 8003488:	e78a      	b.n	80033a0 <_vfiprintf_r+0xc0>
 800348a:	2300      	movs	r3, #0
 800348c:	250a      	movs	r5, #10
 800348e:	4619      	mov	r1, r3
 8003490:	f108 0801 	add.w	r8, r8, #1
 8003494:	9305      	str	r3, [sp, #20]
 8003496:	4640      	mov	r0, r8
 8003498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800349c:	3a30      	subs	r2, #48	; 0x30
 800349e:	2a09      	cmp	r2, #9
 80034a0:	d903      	bls.n	80034aa <_vfiprintf_r+0x1ca>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0c3      	beq.n	800342e <_vfiprintf_r+0x14e>
 80034a6:	9105      	str	r1, [sp, #20]
 80034a8:	e7c1      	b.n	800342e <_vfiprintf_r+0x14e>
 80034aa:	fb05 2101 	mla	r1, r5, r1, r2
 80034ae:	2301      	movs	r3, #1
 80034b0:	4680      	mov	r8, r0
 80034b2:	e7f0      	b.n	8003496 <_vfiprintf_r+0x1b6>
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4622      	mov	r2, r4
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <_vfiprintf_r+0x228>)
 80034bc:	a904      	add	r1, sp, #16
 80034be:	4630      	mov	r0, r6
 80034c0:	f3af 8000 	nop.w
 80034c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034c8:	4681      	mov	r9, r0
 80034ca:	d1d5      	bne.n	8003478 <_vfiprintf_r+0x198>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	065b      	lsls	r3, r3, #25
 80034d0:	f53f af7e 	bmi.w	80033d0 <_vfiprintf_r+0xf0>
 80034d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034d6:	e77d      	b.n	80033d4 <_vfiprintf_r+0xf4>
 80034d8:	ab03      	add	r3, sp, #12
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4622      	mov	r2, r4
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <_vfiprintf_r+0x228>)
 80034e0:	a904      	add	r1, sp, #16
 80034e2:	4630      	mov	r0, r6
 80034e4:	f000 f888 	bl	80035f8 <_printf_i>
 80034e8:	e7ec      	b.n	80034c4 <_vfiprintf_r+0x1e4>
 80034ea:	bf00      	nop
 80034ec:	08003e78 	.word	0x08003e78
 80034f0:	08003eb8 	.word	0x08003eb8
 80034f4:	08003e98 	.word	0x08003e98
 80034f8:	08003e58 	.word	0x08003e58
 80034fc:	08003ebe 	.word	0x08003ebe
 8003500:	08003ec2 	.word	0x08003ec2
 8003504:	00000000 	.word	0x00000000
 8003508:	080032bb 	.word	0x080032bb

0800350c <_printf_common>:
 800350c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	4691      	mov	r9, r2
 8003512:	461f      	mov	r7, r3
 8003514:	688a      	ldr	r2, [r1, #8]
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	4606      	mov	r6, r0
 800351a:	4293      	cmp	r3, r2
 800351c:	bfb8      	it	lt
 800351e:	4613      	movlt	r3, r2
 8003520:	f8c9 3000 	str.w	r3, [r9]
 8003524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003528:	460c      	mov	r4, r1
 800352a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800352e:	b112      	cbz	r2, 8003536 <_printf_common+0x2a>
 8003530:	3301      	adds	r3, #1
 8003532:	f8c9 3000 	str.w	r3, [r9]
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	0699      	lsls	r1, r3, #26
 800353a:	bf42      	ittt	mi
 800353c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003540:	3302      	addmi	r3, #2
 8003542:	f8c9 3000 	strmi.w	r3, [r9]
 8003546:	6825      	ldr	r5, [r4, #0]
 8003548:	f015 0506 	ands.w	r5, r5, #6
 800354c:	d107      	bne.n	800355e <_printf_common+0x52>
 800354e:	f104 0a19 	add.w	sl, r4, #25
 8003552:	68e3      	ldr	r3, [r4, #12]
 8003554:	f8d9 2000 	ldr.w	r2, [r9]
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	42ab      	cmp	r3, r5
 800355c:	dc29      	bgt.n	80035b2 <_printf_common+0xa6>
 800355e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	3300      	adds	r3, #0
 8003566:	bf18      	it	ne
 8003568:	2301      	movne	r3, #1
 800356a:	0692      	lsls	r2, r2, #26
 800356c:	d42e      	bmi.n	80035cc <_printf_common+0xc0>
 800356e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003572:	4639      	mov	r1, r7
 8003574:	4630      	mov	r0, r6
 8003576:	47c0      	blx	r8
 8003578:	3001      	adds	r0, #1
 800357a:	d021      	beq.n	80035c0 <_printf_common+0xb4>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	68e5      	ldr	r5, [r4, #12]
 8003580:	f003 0306 	and.w	r3, r3, #6
 8003584:	2b04      	cmp	r3, #4
 8003586:	bf18      	it	ne
 8003588:	2500      	movne	r5, #0
 800358a:	f8d9 2000 	ldr.w	r2, [r9]
 800358e:	f04f 0900 	mov.w	r9, #0
 8003592:	bf08      	it	eq
 8003594:	1aad      	subeq	r5, r5, r2
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	6922      	ldr	r2, [r4, #16]
 800359a:	bf08      	it	eq
 800359c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bfc4      	itt	gt
 80035a4:	1a9b      	subgt	r3, r3, r2
 80035a6:	18ed      	addgt	r5, r5, r3
 80035a8:	341a      	adds	r4, #26
 80035aa:	454d      	cmp	r5, r9
 80035ac:	d11a      	bne.n	80035e4 <_printf_common+0xd8>
 80035ae:	2000      	movs	r0, #0
 80035b0:	e008      	b.n	80035c4 <_printf_common+0xb8>
 80035b2:	2301      	movs	r3, #1
 80035b4:	4652      	mov	r2, sl
 80035b6:	4639      	mov	r1, r7
 80035b8:	4630      	mov	r0, r6
 80035ba:	47c0      	blx	r8
 80035bc:	3001      	adds	r0, #1
 80035be:	d103      	bne.n	80035c8 <_printf_common+0xbc>
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c8:	3501      	adds	r5, #1
 80035ca:	e7c2      	b.n	8003552 <_printf_common+0x46>
 80035cc:	2030      	movs	r0, #48	; 0x30
 80035ce:	18e1      	adds	r1, r4, r3
 80035d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035da:	4422      	add	r2, r4
 80035dc:	3302      	adds	r3, #2
 80035de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e2:	e7c4      	b.n	800356e <_printf_common+0x62>
 80035e4:	2301      	movs	r3, #1
 80035e6:	4622      	mov	r2, r4
 80035e8:	4639      	mov	r1, r7
 80035ea:	4630      	mov	r0, r6
 80035ec:	47c0      	blx	r8
 80035ee:	3001      	adds	r0, #1
 80035f0:	d0e6      	beq.n	80035c0 <_printf_common+0xb4>
 80035f2:	f109 0901 	add.w	r9, r9, #1
 80035f6:	e7d8      	b.n	80035aa <_printf_common+0x9e>

080035f8 <_printf_i>:
 80035f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003600:	460c      	mov	r4, r1
 8003602:	7e09      	ldrb	r1, [r1, #24]
 8003604:	b085      	sub	sp, #20
 8003606:	296e      	cmp	r1, #110	; 0x6e
 8003608:	4617      	mov	r7, r2
 800360a:	4606      	mov	r6, r0
 800360c:	4698      	mov	r8, r3
 800360e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003610:	f000 80b3 	beq.w	800377a <_printf_i+0x182>
 8003614:	d822      	bhi.n	800365c <_printf_i+0x64>
 8003616:	2963      	cmp	r1, #99	; 0x63
 8003618:	d036      	beq.n	8003688 <_printf_i+0x90>
 800361a:	d80a      	bhi.n	8003632 <_printf_i+0x3a>
 800361c:	2900      	cmp	r1, #0
 800361e:	f000 80b9 	beq.w	8003794 <_printf_i+0x19c>
 8003622:	2958      	cmp	r1, #88	; 0x58
 8003624:	f000 8083 	beq.w	800372e <_printf_i+0x136>
 8003628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800362c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003630:	e032      	b.n	8003698 <_printf_i+0xa0>
 8003632:	2964      	cmp	r1, #100	; 0x64
 8003634:	d001      	beq.n	800363a <_printf_i+0x42>
 8003636:	2969      	cmp	r1, #105	; 0x69
 8003638:	d1f6      	bne.n	8003628 <_printf_i+0x30>
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	6813      	ldr	r3, [r2, #0]
 800363e:	0605      	lsls	r5, r0, #24
 8003640:	f103 0104 	add.w	r1, r3, #4
 8003644:	d52a      	bpl.n	800369c <_printf_i+0xa4>
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6011      	str	r1, [r2, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	da03      	bge.n	8003656 <_printf_i+0x5e>
 800364e:	222d      	movs	r2, #45	; 0x2d
 8003650:	425b      	negs	r3, r3
 8003652:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003656:	486f      	ldr	r0, [pc, #444]	; (8003814 <_printf_i+0x21c>)
 8003658:	220a      	movs	r2, #10
 800365a:	e039      	b.n	80036d0 <_printf_i+0xd8>
 800365c:	2973      	cmp	r1, #115	; 0x73
 800365e:	f000 809d 	beq.w	800379c <_printf_i+0x1a4>
 8003662:	d808      	bhi.n	8003676 <_printf_i+0x7e>
 8003664:	296f      	cmp	r1, #111	; 0x6f
 8003666:	d020      	beq.n	80036aa <_printf_i+0xb2>
 8003668:	2970      	cmp	r1, #112	; 0x70
 800366a:	d1dd      	bne.n	8003628 <_printf_i+0x30>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	6023      	str	r3, [r4, #0]
 8003674:	e003      	b.n	800367e <_printf_i+0x86>
 8003676:	2975      	cmp	r1, #117	; 0x75
 8003678:	d017      	beq.n	80036aa <_printf_i+0xb2>
 800367a:	2978      	cmp	r1, #120	; 0x78
 800367c:	d1d4      	bne.n	8003628 <_printf_i+0x30>
 800367e:	2378      	movs	r3, #120	; 0x78
 8003680:	4865      	ldr	r0, [pc, #404]	; (8003818 <_printf_i+0x220>)
 8003682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003686:	e055      	b.n	8003734 <_printf_i+0x13c>
 8003688:	6813      	ldr	r3, [r2, #0]
 800368a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800368e:	1d19      	adds	r1, r3, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6011      	str	r1, [r2, #0]
 8003694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003698:	2301      	movs	r3, #1
 800369a:	e08c      	b.n	80037b6 <_printf_i+0x1be>
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036a2:	6011      	str	r1, [r2, #0]
 80036a4:	bf18      	it	ne
 80036a6:	b21b      	sxthne	r3, r3
 80036a8:	e7cf      	b.n	800364a <_printf_i+0x52>
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	6825      	ldr	r5, [r4, #0]
 80036ae:	1d18      	adds	r0, r3, #4
 80036b0:	6010      	str	r0, [r2, #0]
 80036b2:	0628      	lsls	r0, r5, #24
 80036b4:	d501      	bpl.n	80036ba <_printf_i+0xc2>
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	e002      	b.n	80036c0 <_printf_i+0xc8>
 80036ba:	0668      	lsls	r0, r5, #25
 80036bc:	d5fb      	bpl.n	80036b6 <_printf_i+0xbe>
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	296f      	cmp	r1, #111	; 0x6f
 80036c2:	bf14      	ite	ne
 80036c4:	220a      	movne	r2, #10
 80036c6:	2208      	moveq	r2, #8
 80036c8:	4852      	ldr	r0, [pc, #328]	; (8003814 <_printf_i+0x21c>)
 80036ca:	2100      	movs	r1, #0
 80036cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036d0:	6865      	ldr	r5, [r4, #4]
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	60a5      	str	r5, [r4, #8]
 80036d6:	f2c0 8095 	blt.w	8003804 <_printf_i+0x20c>
 80036da:	6821      	ldr	r1, [r4, #0]
 80036dc:	f021 0104 	bic.w	r1, r1, #4
 80036e0:	6021      	str	r1, [r4, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d13d      	bne.n	8003762 <_printf_i+0x16a>
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	f040 808e 	bne.w	8003808 <_printf_i+0x210>
 80036ec:	4665      	mov	r5, ip
 80036ee:	2a08      	cmp	r2, #8
 80036f0:	d10b      	bne.n	800370a <_printf_i+0x112>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	07db      	lsls	r3, r3, #31
 80036f6:	d508      	bpl.n	800370a <_printf_i+0x112>
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	6862      	ldr	r2, [r4, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bfde      	ittt	le
 8003700:	2330      	movle	r3, #48	; 0x30
 8003702:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003706:	f105 35ff 	addle.w	r5, r5, #4294967295
 800370a:	ebac 0305 	sub.w	r3, ip, r5
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	f8cd 8000 	str.w	r8, [sp]
 8003714:	463b      	mov	r3, r7
 8003716:	aa03      	add	r2, sp, #12
 8003718:	4621      	mov	r1, r4
 800371a:	4630      	mov	r0, r6
 800371c:	f7ff fef6 	bl	800350c <_printf_common>
 8003720:	3001      	adds	r0, #1
 8003722:	d14d      	bne.n	80037c0 <_printf_i+0x1c8>
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	b005      	add	sp, #20
 800372a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800372e:	4839      	ldr	r0, [pc, #228]	; (8003814 <_printf_i+0x21c>)
 8003730:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003734:	6813      	ldr	r3, [r2, #0]
 8003736:	6821      	ldr	r1, [r4, #0]
 8003738:	1d1d      	adds	r5, r3, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6015      	str	r5, [r2, #0]
 800373e:	060a      	lsls	r2, r1, #24
 8003740:	d50b      	bpl.n	800375a <_printf_i+0x162>
 8003742:	07ca      	lsls	r2, r1, #31
 8003744:	bf44      	itt	mi
 8003746:	f041 0120 	orrmi.w	r1, r1, #32
 800374a:	6021      	strmi	r1, [r4, #0]
 800374c:	b91b      	cbnz	r3, 8003756 <_printf_i+0x15e>
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	f022 0220 	bic.w	r2, r2, #32
 8003754:	6022      	str	r2, [r4, #0]
 8003756:	2210      	movs	r2, #16
 8003758:	e7b7      	b.n	80036ca <_printf_i+0xd2>
 800375a:	064d      	lsls	r5, r1, #25
 800375c:	bf48      	it	mi
 800375e:	b29b      	uxthmi	r3, r3
 8003760:	e7ef      	b.n	8003742 <_printf_i+0x14a>
 8003762:	4665      	mov	r5, ip
 8003764:	fbb3 f1f2 	udiv	r1, r3, r2
 8003768:	fb02 3311 	mls	r3, r2, r1, r3
 800376c:	5cc3      	ldrb	r3, [r0, r3]
 800376e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003772:	460b      	mov	r3, r1
 8003774:	2900      	cmp	r1, #0
 8003776:	d1f5      	bne.n	8003764 <_printf_i+0x16c>
 8003778:	e7b9      	b.n	80036ee <_printf_i+0xf6>
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	6825      	ldr	r5, [r4, #0]
 800377e:	1d18      	adds	r0, r3, #4
 8003780:	6961      	ldr	r1, [r4, #20]
 8003782:	6010      	str	r0, [r2, #0]
 8003784:	0628      	lsls	r0, r5, #24
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	d501      	bpl.n	800378e <_printf_i+0x196>
 800378a:	6019      	str	r1, [r3, #0]
 800378c:	e002      	b.n	8003794 <_printf_i+0x19c>
 800378e:	066a      	lsls	r2, r5, #25
 8003790:	d5fb      	bpl.n	800378a <_printf_i+0x192>
 8003792:	8019      	strh	r1, [r3, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	4665      	mov	r5, ip
 8003798:	6123      	str	r3, [r4, #16]
 800379a:	e7b9      	b.n	8003710 <_printf_i+0x118>
 800379c:	6813      	ldr	r3, [r2, #0]
 800379e:	1d19      	adds	r1, r3, #4
 80037a0:	6011      	str	r1, [r2, #0]
 80037a2:	681d      	ldr	r5, [r3, #0]
 80037a4:	6862      	ldr	r2, [r4, #4]
 80037a6:	2100      	movs	r1, #0
 80037a8:	4628      	mov	r0, r5
 80037aa:	f000 fa93 	bl	8003cd4 <memchr>
 80037ae:	b108      	cbz	r0, 80037b4 <_printf_i+0x1bc>
 80037b0:	1b40      	subs	r0, r0, r5
 80037b2:	6060      	str	r0, [r4, #4]
 80037b4:	6863      	ldr	r3, [r4, #4]
 80037b6:	6123      	str	r3, [r4, #16]
 80037b8:	2300      	movs	r3, #0
 80037ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037be:	e7a7      	b.n	8003710 <_printf_i+0x118>
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	462a      	mov	r2, r5
 80037c4:	4639      	mov	r1, r7
 80037c6:	4630      	mov	r0, r6
 80037c8:	47c0      	blx	r8
 80037ca:	3001      	adds	r0, #1
 80037cc:	d0aa      	beq.n	8003724 <_printf_i+0x12c>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	079b      	lsls	r3, r3, #30
 80037d2:	d413      	bmi.n	80037fc <_printf_i+0x204>
 80037d4:	68e0      	ldr	r0, [r4, #12]
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	4298      	cmp	r0, r3
 80037da:	bfb8      	it	lt
 80037dc:	4618      	movlt	r0, r3
 80037de:	e7a3      	b.n	8003728 <_printf_i+0x130>
 80037e0:	2301      	movs	r3, #1
 80037e2:	464a      	mov	r2, r9
 80037e4:	4639      	mov	r1, r7
 80037e6:	4630      	mov	r0, r6
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d09a      	beq.n	8003724 <_printf_i+0x12c>
 80037ee:	3501      	adds	r5, #1
 80037f0:	68e3      	ldr	r3, [r4, #12]
 80037f2:	9a03      	ldr	r2, [sp, #12]
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	42ab      	cmp	r3, r5
 80037f8:	dcf2      	bgt.n	80037e0 <_printf_i+0x1e8>
 80037fa:	e7eb      	b.n	80037d4 <_printf_i+0x1dc>
 80037fc:	2500      	movs	r5, #0
 80037fe:	f104 0919 	add.w	r9, r4, #25
 8003802:	e7f5      	b.n	80037f0 <_printf_i+0x1f8>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ac      	bne.n	8003762 <_printf_i+0x16a>
 8003808:	7803      	ldrb	r3, [r0, #0]
 800380a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800380e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003812:	e76c      	b.n	80036ee <_printf_i+0xf6>
 8003814:	08003ec9 	.word	0x08003ec9
 8003818:	08003eda 	.word	0x08003eda

0800381c <_sbrk_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	2300      	movs	r3, #0
 8003820:	4c05      	ldr	r4, [pc, #20]	; (8003838 <_sbrk_r+0x1c>)
 8003822:	4605      	mov	r5, r0
 8003824:	4608      	mov	r0, r1
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	f7fd f822 	bl	8000870 <_sbrk>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d102      	bne.n	8003836 <_sbrk_r+0x1a>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	b103      	cbz	r3, 8003836 <_sbrk_r+0x1a>
 8003834:	602b      	str	r3, [r5, #0]
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	20000130 	.word	0x20000130

0800383c <__sread>:
 800383c:	b510      	push	{r4, lr}
 800383e:	460c      	mov	r4, r1
 8003840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003844:	f000 faa2 	bl	8003d8c <_read_r>
 8003848:	2800      	cmp	r0, #0
 800384a:	bfab      	itete	ge
 800384c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800384e:	89a3      	ldrhlt	r3, [r4, #12]
 8003850:	181b      	addge	r3, r3, r0
 8003852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003856:	bfac      	ite	ge
 8003858:	6563      	strge	r3, [r4, #84]	; 0x54
 800385a:	81a3      	strhlt	r3, [r4, #12]
 800385c:	bd10      	pop	{r4, pc}

0800385e <__swrite>:
 800385e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003862:	461f      	mov	r7, r3
 8003864:	898b      	ldrh	r3, [r1, #12]
 8003866:	4605      	mov	r5, r0
 8003868:	05db      	lsls	r3, r3, #23
 800386a:	460c      	mov	r4, r1
 800386c:	4616      	mov	r6, r2
 800386e:	d505      	bpl.n	800387c <__swrite+0x1e>
 8003870:	2302      	movs	r3, #2
 8003872:	2200      	movs	r2, #0
 8003874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003878:	f000 f9b6 	bl	8003be8 <_lseek_r>
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	4632      	mov	r2, r6
 8003880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388a:	463b      	mov	r3, r7
 800388c:	4628      	mov	r0, r5
 800388e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003892:	f000 b869 	b.w	8003968 <_write_r>

08003896 <__sseek>:
 8003896:	b510      	push	{r4, lr}
 8003898:	460c      	mov	r4, r1
 800389a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800389e:	f000 f9a3 	bl	8003be8 <_lseek_r>
 80038a2:	1c43      	adds	r3, r0, #1
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	bf15      	itete	ne
 80038a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80038aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038b2:	81a3      	strheq	r3, [r4, #12]
 80038b4:	bf18      	it	ne
 80038b6:	81a3      	strhne	r3, [r4, #12]
 80038b8:	bd10      	pop	{r4, pc}

080038ba <__sclose>:
 80038ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038be:	f000 b8d3 	b.w	8003a68 <_close_r>
	...

080038c4 <__swbuf_r>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	460e      	mov	r6, r1
 80038c8:	4614      	mov	r4, r2
 80038ca:	4605      	mov	r5, r0
 80038cc:	b118      	cbz	r0, 80038d6 <__swbuf_r+0x12>
 80038ce:	6983      	ldr	r3, [r0, #24]
 80038d0:	b90b      	cbnz	r3, 80038d6 <__swbuf_r+0x12>
 80038d2:	f7ff fbf9 	bl	80030c8 <__sinit>
 80038d6:	4b21      	ldr	r3, [pc, #132]	; (800395c <__swbuf_r+0x98>)
 80038d8:	429c      	cmp	r4, r3
 80038da:	d12a      	bne.n	8003932 <__swbuf_r+0x6e>
 80038dc:	686c      	ldr	r4, [r5, #4]
 80038de:	69a3      	ldr	r3, [r4, #24]
 80038e0:	60a3      	str	r3, [r4, #8]
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	071a      	lsls	r2, r3, #28
 80038e6:	d52e      	bpl.n	8003946 <__swbuf_r+0x82>
 80038e8:	6923      	ldr	r3, [r4, #16]
 80038ea:	b363      	cbz	r3, 8003946 <__swbuf_r+0x82>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	b2f6      	uxtb	r6, r6
 80038f2:	1ac0      	subs	r0, r0, r3
 80038f4:	6963      	ldr	r3, [r4, #20]
 80038f6:	4637      	mov	r7, r6
 80038f8:	4283      	cmp	r3, r0
 80038fa:	dc04      	bgt.n	8003906 <__swbuf_r+0x42>
 80038fc:	4621      	mov	r1, r4
 80038fe:	4628      	mov	r0, r5
 8003900:	f000 f948 	bl	8003b94 <_fflush_r>
 8003904:	bb28      	cbnz	r0, 8003952 <__swbuf_r+0x8e>
 8003906:	68a3      	ldr	r3, [r4, #8]
 8003908:	3001      	adds	r0, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	60a3      	str	r3, [r4, #8]
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	6022      	str	r2, [r4, #0]
 8003914:	701e      	strb	r6, [r3, #0]
 8003916:	6963      	ldr	r3, [r4, #20]
 8003918:	4283      	cmp	r3, r0
 800391a:	d004      	beq.n	8003926 <__swbuf_r+0x62>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	07db      	lsls	r3, r3, #31
 8003920:	d519      	bpl.n	8003956 <__swbuf_r+0x92>
 8003922:	2e0a      	cmp	r6, #10
 8003924:	d117      	bne.n	8003956 <__swbuf_r+0x92>
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 f933 	bl	8003b94 <_fflush_r>
 800392e:	b190      	cbz	r0, 8003956 <__swbuf_r+0x92>
 8003930:	e00f      	b.n	8003952 <__swbuf_r+0x8e>
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <__swbuf_r+0x9c>)
 8003934:	429c      	cmp	r4, r3
 8003936:	d101      	bne.n	800393c <__swbuf_r+0x78>
 8003938:	68ac      	ldr	r4, [r5, #8]
 800393a:	e7d0      	b.n	80038de <__swbuf_r+0x1a>
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <__swbuf_r+0xa0>)
 800393e:	429c      	cmp	r4, r3
 8003940:	bf08      	it	eq
 8003942:	68ec      	ldreq	r4, [r5, #12]
 8003944:	e7cb      	b.n	80038de <__swbuf_r+0x1a>
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f81f 	bl	800398c <__swsetup_r>
 800394e:	2800      	cmp	r0, #0
 8003950:	d0cc      	beq.n	80038ec <__swbuf_r+0x28>
 8003952:	f04f 37ff 	mov.w	r7, #4294967295
 8003956:	4638      	mov	r0, r7
 8003958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800395a:	bf00      	nop
 800395c:	08003e78 	.word	0x08003e78
 8003960:	08003e98 	.word	0x08003e98
 8003964:	08003e58 	.word	0x08003e58

08003968 <_write_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4605      	mov	r5, r0
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	2200      	movs	r2, #0
 8003972:	4c05      	ldr	r4, [pc, #20]	; (8003988 <_write_r+0x20>)
 8003974:	6022      	str	r2, [r4, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f7fc ff2d 	bl	80007d6 <_write>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_write_r+0x1e>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	b103      	cbz	r3, 8003986 <_write_r+0x1e>
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	20000130 	.word	0x20000130

0800398c <__swsetup_r>:
 800398c:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <__swsetup_r+0xcc>)
 800398e:	b570      	push	{r4, r5, r6, lr}
 8003990:	681d      	ldr	r5, [r3, #0]
 8003992:	4606      	mov	r6, r0
 8003994:	460c      	mov	r4, r1
 8003996:	b125      	cbz	r5, 80039a2 <__swsetup_r+0x16>
 8003998:	69ab      	ldr	r3, [r5, #24]
 800399a:	b913      	cbnz	r3, 80039a2 <__swsetup_r+0x16>
 800399c:	4628      	mov	r0, r5
 800399e:	f7ff fb93 	bl	80030c8 <__sinit>
 80039a2:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <__swsetup_r+0xd0>)
 80039a4:	429c      	cmp	r4, r3
 80039a6:	d10f      	bne.n	80039c8 <__swsetup_r+0x3c>
 80039a8:	686c      	ldr	r4, [r5, #4]
 80039aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	0715      	lsls	r5, r2, #28
 80039b2:	d42c      	bmi.n	8003a0e <__swsetup_r+0x82>
 80039b4:	06d0      	lsls	r0, r2, #27
 80039b6:	d411      	bmi.n	80039dc <__swsetup_r+0x50>
 80039b8:	2209      	movs	r2, #9
 80039ba:	6032      	str	r2, [r6, #0]
 80039bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c0:	81a3      	strh	r3, [r4, #12]
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295
 80039c6:	e03e      	b.n	8003a46 <__swsetup_r+0xba>
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <__swsetup_r+0xd4>)
 80039ca:	429c      	cmp	r4, r3
 80039cc:	d101      	bne.n	80039d2 <__swsetup_r+0x46>
 80039ce:	68ac      	ldr	r4, [r5, #8]
 80039d0:	e7eb      	b.n	80039aa <__swsetup_r+0x1e>
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <__swsetup_r+0xd8>)
 80039d4:	429c      	cmp	r4, r3
 80039d6:	bf08      	it	eq
 80039d8:	68ec      	ldreq	r4, [r5, #12]
 80039da:	e7e6      	b.n	80039aa <__swsetup_r+0x1e>
 80039dc:	0751      	lsls	r1, r2, #29
 80039de:	d512      	bpl.n	8003a06 <__swsetup_r+0x7a>
 80039e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039e2:	b141      	cbz	r1, 80039f6 <__swsetup_r+0x6a>
 80039e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039e8:	4299      	cmp	r1, r3
 80039ea:	d002      	beq.n	80039f2 <__swsetup_r+0x66>
 80039ec:	4630      	mov	r0, r6
 80039ee:	f000 f981 	bl	8003cf4 <_free_r>
 80039f2:	2300      	movs	r3, #0
 80039f4:	6363      	str	r3, [r4, #52]	; 0x34
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	2300      	movs	r3, #0
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	6923      	ldr	r3, [r4, #16]
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	f043 0308 	orr.w	r3, r3, #8
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	b94b      	cbnz	r3, 8003a26 <__swsetup_r+0x9a>
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1c:	d003      	beq.n	8003a26 <__swsetup_r+0x9a>
 8003a1e:	4621      	mov	r1, r4
 8003a20:	4630      	mov	r0, r6
 8003a22:	f000 f917 	bl	8003c54 <__smakebuf_r>
 8003a26:	89a2      	ldrh	r2, [r4, #12]
 8003a28:	f012 0301 	ands.w	r3, r2, #1
 8003a2c:	d00c      	beq.n	8003a48 <__swsetup_r+0xbc>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60a3      	str	r3, [r4, #8]
 8003a32:	6963      	ldr	r3, [r4, #20]
 8003a34:	425b      	negs	r3, r3
 8003a36:	61a3      	str	r3, [r4, #24]
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	b953      	cbnz	r3, 8003a52 <__swsetup_r+0xc6>
 8003a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a44:	d1ba      	bne.n	80039bc <__swsetup_r+0x30>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	0792      	lsls	r2, r2, #30
 8003a4a:	bf58      	it	pl
 8003a4c:	6963      	ldrpl	r3, [r4, #20]
 8003a4e:	60a3      	str	r3, [r4, #8]
 8003a50:	e7f2      	b.n	8003a38 <__swsetup_r+0xac>
 8003a52:	2000      	movs	r0, #0
 8003a54:	e7f7      	b.n	8003a46 <__swsetup_r+0xba>
 8003a56:	bf00      	nop
 8003a58:	2000000c 	.word	0x2000000c
 8003a5c:	08003e78 	.word	0x08003e78
 8003a60:	08003e98 	.word	0x08003e98
 8003a64:	08003e58 	.word	0x08003e58

08003a68 <_close_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4c05      	ldr	r4, [pc, #20]	; (8003a84 <_close_r+0x1c>)
 8003a6e:	4605      	mov	r5, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	f7fc fecb 	bl	800080e <_close>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_close_r+0x1a>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_close_r+0x1a>
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	20000130 	.word	0x20000130

08003a88 <__sflush_r>:
 8003a88:	898a      	ldrh	r2, [r1, #12]
 8003a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8e:	4605      	mov	r5, r0
 8003a90:	0710      	lsls	r0, r2, #28
 8003a92:	460c      	mov	r4, r1
 8003a94:	d458      	bmi.n	8003b48 <__sflush_r+0xc0>
 8003a96:	684b      	ldr	r3, [r1, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	dc05      	bgt.n	8003aa8 <__sflush_r+0x20>
 8003a9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	dc02      	bgt.n	8003aa8 <__sflush_r+0x20>
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aaa:	2e00      	cmp	r6, #0
 8003aac:	d0f9      	beq.n	8003aa2 <__sflush_r+0x1a>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ab4:	682f      	ldr	r7, [r5, #0]
 8003ab6:	6a21      	ldr	r1, [r4, #32]
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	d032      	beq.n	8003b22 <__sflush_r+0x9a>
 8003abc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	075a      	lsls	r2, r3, #29
 8003ac2:	d505      	bpl.n	8003ad0 <__sflush_r+0x48>
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	1ac0      	subs	r0, r0, r3
 8003ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aca:	b10b      	cbz	r3, 8003ad0 <__sflush_r+0x48>
 8003acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ace:	1ac0      	subs	r0, r0, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	4628      	mov	r0, r5
 8003ada:	47b0      	blx	r6
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	d106      	bne.n	8003af0 <__sflush_r+0x68>
 8003ae2:	6829      	ldr	r1, [r5, #0]
 8003ae4:	291d      	cmp	r1, #29
 8003ae6:	d848      	bhi.n	8003b7a <__sflush_r+0xf2>
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <__sflush_r+0x108>)
 8003aea:	40ca      	lsrs	r2, r1
 8003aec:	07d6      	lsls	r6, r2, #31
 8003aee:	d544      	bpl.n	8003b7a <__sflush_r+0xf2>
 8003af0:	2200      	movs	r2, #0
 8003af2:	6062      	str	r2, [r4, #4]
 8003af4:	6922      	ldr	r2, [r4, #16]
 8003af6:	04d9      	lsls	r1, r3, #19
 8003af8:	6022      	str	r2, [r4, #0]
 8003afa:	d504      	bpl.n	8003b06 <__sflush_r+0x7e>
 8003afc:	1c42      	adds	r2, r0, #1
 8003afe:	d101      	bne.n	8003b04 <__sflush_r+0x7c>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b903      	cbnz	r3, 8003b06 <__sflush_r+0x7e>
 8003b04:	6560      	str	r0, [r4, #84]	; 0x54
 8003b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b08:	602f      	str	r7, [r5, #0]
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d0c9      	beq.n	8003aa2 <__sflush_r+0x1a>
 8003b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b12:	4299      	cmp	r1, r3
 8003b14:	d002      	beq.n	8003b1c <__sflush_r+0x94>
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 f8ec 	bl	8003cf4 <_free_r>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b20:	e7c0      	b.n	8003aa4 <__sflush_r+0x1c>
 8003b22:	2301      	movs	r3, #1
 8003b24:	4628      	mov	r0, r5
 8003b26:	47b0      	blx	r6
 8003b28:	1c41      	adds	r1, r0, #1
 8003b2a:	d1c8      	bne.n	8003abe <__sflush_r+0x36>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0c5      	beq.n	8003abe <__sflush_r+0x36>
 8003b32:	2b1d      	cmp	r3, #29
 8003b34:	d001      	beq.n	8003b3a <__sflush_r+0xb2>
 8003b36:	2b16      	cmp	r3, #22
 8003b38:	d101      	bne.n	8003b3e <__sflush_r+0xb6>
 8003b3a:	602f      	str	r7, [r5, #0]
 8003b3c:	e7b1      	b.n	8003aa2 <__sflush_r+0x1a>
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	e7ad      	b.n	8003aa4 <__sflush_r+0x1c>
 8003b48:	690f      	ldr	r7, [r1, #16]
 8003b4a:	2f00      	cmp	r7, #0
 8003b4c:	d0a9      	beq.n	8003aa2 <__sflush_r+0x1a>
 8003b4e:	0793      	lsls	r3, r2, #30
 8003b50:	bf18      	it	ne
 8003b52:	2300      	movne	r3, #0
 8003b54:	680e      	ldr	r6, [r1, #0]
 8003b56:	bf08      	it	eq
 8003b58:	694b      	ldreq	r3, [r1, #20]
 8003b5a:	eba6 0807 	sub.w	r8, r6, r7
 8003b5e:	600f      	str	r7, [r1, #0]
 8003b60:	608b      	str	r3, [r1, #8]
 8003b62:	f1b8 0f00 	cmp.w	r8, #0
 8003b66:	dd9c      	ble.n	8003aa2 <__sflush_r+0x1a>
 8003b68:	4643      	mov	r3, r8
 8003b6a:	463a      	mov	r2, r7
 8003b6c:	6a21      	ldr	r1, [r4, #32]
 8003b6e:	4628      	mov	r0, r5
 8003b70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b72:	47b0      	blx	r6
 8003b74:	2800      	cmp	r0, #0
 8003b76:	dc06      	bgt.n	8003b86 <__sflush_r+0xfe>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7e:	81a3      	strh	r3, [r4, #12]
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	e78e      	b.n	8003aa4 <__sflush_r+0x1c>
 8003b86:	4407      	add	r7, r0
 8003b88:	eba8 0800 	sub.w	r8, r8, r0
 8003b8c:	e7e9      	b.n	8003b62 <__sflush_r+0xda>
 8003b8e:	bf00      	nop
 8003b90:	20400001 	.word	0x20400001

08003b94 <_fflush_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	690b      	ldr	r3, [r1, #16]
 8003b98:	4605      	mov	r5, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	b1db      	cbz	r3, 8003bd6 <_fflush_r+0x42>
 8003b9e:	b118      	cbz	r0, 8003ba8 <_fflush_r+0x14>
 8003ba0:	6983      	ldr	r3, [r0, #24]
 8003ba2:	b90b      	cbnz	r3, 8003ba8 <_fflush_r+0x14>
 8003ba4:	f7ff fa90 	bl	80030c8 <__sinit>
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <_fflush_r+0x48>)
 8003baa:	429c      	cmp	r4, r3
 8003bac:	d109      	bne.n	8003bc2 <_fflush_r+0x2e>
 8003bae:	686c      	ldr	r4, [r5, #4]
 8003bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb4:	b17b      	cbz	r3, 8003bd6 <_fflush_r+0x42>
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	4628      	mov	r0, r5
 8003bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bbe:	f7ff bf63 	b.w	8003a88 <__sflush_r>
 8003bc2:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <_fflush_r+0x4c>)
 8003bc4:	429c      	cmp	r4, r3
 8003bc6:	d101      	bne.n	8003bcc <_fflush_r+0x38>
 8003bc8:	68ac      	ldr	r4, [r5, #8]
 8003bca:	e7f1      	b.n	8003bb0 <_fflush_r+0x1c>
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <_fflush_r+0x50>)
 8003bce:	429c      	cmp	r4, r3
 8003bd0:	bf08      	it	eq
 8003bd2:	68ec      	ldreq	r4, [r5, #12]
 8003bd4:	e7ec      	b.n	8003bb0 <_fflush_r+0x1c>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
 8003bda:	bf00      	nop
 8003bdc:	08003e78 	.word	0x08003e78
 8003be0:	08003e98 	.word	0x08003e98
 8003be4:	08003e58 	.word	0x08003e58

08003be8 <_lseek_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4605      	mov	r5, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4c05      	ldr	r4, [pc, #20]	; (8003c08 <_lseek_r+0x20>)
 8003bf4:	6022      	str	r2, [r4, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f7fc fe2d 	bl	8000856 <_lseek>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_lseek_r+0x1e>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_lseek_r+0x1e>
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20000130 	.word	0x20000130

08003c0c <__swhatbuf_r>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	460e      	mov	r6, r1
 8003c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c14:	b096      	sub	sp, #88	; 0x58
 8003c16:	2900      	cmp	r1, #0
 8003c18:	4614      	mov	r4, r2
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	da07      	bge.n	8003c2e <__swhatbuf_r+0x22>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	89b3      	ldrh	r3, [r6, #12]
 8003c24:	061a      	lsls	r2, r3, #24
 8003c26:	d410      	bmi.n	8003c4a <__swhatbuf_r+0x3e>
 8003c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2c:	e00e      	b.n	8003c4c <__swhatbuf_r+0x40>
 8003c2e:	466a      	mov	r2, sp
 8003c30:	f000 f8be 	bl	8003db0 <_fstat_r>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	dbf2      	blt.n	8003c1e <__swhatbuf_r+0x12>
 8003c38:	9a01      	ldr	r2, [sp, #4]
 8003c3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c42:	425a      	negs	r2, r3
 8003c44:	415a      	adcs	r2, r3
 8003c46:	602a      	str	r2, [r5, #0]
 8003c48:	e7ee      	b.n	8003c28 <__swhatbuf_r+0x1c>
 8003c4a:	2340      	movs	r3, #64	; 0x40
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	b016      	add	sp, #88	; 0x58
 8003c52:	bd70      	pop	{r4, r5, r6, pc}

08003c54 <__smakebuf_r>:
 8003c54:	898b      	ldrh	r3, [r1, #12]
 8003c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c58:	079d      	lsls	r5, r3, #30
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	d507      	bpl.n	8003c70 <__smakebuf_r+0x1c>
 8003c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	6123      	str	r3, [r4, #16]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	6163      	str	r3, [r4, #20]
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	ab01      	add	r3, sp, #4
 8003c72:	466a      	mov	r2, sp
 8003c74:	f7ff ffca 	bl	8003c0c <__swhatbuf_r>
 8003c78:	9900      	ldr	r1, [sp, #0]
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	f7ff faad 	bl	80031dc <_malloc_r>
 8003c82:	b948      	cbnz	r0, 8003c98 <__smakebuf_r+0x44>
 8003c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c88:	059a      	lsls	r2, r3, #22
 8003c8a:	d4ef      	bmi.n	8003c6c <__smakebuf_r+0x18>
 8003c8c:	f023 0303 	bic.w	r3, r3, #3
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	81a3      	strh	r3, [r4, #12]
 8003c96:	e7e3      	b.n	8003c60 <__smakebuf_r+0xc>
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <__smakebuf_r+0x7c>)
 8003c9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	6020      	str	r0, [r4, #0]
 8003ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	9b00      	ldr	r3, [sp, #0]
 8003ca8:	6120      	str	r0, [r4, #16]
 8003caa:	6163      	str	r3, [r4, #20]
 8003cac:	9b01      	ldr	r3, [sp, #4]
 8003cae:	b15b      	cbz	r3, 8003cc8 <__smakebuf_r+0x74>
 8003cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f000 f88d 	bl	8003dd4 <_isatty_r>
 8003cba:	b128      	cbz	r0, 8003cc8 <__smakebuf_r+0x74>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	431d      	orrs	r5, r3
 8003ccc:	81a5      	strh	r5, [r4, #12]
 8003cce:	e7cd      	b.n	8003c6c <__smakebuf_r+0x18>
 8003cd0:	08003091 	.word	0x08003091

08003cd4 <memchr>:
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	b2c9      	uxtb	r1, r1
 8003cd8:	4402      	add	r2, r0
 8003cda:	4290      	cmp	r0, r2
 8003cdc:	4603      	mov	r3, r0
 8003cde:	d101      	bne.n	8003ce4 <memchr+0x10>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e003      	b.n	8003cec <memchr+0x18>
 8003ce4:	781c      	ldrb	r4, [r3, #0]
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	428c      	cmp	r4, r1
 8003cea:	d1f6      	bne.n	8003cda <memchr+0x6>
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd10      	pop	{r4, pc}

08003cf0 <__malloc_lock>:
 8003cf0:	4770      	bx	lr

08003cf2 <__malloc_unlock>:
 8003cf2:	4770      	bx	lr

08003cf4 <_free_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	d043      	beq.n	8003d84 <_free_r+0x90>
 8003cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d00:	1f0c      	subs	r4, r1, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfb8      	it	lt
 8003d06:	18e4      	addlt	r4, r4, r3
 8003d08:	f7ff fff2 	bl	8003cf0 <__malloc_lock>
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <_free_r+0x94>)
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	4610      	mov	r0, r2
 8003d12:	b933      	cbnz	r3, 8003d22 <_free_r+0x2e>
 8003d14:	6063      	str	r3, [r4, #4]
 8003d16:	6014      	str	r4, [r2, #0]
 8003d18:	4628      	mov	r0, r5
 8003d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d1e:	f7ff bfe8 	b.w	8003cf2 <__malloc_unlock>
 8003d22:	42a3      	cmp	r3, r4
 8003d24:	d90b      	bls.n	8003d3e <_free_r+0x4a>
 8003d26:	6821      	ldr	r1, [r4, #0]
 8003d28:	1862      	adds	r2, r4, r1
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	bf01      	itttt	eq
 8003d2e:	681a      	ldreq	r2, [r3, #0]
 8003d30:	685b      	ldreq	r3, [r3, #4]
 8003d32:	1852      	addeq	r2, r2, r1
 8003d34:	6022      	streq	r2, [r4, #0]
 8003d36:	6063      	str	r3, [r4, #4]
 8003d38:	6004      	str	r4, [r0, #0]
 8003d3a:	e7ed      	b.n	8003d18 <_free_r+0x24>
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	b10a      	cbz	r2, 8003d46 <_free_r+0x52>
 8003d42:	42a2      	cmp	r2, r4
 8003d44:	d9fa      	bls.n	8003d3c <_free_r+0x48>
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	1858      	adds	r0, r3, r1
 8003d4a:	42a0      	cmp	r0, r4
 8003d4c:	d10b      	bne.n	8003d66 <_free_r+0x72>
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	4401      	add	r1, r0
 8003d52:	1858      	adds	r0, r3, r1
 8003d54:	4282      	cmp	r2, r0
 8003d56:	6019      	str	r1, [r3, #0]
 8003d58:	d1de      	bne.n	8003d18 <_free_r+0x24>
 8003d5a:	6810      	ldr	r0, [r2, #0]
 8003d5c:	6852      	ldr	r2, [r2, #4]
 8003d5e:	4401      	add	r1, r0
 8003d60:	6019      	str	r1, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	e7d8      	b.n	8003d18 <_free_r+0x24>
 8003d66:	d902      	bls.n	8003d6e <_free_r+0x7a>
 8003d68:	230c      	movs	r3, #12
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	e7d4      	b.n	8003d18 <_free_r+0x24>
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	1821      	adds	r1, r4, r0
 8003d72:	428a      	cmp	r2, r1
 8003d74:	bf01      	itttt	eq
 8003d76:	6811      	ldreq	r1, [r2, #0]
 8003d78:	6852      	ldreq	r2, [r2, #4]
 8003d7a:	1809      	addeq	r1, r1, r0
 8003d7c:	6021      	streq	r1, [r4, #0]
 8003d7e:	6062      	str	r2, [r4, #4]
 8003d80:	605c      	str	r4, [r3, #4]
 8003d82:	e7c9      	b.n	8003d18 <_free_r+0x24>
 8003d84:	bd38      	pop	{r3, r4, r5, pc}
 8003d86:	bf00      	nop
 8003d88:	20000090 	.word	0x20000090

08003d8c <_read_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4605      	mov	r5, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	2200      	movs	r2, #0
 8003d96:	4c05      	ldr	r4, [pc, #20]	; (8003dac <_read_r+0x20>)
 8003d98:	6022      	str	r2, [r4, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f7fc fcfe 	bl	800079c <_read>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_read_r+0x1e>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_read_r+0x1e>
 8003da8:	602b      	str	r3, [r5, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	20000130 	.word	0x20000130

08003db0 <_fstat_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	2300      	movs	r3, #0
 8003db4:	4c06      	ldr	r4, [pc, #24]	; (8003dd0 <_fstat_r+0x20>)
 8003db6:	4605      	mov	r5, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	f7fc fd31 	bl	8000824 <_fstat>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d102      	bne.n	8003dcc <_fstat_r+0x1c>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	b103      	cbz	r3, 8003dcc <_fstat_r+0x1c>
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000130 	.word	0x20000130

08003dd4 <_isatty_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4c05      	ldr	r4, [pc, #20]	; (8003df0 <_isatty_r+0x1c>)
 8003dda:	4605      	mov	r5, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	f7fc fd2f 	bl	8000842 <_isatty>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	d102      	bne.n	8003dee <_isatty_r+0x1a>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	b103      	cbz	r3, 8003dee <_isatty_r+0x1a>
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
 8003df0:	20000130 	.word	0x20000130

08003df4 <_init>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	bf00      	nop
 8003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	469e      	mov	lr, r3
 8003dfe:	4770      	bx	lr

08003e00 <_fini>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	bf00      	nop
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr
