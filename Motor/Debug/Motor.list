
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e5c  08003e5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e5c  08003e5c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e5c  08003e5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003ed4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003ed4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9a7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020a3  00000000  00000000  0002ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  0002eae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  0002f898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003758  00000000  00000000  00030530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a086  00000000  00000000  00033c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074e97  00000000  00000000  0003dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f18  00000000  00000000  000b2c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d60 	.word	0x08003d60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003d60 	.word	0x08003d60

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbca 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f816 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f95a 	bl	8000410 <MX_GPIO_Init>
  MX_RTC_Init();
 800015c:	f000 f866 	bl	800022c <MX_RTC_Init>
  MX_TIM2_Init();
 8000160:	f000 f8ae 	bl	80002c0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f92a 	bl	80003bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000168:	2100      	movs	r1, #0
 800016a:	4804      	ldr	r0, [pc, #16]	; (800017c <main+0x30>)
 800016c:	f002 f836 	bl	80021dc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_blink();
 8000170:	f000 f9a6 	bl	80004c0 <test_blink>
	  printf("hello world");
 8000174:	4802      	ldr	r0, [pc, #8]	; (8000180 <main+0x34>)
 8000176:	f002 ff05 	bl	8002f84 <iprintf>
	  test_blink();
 800017a:	e7f9      	b.n	8000170 <main+0x24>
 800017c:	200000ac 	.word	0x200000ac
 8000180:	08003d78 	.word	0x08003d78

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b094      	sub	sp, #80	; 0x50
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f002 feee 	bl	8002f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	f107 0314 	add.w	r3, r7, #20
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]
 80001a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80001b4:	230a      	movs	r3, #10
 80001b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001bc:	2310      	movs	r3, #16
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c4:	2300      	movs	r3, #0
 80001c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 fe89 	bl	8000ee4 <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d8:	f000 f96c 	bl	80004b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 f8f4 	bl	80013e4 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000202:	f000 f957 	bl	80004b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000206:	2301      	movs	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800020a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800020e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fa82 	bl	800171c <HAL_RCCEx_PeriphCLKConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800021e:	f000 f949 	bl	80004b4 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3750      	adds	r7, #80	; 0x50
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2100      	movs	r1, #0
 8000236:	460a      	mov	r2, r1
 8000238:	801a      	strh	r2, [r3, #0]
 800023a:	460a      	mov	r2, r1
 800023c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <MX_RTC_Init+0x8c>)
 8000244:	4a1d      	ldr	r2, [pc, #116]	; (80002bc <MX_RTC_Init+0x90>)
 8000246:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <MX_RTC_Init+0x8c>)
 800024a:	f04f 32ff 	mov.w	r2, #4294967295
 800024e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <MX_RTC_Init+0x8c>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000256:	4818      	ldr	r0, [pc, #96]	; (80002b8 <MX_RTC_Init+0x8c>)
 8000258:	f001 fbd2 	bl	8001a00 <HAL_RTC_Init>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000262:	f000 f927 	bl	80004b4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000266:	2300      	movs	r3, #0
 8000268:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800026a:	2300      	movs	r3, #0
 800026c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800026e:	2300      	movs	r3, #0
 8000270:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2201      	movs	r2, #1
 8000276:	4619      	mov	r1, r3
 8000278:	480f      	ldr	r0, [pc, #60]	; (80002b8 <MX_RTC_Init+0x8c>)
 800027a:	f001 fc57 	bl	8001b2c <HAL_RTC_SetTime>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000284:	f000 f916 	bl	80004b4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000288:	2301      	movs	r3, #1
 800028a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800028c:	2301      	movs	r3, #1
 800028e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000290:	2301      	movs	r3, #1
 8000292:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000294:	2300      	movs	r3, #0
 8000296:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	2201      	movs	r2, #1
 800029c:	4619      	mov	r1, r3
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <MX_RTC_Init+0x8c>)
 80002a0:	f001 fcdc 	bl	8001c5c <HAL_RTC_SetDate>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80002aa:	f000 f903 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000098 	.word	0x20000098
 80002bc:	40002800 	.word	0x40002800

080002c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08e      	sub	sp, #56	; 0x38
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	f107 0320 	add.w	r3, r7, #32
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]
 80002ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f0:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <MX_TIM2_Init+0xf8>)
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80002f8:	4b2f      	ldr	r3, [pc, #188]	; (80003b8 <MX_TIM2_Init+0xf8>)
 80002fa:	224f      	movs	r2, #79	; 0x4f
 80002fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fe:	4b2e      	ldr	r3, [pc, #184]	; (80003b8 <MX_TIM2_Init+0xf8>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2019;
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <MX_TIM2_Init+0xf8>)
 8000306:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800030a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030c:	4b2a      	ldr	r3, [pc, #168]	; (80003b8 <MX_TIM2_Init+0xf8>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <MX_TIM2_Init+0xf8>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000318:	4827      	ldr	r0, [pc, #156]	; (80003b8 <MX_TIM2_Init+0xf8>)
 800031a:	f001 feff 	bl	800211c <HAL_TIM_Base_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000324:	f000 f8c6 	bl	80004b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800032e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000332:	4619      	mov	r1, r3
 8000334:	4820      	ldr	r0, [pc, #128]	; (80003b8 <MX_TIM2_Init+0xf8>)
 8000336:	f002 f849 	bl	80023cc <HAL_TIM_ConfigClockSource>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000340:	f000 f8b8 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000344:	481c      	ldr	r0, [pc, #112]	; (80003b8 <MX_TIM2_Init+0xf8>)
 8000346:	f001 ff14 	bl	8002172 <HAL_TIM_PWM_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000350:	f000 f8b0 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035c:	f107 0320 	add.w	r3, r7, #32
 8000360:	4619      	mov	r1, r3
 8000362:	4815      	ldr	r0, [pc, #84]	; (80003b8 <MX_TIM2_Init+0xf8>)
 8000364:	f002 fb8e 	bl	8002a84 <HAL_TIMEx_MasterConfigSynchronization>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 f8a1 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000372:	2360      	movs	r3, #96	; 0x60
 8000374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <MX_TIM2_Init+0xf8>)
 800038a:	f001 ff59 	bl	8002240 <HAL_TIM_PWM_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000394:	f000 f88e 	bl	80004b4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <MX_TIM2_Init+0xf8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	699a      	ldr	r2, [r3, #24]
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_TIM2_Init+0xf8>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f022 0208 	bic.w	r2, r2, #8
 80003a6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <MX_TIM2_Init+0xf8>)
 80003aa:	f000 f909 	bl	80005c0 <HAL_TIM_MspPostInit>

}
 80003ae:	bf00      	nop
 80003b0:	3738      	adds	r7, #56	; 0x38
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000ac 	.word	0x200000ac

080003bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <MX_USART2_UART_Init+0x50>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_USART2_UART_Init+0x4c>)
 80003f4:	f002 fb8a 	bl	8002b0c <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 f859 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000ec 	.word	0x200000ec
 800040c:	40004400 	.word	0x40004400

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_GPIO_Init+0x78>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <MX_GPIO_Init+0x78>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_GPIO_Init+0x78>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_GPIO_Init+0x78>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a11      	ldr	r2, [pc, #68]	; (8000488 <MX_GPIO_Init+0x78>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_GPIO_Init+0x78>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045a:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_GPIO_Init+0x7c>)
 800045c:	f000 fd06 	bl	8000e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	4619      	mov	r1, r3
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_GPIO_Init+0x7c>)
 800047a:	f000 fb9d 	bl	8000bb8 <HAL_GPIO_Init>

}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000

08000490 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000498:	1d39      	adds	r1, r7, #4
 800049a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800049e:	2201      	movs	r2, #1
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <__io_putchar+0x20>)
 80004a2:	f002 fb80 	bl	8002ba6 <HAL_UART_Transmit>

  return ch;
 80004a6:	687b      	ldr	r3, [r7, #4]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000ec 	.word	0x200000ec

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <test_blink>:


#define A 	1
#define B  	0

void test_blink(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <test_blink+0x18>)
 80004ca:	f000 fce7 	bl	8000e9c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80004ce:	2064      	movs	r0, #100	; 0x64
 80004d0:	f000 fa6c 	bl	80009ac <HAL_Delay>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40011000 	.word	0x40011000

080004dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_MspInit+0x5c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_MspInit+0x5c>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_MspInit+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <HAL_MspInit+0x60>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <HAL_RTC_MspInit+0x3c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d110      	bne.n	8000574 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000552:	f000 fcbb 	bl	8000ecc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_RTC_MspInit+0x40>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <HAL_RTC_MspInit+0x40>)
 800055c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <HAL_RTC_MspInit+0x40>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_RTC_MspInit+0x44>)
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40002800 	.word	0x40002800
 8000580:	40021000 	.word	0x40021000
 8000584:	4242043c 	.word	0x4242043c

08000588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000598:	d10b      	bne.n	80005b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_TIM_Base_MspInit+0x34>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_TIM_Base_MspInit+0x34>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_TIM_Base_MspInit+0x34>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005de:	d117      	bne.n	8000610 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <HAL_TIM_MspPostInit+0x58>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <HAL_TIM_MspPostInit+0x58>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_TIM_MspPostInit+0x58>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <HAL_TIM_MspPostInit+0x5c>)
 800060c:	f000 fad4 	bl	8000bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800

08000620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <HAL_UART_MspInit+0x88>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d12f      	bne.n	80006a0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <HAL_UART_MspInit+0x8c>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <HAL_UART_MspInit+0x8c>)
 8000646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064a:	61d3      	str	r3, [r2, #28]
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_UART_MspInit+0x8c>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_UART_MspInit+0x8c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <HAL_UART_MspInit+0x8c>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_UART_MspInit+0x8c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000670:	2304      	movs	r3, #4
 8000672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	4619      	mov	r1, r3
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000684:	f000 fa98 	bl	8000bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000688:	2308      	movs	r3, #8
 800068a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800069c:	f000 fa8c 	bl	8000bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40004400 	.word	0x40004400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010800 	.word	0x40010800

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <HardFault_Handler+0x4>

080006c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <MemManage_Handler+0x4>

080006cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <BusFault_Handler+0x4>

080006d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <UsageFault_Handler+0x4>

080006d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f938 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	e00a      	b.n	8000730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800071a:	f3af 8000 	nop.w
 800071e:	4601      	mov	r1, r0
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	60ba      	str	r2, [r7, #8]
 8000726:	b2ca      	uxtb	r2, r1
 8000728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3301      	adds	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	429a      	cmp	r2, r3
 8000736:	dbf0      	blt.n	800071a <_read+0x12>
	}

return len;
 8000738:	687b      	ldr	r3, [r7, #4]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	60f8      	str	r0, [r7, #12]
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	e009      	b.n	8000768 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	60ba      	str	r2, [r7, #8]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe97 	bl	8000490 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbf1      	blt.n	8000754 <_write+0x12>
	}
	return len;
 8000770:	687b      	ldr	r3, [r7, #4]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <_close>:

int _close(int file)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	return -1;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a0:	605a      	str	r2, [r3, #4]
	return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <_isatty>:

int _isatty(int file)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	return 1;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b085      	sub	sp, #20
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
	return 0;
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
	...

080007dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x50>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x16>
		heap_end = &end;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <_sbrk+0x50>)
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <_sbrk+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <_sbrk+0x50>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <_sbrk+0x50>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	466a      	mov	r2, sp
 8000802:	4293      	cmp	r3, r2
 8000804:	d907      	bls.n	8000816 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000806:	f002 fb8b 	bl	8002f20 <__errno>
 800080a:	4602      	mov	r2, r0
 800080c:	230c      	movs	r3, #12
 800080e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	e006      	b.n	8000824 <_sbrk+0x48>
	}

	heap_end += incr;
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <_sbrk+0x50>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a03      	ldr	r2, [pc, #12]	; (800082c <_sbrk+0x50>)
 8000820:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000008c 	.word	0x2000008c
 8000830:	20000138 	.word	0x20000138

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <SystemInit+0x5c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <SystemInit+0x5c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <SystemInit+0x5c>)
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	4911      	ldr	r1, [pc, #68]	; (8000890 <SystemInit+0x5c>)
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <SystemInit+0x60>)
 800084c:	4013      	ands	r3, r2
 800084e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <SystemInit+0x5c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <SystemInit+0x5c>)
 8000856:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800085a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <SystemInit+0x5c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <SystemInit+0x5c>)
 8000866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800086a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <SystemInit+0x5c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <SystemInit+0x5c>)
 8000872:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000876:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <SystemInit+0x5c>)
 800087a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800087e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SystemInit+0x64>)
 8000882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000886:	609a      	str	r2, [r3, #8]
#endif 
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	f8ff0000 	.word	0xf8ff0000
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800089c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800089e:	e003      	b.n	80008a8 <LoopCopyDataInit>

080008a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008a6:	3104      	adds	r1, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008a8:	480a      	ldr	r0, [pc, #40]	; (80008d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008b0:	d3f6      	bcc.n	80008a0 <CopyDataInit>
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008b4:	e002      	b.n	80008bc <LoopFillZerobss>

080008b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008b8:	f842 3b04 	str.w	r3, [r2], #4

080008bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008c0:	d3f9      	bcc.n	80008b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008c2:	f7ff ffb7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c6:	f002 fb31 	bl	8002f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fc3f 	bl	800014c <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r3, =_sidata
 80008d0:	08003e64 	.word	0x08003e64
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008d8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008dc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008e0:	20000134 	.word	0x20000134

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f929 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fdea 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f933 	bl	8000b9e <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f909 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x1c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <HAL_IncTick+0x20>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000008 	.word	0x20000008
 8000994:	2000012c 	.word	0x2000012c

08000998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <HAL_GetTick+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	2000012c 	.word	0x2000012c

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff fff0 	bl	8000998 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_Delay+0x40>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffe0 	bl	8000998 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000008 	.word	0x20000008

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff90 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff49 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff5e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff90 	bl	8000aa8 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5f 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffb0 	bl	8000b0c <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e127      	b.n	8000e1c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8116 	bne.w	8000e16 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b12      	cmp	r3, #18
 8000bf0:	d034      	beq.n	8000c5c <HAL_GPIO_Init+0xa4>
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d80d      	bhi.n	8000c12 <HAL_GPIO_Init+0x5a>
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d02b      	beq.n	8000c52 <HAL_GPIO_Init+0x9a>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d804      	bhi.n	8000c08 <HAL_GPIO_Init+0x50>
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d031      	beq.n	8000c66 <HAL_GPIO_Init+0xae>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d01c      	beq.n	8000c40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c06:	e048      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d043      	beq.n	8000c94 <HAL_GPIO_Init+0xdc>
 8000c0c:	2b11      	cmp	r3, #17
 8000c0e:	d01b      	beq.n	8000c48 <HAL_GPIO_Init+0x90>
          break;
 8000c10:	e043      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c12:	4a89      	ldr	r2, [pc, #548]	; (8000e38 <HAL_GPIO_Init+0x280>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d026      	beq.n	8000c66 <HAL_GPIO_Init+0xae>
 8000c18:	4a87      	ldr	r2, [pc, #540]	; (8000e38 <HAL_GPIO_Init+0x280>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d806      	bhi.n	8000c2c <HAL_GPIO_Init+0x74>
 8000c1e:	4a87      	ldr	r2, [pc, #540]	; (8000e3c <HAL_GPIO_Init+0x284>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d020      	beq.n	8000c66 <HAL_GPIO_Init+0xae>
 8000c24:	4a86      	ldr	r2, [pc, #536]	; (8000e40 <HAL_GPIO_Init+0x288>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01d      	beq.n	8000c66 <HAL_GPIO_Init+0xae>
          break;
 8000c2a:	e036      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c2c:	4a85      	ldr	r2, [pc, #532]	; (8000e44 <HAL_GPIO_Init+0x28c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d019      	beq.n	8000c66 <HAL_GPIO_Init+0xae>
 8000c32:	4a85      	ldr	r2, [pc, #532]	; (8000e48 <HAL_GPIO_Init+0x290>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d016      	beq.n	8000c66 <HAL_GPIO_Init+0xae>
 8000c38:	4a84      	ldr	r2, [pc, #528]	; (8000e4c <HAL_GPIO_Init+0x294>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0xae>
          break;
 8000c3e:	e02c      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e028      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e023      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e01e      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	330c      	adds	r3, #12
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e019      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e012      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d105      	bne.n	8000c88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	611a      	str	r2, [r3, #16]
          break;
 8000c86:	e008      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	615a      	str	r2, [r3, #20]
          break;
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2bff      	cmp	r3, #255	; 0xff
 8000c9e:	d801      	bhi.n	8000ca4 <HAL_GPIO_Init+0xec>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	e001      	b.n	8000ca8 <HAL_GPIO_Init+0xf0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	2bff      	cmp	r3, #255	; 0xff
 8000cae:	d802      	bhi.n	8000cb6 <HAL_GPIO_Init+0xfe>
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x104>
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	401a      	ands	r2, r3
 8000cce:	6a39      	ldr	r1, [r7, #32]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 8096 	beq.w	8000e16 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b59      	ldr	r3, [pc, #356]	; (8000e50 <HAL_GPIO_Init+0x298>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a58      	ldr	r2, [pc, #352]	; (8000e50 <HAL_GPIO_Init+0x298>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <HAL_GPIO_Init+0x298>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d02:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <HAL_GPIO_Init+0x29c>)
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4b      	ldr	r2, [pc, #300]	; (8000e58 <HAL_GPIO_Init+0x2a0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0x19e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4a      	ldr	r2, [pc, #296]	; (8000e5c <HAL_GPIO_Init+0x2a4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00d      	beq.n	8000d52 <HAL_GPIO_Init+0x19a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a49      	ldr	r2, [pc, #292]	; (8000e60 <HAL_GPIO_Init+0x2a8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x196>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a48      	ldr	r2, [pc, #288]	; (8000e64 <HAL_GPIO_Init+0x2ac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_GPIO_Init+0x192>
 8000d46:	2303      	movs	r3, #3
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x1a0>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x1a0>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x1a0>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x1a0>
 8000d56:	2300      	movs	r3, #0
 8000d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d68:	493a      	ldr	r1, [pc, #232]	; (8000e54 <HAL_GPIO_Init+0x29c>)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4938      	ldr	r1, [pc, #224]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
 8000d8e:	e006      	b.n	8000d9e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d90:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4933      	ldr	r1, [pc, #204]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	492e      	ldr	r1, [pc, #184]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	604b      	str	r3, [r1, #4]
 8000db6:	e006      	b.n	8000dc6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4929      	ldr	r1, [pc, #164]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	4924      	ldr	r1, [pc, #144]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	608b      	str	r3, [r1, #8]
 8000dde:	e006      	b.n	8000dee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	491f      	ldr	r1, [pc, #124]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	491a      	ldr	r1, [pc, #104]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60cb      	str	r3, [r1, #12]
 8000e06:	e006      	b.n	8000e16 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4915      	ldr	r1, [pc, #84]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	3301      	adds	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	fa22 f303 	lsr.w	r3, r2, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f47f aed0 	bne.w	8000bcc <HAL_GPIO_Init+0x14>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	372c      	adds	r7, #44	; 0x2c
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	10210000 	.word	0x10210000
 8000e3c:	10110000 	.word	0x10110000
 8000e40:	10120000 	.word	0x10120000
 8000e44:	10310000 	.word	0x10310000
 8000e48:	10320000 	.word	0x10320000
 8000e4c:	10220000 	.word	0x10220000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40011400 	.word	0x40011400
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e7c:	787b      	ldrb	r3, [r7, #1]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e82:	887a      	ldrh	r2, [r7, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e88:	e003      	b.n	8000e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	611a      	str	r2, [r3, #16]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ebc:	887a      	ldrh	r2, [r7, #2]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	611a      	str	r2, [r3, #16]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	420e0020 	.word	0x420e0020

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e26c      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8087 	beq.w	8001012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f04:	4b92      	ldr	r3, [pc, #584]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d00c      	beq.n	8000f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f10:	4b8f      	ldr	r3, [pc, #572]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d112      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5e>
 8000f1c:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d10b      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2a:	4b89      	ldr	r3, [pc, #548]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d06c      	beq.n	8001010 <HAL_RCC_OscConfig+0x12c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d168      	bne.n	8001010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e246      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4a:	d106      	bne.n	8000f5a <HAL_RCC_OscConfig+0x76>
 8000f4c:	4b80      	ldr	r3, [pc, #512]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a7f      	ldr	r2, [pc, #508]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e02e      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b7b      	ldr	r3, [pc, #492]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a7a      	ldr	r2, [pc, #488]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b78      	ldr	r3, [pc, #480]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a77      	ldr	r2, [pc, #476]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e01d      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xbc>
 8000f86:	4b72      	ldr	r3, [pc, #456]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a71      	ldr	r2, [pc, #452]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6e      	ldr	r2, [pc, #440]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000fa0:	4b6b      	ldr	r3, [pc, #428]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a6a      	ldr	r2, [pc, #424]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b68      	ldr	r3, [pc, #416]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a67      	ldr	r2, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fcea 	bl	8000998 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fce6 	bl	8000998 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1fa      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xe4>
 8000fe6:	e014      	b.n	8001012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcd6 	bl	8000998 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fcd2 	bl	8000998 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e1e6      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x10c>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d063      	beq.n	80010e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800101e:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800102a:	4b49      	ldr	r3, [pc, #292]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b08      	cmp	r3, #8
 8001034:	d11c      	bne.n	8001070 <HAL_RCC_OscConfig+0x18c>
 8001036:	4b46      	ldr	r3, [pc, #280]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x176>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d001      	beq.n	800105a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e1ba      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4939      	ldr	r1, [pc, #228]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	e03a      	b.n	80010e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fc8b 	bl	8000998 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc87 	bl	8000998 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e19b      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4927      	ldr	r1, [pc, #156]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
 80010b8:	e015      	b.n	80010e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc6a 	bl	8000998 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc66 	bl	8000998 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e17a      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03a      	beq.n	8001168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d019      	beq.n	800112e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_RCC_OscConfig+0x274>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff fc4a 	bl	8000998 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fc46 	bl	8000998 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e15a      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fada 	bl	80016e0 <RCC_Delay>
 800112c:	e01c      	b.n	8001168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_RCC_OscConfig+0x274>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fc30 	bl	8000998 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113a:	e00f      	b.n	800115c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc2c 	bl	8000998 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d908      	bls.n	800115c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e140      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	42420000 	.word	0x42420000
 8001158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e9      	bne.n	800113c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a6 	beq.w	80012c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117a:	4b97      	ldr	r3, [pc, #604]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10d      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b94      	ldr	r3, [pc, #592]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a93      	ldr	r2, [pc, #588]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b8e      	ldr	r3, [pc, #568]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a8a      	ldr	r2, [pc, #552]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fbed 	bl	8000998 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c2:	f7ff fbe9 	bl	8000998 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e0fd      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	4b81      	ldr	r3, [pc, #516]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x312>
 80011e8:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a7a      	ldr	r2, [pc, #488]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	e02d      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x334>
 80011fe:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a75      	ldr	r2, [pc, #468]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b73      	ldr	r3, [pc, #460]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a72      	ldr	r2, [pc, #456]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6213      	str	r3, [r2, #32]
 8001216:	e01c      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b05      	cmp	r3, #5
 800121e:	d10c      	bne.n	800123a <HAL_RCC_OscConfig+0x356>
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a6c      	ldr	r2, [pc, #432]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a69      	ldr	r2, [pc, #420]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6213      	str	r3, [r2, #32]
 8001238:	e00b      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 800123a:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a66      	ldr	r2, [pc, #408]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a63      	ldr	r2, [pc, #396]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d015      	beq.n	8001286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb9d 	bl	8000998 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	e00a      	b.n	8001278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fb99 	bl	8000998 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e0ab      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0ee      	beq.n	8001262 <HAL_RCC_OscConfig+0x37e>
 8001284:	e014      	b.n	80012b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb87 	bl	8000998 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff fb83 	bl	8000998 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	; 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e095      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ee      	bne.n	800128e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b6:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a47      	ldr	r2, [pc, #284]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8081 	beq.w	80013ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d061      	beq.n	800139c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d146      	bne.n	800136e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_RCC_OscConfig+0x4fc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb57 	bl	8000998 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fb53 	bl	8000998 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e067      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001314:	d108      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	492d      	ldr	r1, [pc, #180]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a19      	ldr	r1, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	430b      	orrs	r3, r1
 800133a:	4927      	ldr	r1, [pc, #156]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x4fc>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fb27 	bl	8000998 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fb23 	bl	8000998 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e037      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x46a>
 800136c:	e02f      	b.n	80013ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_RCC_OscConfig+0x4fc>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fb10 	bl	8000998 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb0c 	bl	8000998 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e020      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x498>
 800139a:	e018      	b.n	80013ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e013      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40007000 	.word	0x40007000
 80013e0:	42420060 	.word	0x42420060

080013e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0d0      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d910      	bls.n	8001428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b67      	ldr	r3, [pc, #412]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 0207 	bic.w	r2, r3, #7
 800140e:	4965      	ldr	r1, [pc, #404]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0b8      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800144a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001464:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	494d      	ldr	r1, [pc, #308]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d040      	beq.n	8001504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d115      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e07f      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e073      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06b      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f023 0203 	bic.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4936      	ldr	r1, [pc, #216]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fa60 	bl	8000998 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	f7ff fa5c 	bl	8000998 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e053      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 020c 	and.w	r2, r3, #12
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1eb      	bne.n	80014dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d210      	bcs.n	8001534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 0207 	bic.w	r2, r3, #7
 800151a:	4922      	ldr	r1, [pc, #136]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e032      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4916      	ldr	r1, [pc, #88]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	4313      	orrs	r3, r2
 8001550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d009      	beq.n	8001572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001572:	f000 f821 	bl	80015b8 <HAL_RCC_GetSysClockFreq>
 8001576:	4601      	mov	r1, r0
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_RCC_ClockConfig+0x1c8>)
 8001584:	5cd3      	ldrb	r3, [r2, r3]
 8001586:	fa21 f303 	lsr.w	r3, r1, r3
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x1cc>)
 800158c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f9be 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	08003dac 	.word	0x08003dac
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b8:	b490      	push	{r4, r7}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c0:	1d3c      	adds	r4, r7, #4
 80015c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d002      	beq.n	80015f8 <HAL_RCC_GetSysClockFreq+0x40>
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_GetSysClockFreq+0x46>
 80015f6:	e02d      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015fa:	623b      	str	r3, [r7, #32]
      break;
 80015fc:	e02d      	b.n	800165a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	0c9b      	lsrs	r3, r3, #18
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800160a:	4413      	add	r3, r2
 800160c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001610:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0c5b      	lsrs	r3, r3, #17
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800162a:	4413      	add	r3, r2
 800162c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001630:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001636:	fb02 f203 	mul.w	r2, r2, r3
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	e004      	b.n	800164e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	623b      	str	r3, [r7, #32]
      break;
 8001652:	e002      	b.n	800165a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001656:	623b      	str	r3, [r7, #32]
      break;
 8001658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165a:	6a3b      	ldr	r3, [r7, #32]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bc90      	pop	{r4, r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	08003d84 	.word	0x08003d84
 800166c:	08003d94 	.word	0x08003d94
 8001670:	40021000 	.word	0x40021000
 8001674:	007a1200 	.word	0x007a1200
 8001678:	003d0900 	.word	0x003d0900

0800167c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <HAL_RCC_GetHCLKFreq+0x10>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001694:	f7ff fff2 	bl	800167c <HAL_RCC_GetHCLKFreq>
 8001698:	4601      	mov	r1, r0
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08003dbc 	.word	0x08003dbc

080016b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016bc:	f7ff ffde 	bl	800167c <HAL_RCC_GetHCLKFreq>
 80016c0:	4601      	mov	r1, r0
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	0adb      	lsrs	r3, r3, #11
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08003dbc 	.word	0x08003dbc

080016e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <RCC_Delay+0x34>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <RCC_Delay+0x38>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0a5b      	lsrs	r3, r3, #9
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016fc:	bf00      	nop
  }
  while (Delay --);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	60fa      	str	r2, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <RCC_Delay+0x1c>
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000
 8001718:	10624dd3 	.word	0x10624dd3

0800171c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d07d      	beq.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173c:	4b4f      	ldr	r3, [pc, #316]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10d      	bne.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001752:	61d3      	str	r3, [r2, #28]
 8001754:	4b49      	ldr	r3, [pc, #292]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001760:	2301      	movs	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d118      	bne.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a42      	ldr	r2, [pc, #264]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177c:	f7ff f90c 	bl	8000998 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	e008      	b.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7ff f908 	bl	8000998 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e06d      	b.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d02e      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d027      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80017d6:	4a29      	ldr	r2, [pc, #164]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d014      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff f8d7 	bl	8000998 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff f8d3 	bl	8000998 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e036      	b.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ee      	beq.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4917      	ldr	r1, [pc, #92]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800181e:	4313      	orrs	r3, r2
 8001820:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001832:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	490b      	ldr	r1, [pc, #44]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	4904      	ldr	r1, [pc, #16]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40007000 	.word	0x40007000
 8001884:	42420440 	.word	0x42420440

08001888 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b08d      	sub	sp, #52	; 0x34
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001890:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001892:	f107 040c 	add.w	r4, r7, #12
 8001896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d07f      	beq.n	80019bc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d002      	beq.n	80018c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d048      	beq.n	8001956 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80018c4:	e08b      	b.n	80019de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80018c6:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d07f      	beq.n	80019d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	0c9b      	lsrs	r3, r3, #18
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018e4:	4413      	add	r3, r2
 80018e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ea:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d018      	beq.n	8001928 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0c5b      	lsrs	r3, r3, #17
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001904:	4413      	add	r3, r2
 8001906:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001916:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fbb2 f2f3 	udiv	r2, r2, r3
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001926:	e004      	b.n	8001932 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800193e:	d102      	bne.n	8001946 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001944:	e048      	b.n	80019d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001954:	e040      	b.n	80019d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001966:	d108      	bne.n	800197a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
 8001978:	e01f      	b.n	80019ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001984:	d109      	bne.n	800199a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001992:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
 8001998:	e00f      	b.n	80019ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019a4:	d11a      	bne.n	80019dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d014      	beq.n	80019dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80019b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019b8:	e010      	b.n	80019dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80019ba:	e00f      	b.n	80019dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80019bc:	f7ff fe7c 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0b9b      	lsrs	r3, r3, #14
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	3301      	adds	r3, #1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80019d8:	bf00      	nop
 80019da:	e000      	b.n	80019de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80019dc:	bf00      	nop
    }
  }
  return (frequency);
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3734      	adds	r7, #52	; 0x34
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	08003d98 	.word	0x08003d98
 80019ec:	08003da8 	.word	0x08003da8
 80019f0:	40021000 	.word	0x40021000
 80019f4:	007a1200 	.word	0x007a1200
 80019f8:	003d0900 	.word	0x003d0900
 80019fc:	aaaaaaab 	.word	0xaaaaaaab

08001a00 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e084      	b.n	8001b20 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7c5b      	ldrb	r3, [r3, #17]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fd8a 	bl	8000540 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f9c8 	bl	8001dc8 <HAL_RTC_WaitForSynchro>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2204      	movs	r2, #4
 8001a42:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e06b      	b.n	8001b20 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fa81 	bl	8001f50 <RTC_EnterInitMode>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2204      	movs	r2, #4
 8001a58:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e060      	b.n	8001b20 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0207 	bic.w	r2, r2, #7
 8001a6c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RTC_Init+0x128>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_RTC_Init+0x128>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_RTC_Init+0x128>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4926      	ldr	r1, [pc, #152]	; (8001b28 <HAL_RTC_Init+0x128>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e00e      	b.n	8001ac4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7ff feee 	bl	8001888 <HAL_RCCEx_GetPeriphCLKFreq>
 8001aac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d104      	bne.n	8001abe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e030      	b.n	8001b20 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 010f 	bic.w	r1, r3, #15
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0c1a      	lsrs	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	041b      	lsls	r3, r3, #16
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	b291      	uxth	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fa55 	bl	8001fa0 <RTC_ExitInitMode>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2204      	movs	r2, #4
 8001b00:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00c      	b.n	8001b20 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
  }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40006c00 	.word	0x40006c00

08001b2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_RTC_SetTime+0x20>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e080      	b.n	8001c52 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	7c1b      	ldrb	r3, [r3, #16]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_RTC_SetTime+0x30>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e07a      	b.n	8001c52 <HAL_RTC_SetTime+0x126>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2202      	movs	r2, #2
 8001b66:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d113      	bne.n	8001b96 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001b78:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	4619      	mov	r1, r3
 8001b82:	460b      	mov	r3, r1
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a5b      	subs	r3, r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001b8a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e01e      	b.n	8001bd4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fa28 	bl	8001ff0 <RTC_Bcd2ToByte>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ba8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	785b      	ldrb	r3, [r3, #1]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fa1d 	bl	8001ff0 <RTC_Bcd2ToByte>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001bc2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	789b      	ldrb	r3, [r3, #2]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fa11 	bl	8001ff0 <RTC_Bcd2ToByte>
 8001bce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001bd0:	4423      	add	r3, r4
 8001bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001bd4:	6979      	ldr	r1, [r7, #20]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f953 	bl	8001e82 <RTC_WriteTimeCounter>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2204      	movs	r2, #4
 8001be6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e02f      	b.n	8001c52 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0205 	bic.w	r2, r2, #5
 8001c00:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f964 	bl	8001ed0 <RTC_ReadAlarmCounter>
 8001c08:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d018      	beq.n	8001c44 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d214      	bcs.n	8001c44 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001c20:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c24:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c26:	6939      	ldr	r1, [r7, #16]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f96a 	bl	8001f02 <RTC_WriteAlarmCounter>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2204      	movs	r2, #4
 8001c38:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e006      	b.n	8001c52 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
	...

08001c5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RTC_SetDate+0x24>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e097      	b.n	8001db4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	7c1b      	ldrb	r3, [r3, #16]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_RTC_SetDate+0x34>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e091      	b.n	8001db4 <HAL_RTC_SetDate+0x158>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	78da      	ldrb	r2, [r3, #3]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	785a      	ldrb	r2, [r3, #1]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	789a      	ldrb	r2, [r3, #2]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	739a      	strb	r2, [r3, #14]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f995 	bl	8001ff0 <RTC_Bcd2ToByte>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f98c 	bl	8001ff0 <RTC_Bcd2ToByte>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	789b      	ldrb	r3, [r3, #2]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 f983 	bl	8001ff0 <RTC_Bcd2ToByte>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	7bdb      	ldrb	r3, [r3, #15]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	7b59      	ldrb	r1, [r3, #13]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	7b9b      	ldrb	r3, [r3, #14]
 8001d00:	461a      	mov	r2, r3
 8001d02:	f000 f993 	bl	800202c <RTC_WeekDayNum>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	7b1a      	ldrb	r2, [r3, #12]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f883 	bl	8001e22 <RTC_ReadTimeCounter>
 8001d1c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <HAL_RTC_SetDate+0x160>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b18      	cmp	r3, #24
 8001d2e:	d93a      	bls.n	8001da6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_RTC_SetDate+0x164>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_RTC_SetDate+0x168>)
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001d46:	69f9      	ldr	r1, [r7, #28]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f89a 	bl	8001e82 <RTC_WriteTimeCounter>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2204      	movs	r2, #4
 8001d58:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e027      	b.n	8001db4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f8b3 	bl	8001ed0 <RTC_ReadAlarmCounter>
 8001d6a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d018      	beq.n	8001da6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d214      	bcs.n	8001da6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001d82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d86:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001d88:	69b9      	ldr	r1, [r7, #24]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f8b9 	bl	8001f02 <RTC_WriteAlarmCounter>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e006      	b.n	8001db4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	91a2b3c5 	.word	0x91a2b3c5
 8001dc0:	aaaaaaab 	.word	0xaaaaaaab
 8001dc4:	00015180 	.word	0x00015180

08001dc8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e01d      	b.n	8001e1a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0208 	bic.w	r2, r2, #8
 8001dec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001dee:	f7fe fdd3 	bl	8000998 <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001df4:	e009      	b.n	8001e0a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001df6:	f7fe fdcf 	bl	8000998 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e04:	d901      	bls.n	8001e0a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e007      	b.n	8001e1a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ee      	beq.n	8001df6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	827b      	strh	r3, [r7, #18]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	823b      	strh	r3, [r7, #16]
 8001e32:	2300      	movs	r3, #0
 8001e34:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001e52:	8a7a      	ldrh	r2, [r7, #18]
 8001e54:	8a3b      	ldrh	r3, [r7, #16]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d008      	beq.n	8001e6c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001e5a:	8a3b      	ldrh	r3, [r7, #16]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e004      	b.n	8001e76 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001e6c:	8a7b      	ldrh	r3, [r7, #18]
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001e76:	697b      	ldr	r3, [r7, #20]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f85d 	bl	8001f50 <RTC_EnterInitMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e011      	b.n	8001ec6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	0c12      	lsrs	r2, r2, #16
 8001eaa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f872 	bl	8001fa0 <RTC_ExitInitMode>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	81fb      	strh	r3, [r7, #14]
 8001edc:	2300      	movs	r3, #0
 8001ede:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001ef0:	89fb      	ldrh	r3, [r7, #14]
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	89bb      	ldrh	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f81d 	bl	8001f50 <RTC_EnterInitMode>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e011      	b.n	8001f46 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	0c12      	lsrs	r2, r2, #16
 8001f2a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	b292      	uxth	r2, r2
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f832 	bl	8001fa0 <RTC_ExitInitMode>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001f5c:	f7fe fd1c 	bl	8000998 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001f62:	e009      	b.n	8001f78 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f64:	f7fe fd18 	bl	8000998 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f72:	d901      	bls.n	8001f78 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e00f      	b.n	8001f98 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0ee      	beq.n	8001f64 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0210 	orr.w	r2, r2, #16
 8001f94:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0210 	bic.w	r2, r2, #16
 8001fba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001fbc:	f7fe fcec 	bl	8000998 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fc2:	e009      	b.n	8001fd8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fc4:	f7fe fce8 	bl	8000998 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd2:	d901      	bls.n	8001fd8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e007      	b.n	8001fe8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ee      	beq.n	8001fc4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	b2da      	uxtb	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4413      	add	r3, r2
 800201e:	b2db      	uxtb	r3, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
	...

0800202c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
 8002038:	4613      	mov	r3, r2
 800203a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800204a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d82d      	bhi.n	80020ae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <RTC_WeekDayNum+0xe4>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	085a      	lsrs	r2, r3, #1
 8002066:	78bb      	ldrb	r3, [r7, #2]
 8002068:	441a      	add	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	441a      	add	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3b01      	subs	r3, #1
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3b01      	subs	r3, #1
 800207a:	4926      	ldr	r1, [pc, #152]	; (8002114 <RTC_WeekDayNum+0xe8>)
 800207c:	fba1 1303 	umull	r1, r3, r1, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	1ad2      	subs	r2, r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3b01      	subs	r3, #1
 8002088:	4922      	ldr	r1, [pc, #136]	; (8002114 <RTC_WeekDayNum+0xe8>)
 800208a:	fba1 1303 	umull	r1, r3, r1, r3
 800208e:	09db      	lsrs	r3, r3, #7
 8002090:	4413      	add	r3, r2
 8002092:	1d1a      	adds	r2, r3, #4
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <RTC_WeekDayNum+0xec>)
 8002096:	fba3 1302 	umull	r1, r3, r3, r2
 800209a:	1ad1      	subs	r1, r2, r3
 800209c:	0849      	lsrs	r1, r1, #1
 800209e:	440b      	add	r3, r1
 80020a0:	0899      	lsrs	r1, r3, #2
 80020a2:	460b      	mov	r3, r1
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	1a5b      	subs	r3, r3, r1
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e029      	b.n	8002102 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <RTC_WeekDayNum+0xe4>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	085a      	lsrs	r2, r3, #1
 80020c2:	78bb      	ldrb	r3, [r7, #2]
 80020c4:	441a      	add	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	441a      	add	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	441a      	add	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4910      	ldr	r1, [pc, #64]	; (8002114 <RTC_WeekDayNum+0xe8>)
 80020d4:	fba1 1303 	umull	r1, r3, r1, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	1ad2      	subs	r2, r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	490d      	ldr	r1, [pc, #52]	; (8002114 <RTC_WeekDayNum+0xe8>)
 80020e0:	fba1 1303 	umull	r1, r3, r1, r3
 80020e4:	09db      	lsrs	r3, r3, #7
 80020e6:	4413      	add	r3, r2
 80020e8:	1c9a      	adds	r2, r3, #2
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <RTC_WeekDayNum+0xec>)
 80020ec:	fba3 1302 	umull	r1, r3, r3, r2
 80020f0:	1ad1      	subs	r1, r2, r3
 80020f2:	0849      	lsrs	r1, r1, #1
 80020f4:	440b      	add	r3, r1
 80020f6:	0899      	lsrs	r1, r3, #2
 80020f8:	460b      	mov	r3, r1
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a5b      	subs	r3, r3, r1
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	b2db      	uxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	38e38e39 	.word	0x38e38e39
 8002114:	51eb851f 	.word	0x51eb851f
 8002118:	24924925 	.word	0x24924925

0800211c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e01d      	b.n	800216a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fa20 	bl	8000588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f000 f9ee 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e01d      	b.n	80021c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d106      	bne.n	800219e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f815 	bl	80021c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4610      	mov	r0, r2
 80021b2:	f000 f9c3 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fc24 	bl	8002a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_TIM_PWM_Start+0x60>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d107      	bne.n	800220e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d007      	beq.n	8002230 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40012c00 	.word	0x40012c00

08002240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002256:	2302      	movs	r3, #2
 8002258:	e0b4      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	f200 809f 	bhi.w	80023b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	080022ad 	.word	0x080022ad
 800227c:	080023b1 	.word	0x080023b1
 8002280:	080023b1 	.word	0x080023b1
 8002284:	080023b1 	.word	0x080023b1
 8002288:	080022ed 	.word	0x080022ed
 800228c:	080023b1 	.word	0x080023b1
 8002290:	080023b1 	.word	0x080023b1
 8002294:	080023b1 	.word	0x080023b1
 8002298:	0800232f 	.word	0x0800232f
 800229c:	080023b1 	.word	0x080023b1
 80022a0:	080023b1 	.word	0x080023b1
 80022a4:	080023b1 	.word	0x080023b1
 80022a8:	0800236f 	.word	0x0800236f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f9a4 	bl	8002600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0208 	orr.w	r2, r2, #8
 80022c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6999      	ldr	r1, [r3, #24]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	619a      	str	r2, [r3, #24]
      break;
 80022ea:	e062      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f9ea 	bl	80026cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6999      	ldr	r1, [r3, #24]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	619a      	str	r2, [r3, #24]
      break;
 800232c:	e041      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fa33 	bl	80027a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0208 	orr.w	r2, r2, #8
 8002348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0204 	bic.w	r2, r2, #4
 8002358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69d9      	ldr	r1, [r3, #28]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	61da      	str	r2, [r3, #28]
      break;
 800236c:	e021      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fa7d 	bl	8002874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	021a      	lsls	r2, r3, #8
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	61da      	str	r2, [r3, #28]
      break;
 80023ae:	e000      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80023b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_TIM_ConfigClockSource+0x18>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0a6      	b.n	8002532 <HAL_TIM_ConfigClockSource+0x166>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800240a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d067      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x120>
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d80b      	bhi.n	8002438 <HAL_TIM_ConfigClockSource+0x6c>
 8002420:	2b10      	cmp	r3, #16
 8002422:	d073      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d802      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x62>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d06f      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800242c:	e078      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800242e:	2b20      	cmp	r3, #32
 8002430:	d06c      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
 8002432:	2b30      	cmp	r3, #48	; 0x30
 8002434:	d06a      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002436:	e073      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002438:	2b70      	cmp	r3, #112	; 0x70
 800243a:	d00d      	beq.n	8002458 <HAL_TIM_ConfigClockSource+0x8c>
 800243c:	2b70      	cmp	r3, #112	; 0x70
 800243e:	d804      	bhi.n	800244a <HAL_TIM_ConfigClockSource+0x7e>
 8002440:	2b50      	cmp	r3, #80	; 0x50
 8002442:	d033      	beq.n	80024ac <HAL_TIM_ConfigClockSource+0xe0>
 8002444:	2b60      	cmp	r3, #96	; 0x60
 8002446:	d041      	beq.n	80024cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002448:	e06a      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d066      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x152>
 8002450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002454:	d017      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002456:	e063      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f000 fac9 	bl	80029fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800247a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
      break;
 8002484:	e04c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f000 fab2 	bl	80029fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a8:	609a      	str	r2, [r3, #8]
      break;
 80024aa:	e039      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f000 fa29 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2150      	movs	r1, #80	; 0x50
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fa80 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80024ca:	e029      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	461a      	mov	r2, r3
 80024da:	f000 fa47 	bl	800296c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2160      	movs	r1, #96	; 0x60
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fa70 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80024ea:	e019      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f000 fa09 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa60 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 800250a:	e009      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 fa57 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 800251c:	e000      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800251e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <TIM_Base_SetConfig+0xb8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00b      	beq.n	800256c <TIM_Base_SetConfig+0x30>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d007      	beq.n	800256c <TIM_Base_SetConfig+0x30>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <TIM_Base_SetConfig+0xbc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <TIM_Base_SetConfig+0x30>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a25      	ldr	r2, [pc, #148]	; (80025fc <TIM_Base_SetConfig+0xc0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d108      	bne.n	800257e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <TIM_Base_SetConfig+0xb8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00b      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d007      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <TIM_Base_SetConfig+0xbc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a18      	ldr	r2, [pc, #96]	; (80025fc <TIM_Base_SetConfig+0xc0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d108      	bne.n	80025b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <TIM_Base_SetConfig+0xb8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d103      	bne.n	80025e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	615a      	str	r2, [r3, #20]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000800 	.word	0x40000800

08002600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f023 0201 	bic.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f023 0302 	bic.w	r3, r3, #2
 8002648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <TIM_OC1_SetConfig+0xc8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10c      	bne.n	8002676 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f023 0308 	bic.w	r3, r3, #8
 8002662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <TIM_OC1_SetConfig+0xc8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d111      	bne.n	80026a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800268c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	621a      	str	r2, [r3, #32]
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40012c00 	.word	0x40012c00

080026cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f023 0210 	bic.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f023 0320 	bic.w	r3, r3, #32
 8002716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <TIM_OC2_SetConfig+0xd0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d10d      	bne.n	8002748 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <TIM_OC2_SetConfig+0xd0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d113      	bne.n	8002778 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800275e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40012c00 	.word	0x40012c00

080027a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <TIM_OC3_SetConfig+0xd0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10d      	bne.n	800281a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <TIM_OC3_SetConfig+0xd0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40012c00 	.word	0x40012c00

08002874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	031b      	lsls	r3, r3, #12
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0f      	ldr	r2, [pc, #60]	; (800290c <TIM_OC4_SetConfig+0x98>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d109      	bne.n	80028e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	621a      	str	r2, [r3, #32]
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00

08002910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 030a 	bic.w	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 0210 	bic.w	r2, r3, #16
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	031b      	lsls	r3, r3, #12
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	621a      	str	r2, [r3, #32]
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f043 0307 	orr.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2201      	movs	r2, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	401a      	ands	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e032      	b.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e03f      	b.n	8002b9e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd fd74 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	; 0x24
 8002b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f90b 	bl	8002d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b088      	sub	sp, #32
 8002baa:	af02      	add	r7, sp, #8
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	f040 8083 	bne.w	8002cce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_UART_Transmit+0x2e>
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e07b      	b.n	8002cd0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Transmit+0x40>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e074      	b.n	8002cd0 <HAL_UART_Transmit+0x12a>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2221      	movs	r2, #33	; 0x21
 8002bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bfc:	f7fd fecc 	bl	8000998 <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c0e:	e042      	b.n	8002c96 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c26:	d122      	bne.n	8002c6e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f850 	bl	8002cd8 <UART_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e046      	b.n	8002cd0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c54:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	3302      	adds	r3, #2
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	e017      	b.n	8002c96 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	e013      	b.n	8002c96 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f82d 	bl	8002cd8 <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e023      	b.n	8002cd0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1b7      	bne.n	8002c10 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f814 	bl	8002cd8 <UART_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e00a      	b.n	8002cd0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce8:	e02c      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d028      	beq.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf8:	f7fd fe4e 	bl	8000998 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d21d      	bcs.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e00f      	b.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d0c3      	beq.n	8002cea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002da6:	f023 030c 	bic.w	r3, r3, #12
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a52      	ldr	r2, [pc, #328]	; (8002f18 <UART_SetConfig+0x1ac>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d14e      	bne.n	8002e72 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dd4:	f7fe fc70 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8002dd8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009a      	lsls	r2, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	4a4a      	ldr	r2, [pc, #296]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	0119      	lsls	r1, r3, #4
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e10:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002e12:	fba3 0302 	umull	r0, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2064      	movs	r0, #100	; 0x64
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	3332      	adds	r3, #50	; 0x32
 8002e24:	4a3d      	ldr	r2, [pc, #244]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e30:	4419      	add	r1, r3
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009a      	lsls	r2, r3, #2
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e48:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2064      	movs	r0, #100	; 0x64
 8002e52:	fb00 f303 	mul.w	r3, r0, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	3332      	adds	r3, #50	; 0x32
 8002e5c:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	440a      	add	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002e70:	e04d      	b.n	8002f0e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e72:	f7fe fc0d 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8002e76:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	009a      	lsls	r2, r3, #2
 8002e82:	441a      	add	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	4a23      	ldr	r2, [pc, #140]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	0119      	lsls	r1, r3, #4
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009a      	lsls	r2, r3, #2
 8002ea2:	441a      	add	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002eb0:	fba3 0302 	umull	r0, r3, r3, r2
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	2064      	movs	r0, #100	; 0x64
 8002eb8:	fb00 f303 	mul.w	r3, r0, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	3332      	adds	r3, #50	; 0x32
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ece:	4419      	add	r1, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009a      	lsls	r2, r3, #2
 8002eda:	441a      	add	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002ee8:	fba3 0302 	umull	r0, r3, r3, r2
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	2064      	movs	r0, #100	; 0x64
 8002ef0:	fb00 f303 	mul.w	r3, r0, r3
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	3332      	adds	r3, #50	; 0x32
 8002efa:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <UART_SetConfig+0x1b0>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	440a      	add	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	51eb851f 	.word	0x51eb851f

08002f20 <__errno>:
 8002f20:	4b01      	ldr	r3, [pc, #4]	; (8002f28 <__errno+0x8>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <__libc_init_array>:
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	2500      	movs	r5, #0
 8002f30:	4e0c      	ldr	r6, [pc, #48]	; (8002f64 <__libc_init_array+0x38>)
 8002f32:	4c0d      	ldr	r4, [pc, #52]	; (8002f68 <__libc_init_array+0x3c>)
 8002f34:	1ba4      	subs	r4, r4, r6
 8002f36:	10a4      	asrs	r4, r4, #2
 8002f38:	42a5      	cmp	r5, r4
 8002f3a:	d109      	bne.n	8002f50 <__libc_init_array+0x24>
 8002f3c:	f000 ff10 	bl	8003d60 <_init>
 8002f40:	2500      	movs	r5, #0
 8002f42:	4e0a      	ldr	r6, [pc, #40]	; (8002f6c <__libc_init_array+0x40>)
 8002f44:	4c0a      	ldr	r4, [pc, #40]	; (8002f70 <__libc_init_array+0x44>)
 8002f46:	1ba4      	subs	r4, r4, r6
 8002f48:	10a4      	asrs	r4, r4, #2
 8002f4a:	42a5      	cmp	r5, r4
 8002f4c:	d105      	bne.n	8002f5a <__libc_init_array+0x2e>
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f54:	4798      	blx	r3
 8002f56:	3501      	adds	r5, #1
 8002f58:	e7ee      	b.n	8002f38 <__libc_init_array+0xc>
 8002f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f5e:	4798      	blx	r3
 8002f60:	3501      	adds	r5, #1
 8002f62:	e7f2      	b.n	8002f4a <__libc_init_array+0x1e>
 8002f64:	08003e5c 	.word	0x08003e5c
 8002f68:	08003e5c 	.word	0x08003e5c
 8002f6c:	08003e5c 	.word	0x08003e5c
 8002f70:	08003e60 	.word	0x08003e60

08002f74 <memset>:
 8002f74:	4603      	mov	r3, r0
 8002f76:	4402      	add	r2, r0
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memset+0xa>
 8002f7c:	4770      	bx	lr
 8002f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f82:	e7f9      	b.n	8002f78 <memset+0x4>

08002f84 <iprintf>:
 8002f84:	b40f      	push	{r0, r1, r2, r3}
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <iprintf+0x2c>)
 8002f88:	b513      	push	{r0, r1, r4, lr}
 8002f8a:	681c      	ldr	r4, [r3, #0]
 8002f8c:	b124      	cbz	r4, 8002f98 <iprintf+0x14>
 8002f8e:	69a3      	ldr	r3, [r4, #24]
 8002f90:	b913      	cbnz	r3, 8002f98 <iprintf+0x14>
 8002f92:	4620      	mov	r0, r4
 8002f94:	f000 f84e 	bl	8003034 <__sinit>
 8002f98:	ab05      	add	r3, sp, #20
 8002f9a:	9a04      	ldr	r2, [sp, #16]
 8002f9c:	68a1      	ldr	r1, [r4, #8]
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	f000 f953 	bl	800324c <_vfiprintf_r>
 8002fa6:	b002      	add	sp, #8
 8002fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fac:	b004      	add	sp, #16
 8002fae:	4770      	bx	lr
 8002fb0:	2000000c 	.word	0x2000000c

08002fb4 <std>:
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	b510      	push	{r4, lr}
 8002fb8:	4604      	mov	r4, r0
 8002fba:	e9c0 3300 	strd	r3, r3, [r0]
 8002fbe:	6083      	str	r3, [r0, #8]
 8002fc0:	8181      	strh	r1, [r0, #12]
 8002fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8002fc4:	81c2      	strh	r2, [r0, #14]
 8002fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fca:	6183      	str	r3, [r0, #24]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	2208      	movs	r2, #8
 8002fd0:	305c      	adds	r0, #92	; 0x5c
 8002fd2:	f7ff ffcf 	bl	8002f74 <memset>
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <std+0x38>)
 8002fd8:	6224      	str	r4, [r4, #32]
 8002fda:	6263      	str	r3, [r4, #36]	; 0x24
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <std+0x3c>)
 8002fde:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <std+0x40>)
 8002fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <std+0x44>)
 8002fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	bf00      	nop
 8002fec:	080037a9 	.word	0x080037a9
 8002ff0:	080037cb 	.word	0x080037cb
 8002ff4:	08003803 	.word	0x08003803
 8002ff8:	08003827 	.word	0x08003827

08002ffc <_cleanup_r>:
 8002ffc:	4901      	ldr	r1, [pc, #4]	; (8003004 <_cleanup_r+0x8>)
 8002ffe:	f000 b885 	b.w	800310c <_fwalk_reent>
 8003002:	bf00      	nop
 8003004:	08003b01 	.word	0x08003b01

08003008 <__sfmoreglue>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	2568      	movs	r5, #104	; 0x68
 800300c:	1e4a      	subs	r2, r1, #1
 800300e:	4355      	muls	r5, r2
 8003010:	460e      	mov	r6, r1
 8003012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003016:	f000 f897 	bl	8003148 <_malloc_r>
 800301a:	4604      	mov	r4, r0
 800301c:	b140      	cbz	r0, 8003030 <__sfmoreglue+0x28>
 800301e:	2100      	movs	r1, #0
 8003020:	e9c0 1600 	strd	r1, r6, [r0]
 8003024:	300c      	adds	r0, #12
 8003026:	60a0      	str	r0, [r4, #8]
 8003028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800302c:	f7ff ffa2 	bl	8002f74 <memset>
 8003030:	4620      	mov	r0, r4
 8003032:	bd70      	pop	{r4, r5, r6, pc}

08003034 <__sinit>:
 8003034:	6983      	ldr	r3, [r0, #24]
 8003036:	b510      	push	{r4, lr}
 8003038:	4604      	mov	r4, r0
 800303a:	bb33      	cbnz	r3, 800308a <__sinit+0x56>
 800303c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003040:	6503      	str	r3, [r0, #80]	; 0x50
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <__sinit+0x58>)
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <__sinit+0x5c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6282      	str	r2, [r0, #40]	; 0x28
 800304a:	4298      	cmp	r0, r3
 800304c:	bf04      	itt	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	6183      	streq	r3, [r0, #24]
 8003052:	f000 f81f 	bl	8003094 <__sfp>
 8003056:	6060      	str	r0, [r4, #4]
 8003058:	4620      	mov	r0, r4
 800305a:	f000 f81b 	bl	8003094 <__sfp>
 800305e:	60a0      	str	r0, [r4, #8]
 8003060:	4620      	mov	r0, r4
 8003062:	f000 f817 	bl	8003094 <__sfp>
 8003066:	2200      	movs	r2, #0
 8003068:	60e0      	str	r0, [r4, #12]
 800306a:	2104      	movs	r1, #4
 800306c:	6860      	ldr	r0, [r4, #4]
 800306e:	f7ff ffa1 	bl	8002fb4 <std>
 8003072:	2201      	movs	r2, #1
 8003074:	2109      	movs	r1, #9
 8003076:	68a0      	ldr	r0, [r4, #8]
 8003078:	f7ff ff9c 	bl	8002fb4 <std>
 800307c:	2202      	movs	r2, #2
 800307e:	2112      	movs	r1, #18
 8003080:	68e0      	ldr	r0, [r4, #12]
 8003082:	f7ff ff97 	bl	8002fb4 <std>
 8003086:	2301      	movs	r3, #1
 8003088:	61a3      	str	r3, [r4, #24]
 800308a:	bd10      	pop	{r4, pc}
 800308c:	08003dc4 	.word	0x08003dc4
 8003090:	08002ffd 	.word	0x08002ffd

08003094 <__sfp>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <__sfp+0x70>)
 8003098:	4607      	mov	r7, r0
 800309a:	681e      	ldr	r6, [r3, #0]
 800309c:	69b3      	ldr	r3, [r6, #24]
 800309e:	b913      	cbnz	r3, 80030a6 <__sfp+0x12>
 80030a0:	4630      	mov	r0, r6
 80030a2:	f7ff ffc7 	bl	8003034 <__sinit>
 80030a6:	3648      	adds	r6, #72	; 0x48
 80030a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	d503      	bpl.n	80030b8 <__sfp+0x24>
 80030b0:	6833      	ldr	r3, [r6, #0]
 80030b2:	b133      	cbz	r3, 80030c2 <__sfp+0x2e>
 80030b4:	6836      	ldr	r6, [r6, #0]
 80030b6:	e7f7      	b.n	80030a8 <__sfp+0x14>
 80030b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030bc:	b16d      	cbz	r5, 80030da <__sfp+0x46>
 80030be:	3468      	adds	r4, #104	; 0x68
 80030c0:	e7f4      	b.n	80030ac <__sfp+0x18>
 80030c2:	2104      	movs	r1, #4
 80030c4:	4638      	mov	r0, r7
 80030c6:	f7ff ff9f 	bl	8003008 <__sfmoreglue>
 80030ca:	6030      	str	r0, [r6, #0]
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d1f1      	bne.n	80030b4 <__sfp+0x20>
 80030d0:	230c      	movs	r3, #12
 80030d2:	4604      	mov	r4, r0
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	4620      	mov	r0, r4
 80030d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <__sfp+0x74>)
 80030dc:	6665      	str	r5, [r4, #100]	; 0x64
 80030de:	e9c4 5500 	strd	r5, r5, [r4]
 80030e2:	60a5      	str	r5, [r4, #8]
 80030e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80030e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80030ec:	2208      	movs	r2, #8
 80030ee:	4629      	mov	r1, r5
 80030f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80030f4:	f7ff ff3e 	bl	8002f74 <memset>
 80030f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80030fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003100:	e7e9      	b.n	80030d6 <__sfp+0x42>
 8003102:	bf00      	nop
 8003104:	08003dc4 	.word	0x08003dc4
 8003108:	ffff0001 	.word	0xffff0001

0800310c <_fwalk_reent>:
 800310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003110:	4680      	mov	r8, r0
 8003112:	4689      	mov	r9, r1
 8003114:	2600      	movs	r6, #0
 8003116:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800311a:	b914      	cbnz	r4, 8003122 <_fwalk_reent+0x16>
 800311c:	4630      	mov	r0, r6
 800311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003122:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003126:	3f01      	subs	r7, #1
 8003128:	d501      	bpl.n	800312e <_fwalk_reent+0x22>
 800312a:	6824      	ldr	r4, [r4, #0]
 800312c:	e7f5      	b.n	800311a <_fwalk_reent+0xe>
 800312e:	89ab      	ldrh	r3, [r5, #12]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d907      	bls.n	8003144 <_fwalk_reent+0x38>
 8003134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003138:	3301      	adds	r3, #1
 800313a:	d003      	beq.n	8003144 <_fwalk_reent+0x38>
 800313c:	4629      	mov	r1, r5
 800313e:	4640      	mov	r0, r8
 8003140:	47c8      	blx	r9
 8003142:	4306      	orrs	r6, r0
 8003144:	3568      	adds	r5, #104	; 0x68
 8003146:	e7ee      	b.n	8003126 <_fwalk_reent+0x1a>

08003148 <_malloc_r>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	1ccd      	adds	r5, r1, #3
 800314c:	f025 0503 	bic.w	r5, r5, #3
 8003150:	3508      	adds	r5, #8
 8003152:	2d0c      	cmp	r5, #12
 8003154:	bf38      	it	cc
 8003156:	250c      	movcc	r5, #12
 8003158:	2d00      	cmp	r5, #0
 800315a:	4606      	mov	r6, r0
 800315c:	db01      	blt.n	8003162 <_malloc_r+0x1a>
 800315e:	42a9      	cmp	r1, r5
 8003160:	d903      	bls.n	800316a <_malloc_r+0x22>
 8003162:	230c      	movs	r3, #12
 8003164:	6033      	str	r3, [r6, #0]
 8003166:	2000      	movs	r0, #0
 8003168:	bd70      	pop	{r4, r5, r6, pc}
 800316a:	f000 fd77 	bl	8003c5c <__malloc_lock>
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <_malloc_r+0xac>)
 8003170:	6814      	ldr	r4, [r2, #0]
 8003172:	4621      	mov	r1, r4
 8003174:	b991      	cbnz	r1, 800319c <_malloc_r+0x54>
 8003176:	4c20      	ldr	r4, [pc, #128]	; (80031f8 <_malloc_r+0xb0>)
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	b91b      	cbnz	r3, 8003184 <_malloc_r+0x3c>
 800317c:	4630      	mov	r0, r6
 800317e:	f000 fb03 	bl	8003788 <_sbrk_r>
 8003182:	6020      	str	r0, [r4, #0]
 8003184:	4629      	mov	r1, r5
 8003186:	4630      	mov	r0, r6
 8003188:	f000 fafe 	bl	8003788 <_sbrk_r>
 800318c:	1c43      	adds	r3, r0, #1
 800318e:	d124      	bne.n	80031da <_malloc_r+0x92>
 8003190:	230c      	movs	r3, #12
 8003192:	4630      	mov	r0, r6
 8003194:	6033      	str	r3, [r6, #0]
 8003196:	f000 fd62 	bl	8003c5e <__malloc_unlock>
 800319a:	e7e4      	b.n	8003166 <_malloc_r+0x1e>
 800319c:	680b      	ldr	r3, [r1, #0]
 800319e:	1b5b      	subs	r3, r3, r5
 80031a0:	d418      	bmi.n	80031d4 <_malloc_r+0x8c>
 80031a2:	2b0b      	cmp	r3, #11
 80031a4:	d90f      	bls.n	80031c6 <_malloc_r+0x7e>
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	18cc      	adds	r4, r1, r3
 80031aa:	50cd      	str	r5, [r1, r3]
 80031ac:	4630      	mov	r0, r6
 80031ae:	f000 fd56 	bl	8003c5e <__malloc_unlock>
 80031b2:	f104 000b 	add.w	r0, r4, #11
 80031b6:	1d23      	adds	r3, r4, #4
 80031b8:	f020 0007 	bic.w	r0, r0, #7
 80031bc:	1ac3      	subs	r3, r0, r3
 80031be:	d0d3      	beq.n	8003168 <_malloc_r+0x20>
 80031c0:	425a      	negs	r2, r3
 80031c2:	50e2      	str	r2, [r4, r3]
 80031c4:	e7d0      	b.n	8003168 <_malloc_r+0x20>
 80031c6:	684b      	ldr	r3, [r1, #4]
 80031c8:	428c      	cmp	r4, r1
 80031ca:	bf16      	itet	ne
 80031cc:	6063      	strne	r3, [r4, #4]
 80031ce:	6013      	streq	r3, [r2, #0]
 80031d0:	460c      	movne	r4, r1
 80031d2:	e7eb      	b.n	80031ac <_malloc_r+0x64>
 80031d4:	460c      	mov	r4, r1
 80031d6:	6849      	ldr	r1, [r1, #4]
 80031d8:	e7cc      	b.n	8003174 <_malloc_r+0x2c>
 80031da:	1cc4      	adds	r4, r0, #3
 80031dc:	f024 0403 	bic.w	r4, r4, #3
 80031e0:	42a0      	cmp	r0, r4
 80031e2:	d005      	beq.n	80031f0 <_malloc_r+0xa8>
 80031e4:	1a21      	subs	r1, r4, r0
 80031e6:	4630      	mov	r0, r6
 80031e8:	f000 face 	bl	8003788 <_sbrk_r>
 80031ec:	3001      	adds	r0, #1
 80031ee:	d0cf      	beq.n	8003190 <_malloc_r+0x48>
 80031f0:	6025      	str	r5, [r4, #0]
 80031f2:	e7db      	b.n	80031ac <_malloc_r+0x64>
 80031f4:	20000090 	.word	0x20000090
 80031f8:	20000094 	.word	0x20000094

080031fc <__sfputc_r>:
 80031fc:	6893      	ldr	r3, [r2, #8]
 80031fe:	b410      	push	{r4}
 8003200:	3b01      	subs	r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	6093      	str	r3, [r2, #8]
 8003206:	da07      	bge.n	8003218 <__sfputc_r+0x1c>
 8003208:	6994      	ldr	r4, [r2, #24]
 800320a:	42a3      	cmp	r3, r4
 800320c:	db01      	blt.n	8003212 <__sfputc_r+0x16>
 800320e:	290a      	cmp	r1, #10
 8003210:	d102      	bne.n	8003218 <__sfputc_r+0x1c>
 8003212:	bc10      	pop	{r4}
 8003214:	f000 bb0c 	b.w	8003830 <__swbuf_r>
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	1c58      	adds	r0, r3, #1
 800321c:	6010      	str	r0, [r2, #0]
 800321e:	7019      	strb	r1, [r3, #0]
 8003220:	4608      	mov	r0, r1
 8003222:	bc10      	pop	{r4}
 8003224:	4770      	bx	lr

08003226 <__sfputs_r>:
 8003226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003228:	4606      	mov	r6, r0
 800322a:	460f      	mov	r7, r1
 800322c:	4614      	mov	r4, r2
 800322e:	18d5      	adds	r5, r2, r3
 8003230:	42ac      	cmp	r4, r5
 8003232:	d101      	bne.n	8003238 <__sfputs_r+0x12>
 8003234:	2000      	movs	r0, #0
 8003236:	e007      	b.n	8003248 <__sfputs_r+0x22>
 8003238:	463a      	mov	r2, r7
 800323a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800323e:	4630      	mov	r0, r6
 8003240:	f7ff ffdc 	bl	80031fc <__sfputc_r>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d1f3      	bne.n	8003230 <__sfputs_r+0xa>
 8003248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800324c <_vfiprintf_r>:
 800324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003250:	460c      	mov	r4, r1
 8003252:	b09d      	sub	sp, #116	; 0x74
 8003254:	4617      	mov	r7, r2
 8003256:	461d      	mov	r5, r3
 8003258:	4606      	mov	r6, r0
 800325a:	b118      	cbz	r0, 8003264 <_vfiprintf_r+0x18>
 800325c:	6983      	ldr	r3, [r0, #24]
 800325e:	b90b      	cbnz	r3, 8003264 <_vfiprintf_r+0x18>
 8003260:	f7ff fee8 	bl	8003034 <__sinit>
 8003264:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <_vfiprintf_r+0x20c>)
 8003266:	429c      	cmp	r4, r3
 8003268:	d158      	bne.n	800331c <_vfiprintf_r+0xd0>
 800326a:	6874      	ldr	r4, [r6, #4]
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	0718      	lsls	r0, r3, #28
 8003270:	d55e      	bpl.n	8003330 <_vfiprintf_r+0xe4>
 8003272:	6923      	ldr	r3, [r4, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05b      	beq.n	8003330 <_vfiprintf_r+0xe4>
 8003278:	2300      	movs	r3, #0
 800327a:	9309      	str	r3, [sp, #36]	; 0x24
 800327c:	2320      	movs	r3, #32
 800327e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003282:	2330      	movs	r3, #48	; 0x30
 8003284:	f04f 0b01 	mov.w	fp, #1
 8003288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800328c:	9503      	str	r5, [sp, #12]
 800328e:	46b8      	mov	r8, r7
 8003290:	4645      	mov	r5, r8
 8003292:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003296:	b10b      	cbz	r3, 800329c <_vfiprintf_r+0x50>
 8003298:	2b25      	cmp	r3, #37	; 0x25
 800329a:	d154      	bne.n	8003346 <_vfiprintf_r+0xfa>
 800329c:	ebb8 0a07 	subs.w	sl, r8, r7
 80032a0:	d00b      	beq.n	80032ba <_vfiprintf_r+0x6e>
 80032a2:	4653      	mov	r3, sl
 80032a4:	463a      	mov	r2, r7
 80032a6:	4621      	mov	r1, r4
 80032a8:	4630      	mov	r0, r6
 80032aa:	f7ff ffbc 	bl	8003226 <__sfputs_r>
 80032ae:	3001      	adds	r0, #1
 80032b0:	f000 80c2 	beq.w	8003438 <_vfiprintf_r+0x1ec>
 80032b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032b6:	4453      	add	r3, sl
 80032b8:	9309      	str	r3, [sp, #36]	; 0x24
 80032ba:	f898 3000 	ldrb.w	r3, [r8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80ba 	beq.w	8003438 <_vfiprintf_r+0x1ec>
 80032c4:	2300      	movs	r3, #0
 80032c6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ce:	9304      	str	r3, [sp, #16]
 80032d0:	9307      	str	r3, [sp, #28]
 80032d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032d6:	931a      	str	r3, [sp, #104]	; 0x68
 80032d8:	46a8      	mov	r8, r5
 80032da:	2205      	movs	r2, #5
 80032dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80032e0:	485e      	ldr	r0, [pc, #376]	; (800345c <_vfiprintf_r+0x210>)
 80032e2:	f000 fcad 	bl	8003c40 <memchr>
 80032e6:	9b04      	ldr	r3, [sp, #16]
 80032e8:	bb78      	cbnz	r0, 800334a <_vfiprintf_r+0xfe>
 80032ea:	06d9      	lsls	r1, r3, #27
 80032ec:	bf44      	itt	mi
 80032ee:	2220      	movmi	r2, #32
 80032f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032f4:	071a      	lsls	r2, r3, #28
 80032f6:	bf44      	itt	mi
 80032f8:	222b      	movmi	r2, #43	; 0x2b
 80032fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032fe:	782a      	ldrb	r2, [r5, #0]
 8003300:	2a2a      	cmp	r2, #42	; 0x2a
 8003302:	d02a      	beq.n	800335a <_vfiprintf_r+0x10e>
 8003304:	46a8      	mov	r8, r5
 8003306:	2000      	movs	r0, #0
 8003308:	250a      	movs	r5, #10
 800330a:	9a07      	ldr	r2, [sp, #28]
 800330c:	4641      	mov	r1, r8
 800330e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003312:	3b30      	subs	r3, #48	; 0x30
 8003314:	2b09      	cmp	r3, #9
 8003316:	d969      	bls.n	80033ec <_vfiprintf_r+0x1a0>
 8003318:	b360      	cbz	r0, 8003374 <_vfiprintf_r+0x128>
 800331a:	e024      	b.n	8003366 <_vfiprintf_r+0x11a>
 800331c:	4b50      	ldr	r3, [pc, #320]	; (8003460 <_vfiprintf_r+0x214>)
 800331e:	429c      	cmp	r4, r3
 8003320:	d101      	bne.n	8003326 <_vfiprintf_r+0xda>
 8003322:	68b4      	ldr	r4, [r6, #8]
 8003324:	e7a2      	b.n	800326c <_vfiprintf_r+0x20>
 8003326:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <_vfiprintf_r+0x218>)
 8003328:	429c      	cmp	r4, r3
 800332a:	bf08      	it	eq
 800332c:	68f4      	ldreq	r4, [r6, #12]
 800332e:	e79d      	b.n	800326c <_vfiprintf_r+0x20>
 8003330:	4621      	mov	r1, r4
 8003332:	4630      	mov	r0, r6
 8003334:	f000 fae0 	bl	80038f8 <__swsetup_r>
 8003338:	2800      	cmp	r0, #0
 800333a:	d09d      	beq.n	8003278 <_vfiprintf_r+0x2c>
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	b01d      	add	sp, #116	; 0x74
 8003342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003346:	46a8      	mov	r8, r5
 8003348:	e7a2      	b.n	8003290 <_vfiprintf_r+0x44>
 800334a:	4a44      	ldr	r2, [pc, #272]	; (800345c <_vfiprintf_r+0x210>)
 800334c:	4645      	mov	r5, r8
 800334e:	1a80      	subs	r0, r0, r2
 8003350:	fa0b f000 	lsl.w	r0, fp, r0
 8003354:	4318      	orrs	r0, r3
 8003356:	9004      	str	r0, [sp, #16]
 8003358:	e7be      	b.n	80032d8 <_vfiprintf_r+0x8c>
 800335a:	9a03      	ldr	r2, [sp, #12]
 800335c:	1d11      	adds	r1, r2, #4
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	9103      	str	r1, [sp, #12]
 8003362:	2a00      	cmp	r2, #0
 8003364:	db01      	blt.n	800336a <_vfiprintf_r+0x11e>
 8003366:	9207      	str	r2, [sp, #28]
 8003368:	e004      	b.n	8003374 <_vfiprintf_r+0x128>
 800336a:	4252      	negs	r2, r2
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	9207      	str	r2, [sp, #28]
 8003372:	9304      	str	r3, [sp, #16]
 8003374:	f898 3000 	ldrb.w	r3, [r8]
 8003378:	2b2e      	cmp	r3, #46	; 0x2e
 800337a:	d10e      	bne.n	800339a <_vfiprintf_r+0x14e>
 800337c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003380:	2b2a      	cmp	r3, #42	; 0x2a
 8003382:	d138      	bne.n	80033f6 <_vfiprintf_r+0x1aa>
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	f108 0802 	add.w	r8, r8, #2
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	9203      	str	r2, [sp, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	bfb8      	it	lt
 8003394:	f04f 33ff 	movlt.w	r3, #4294967295
 8003398:	9305      	str	r3, [sp, #20]
 800339a:	4d33      	ldr	r5, [pc, #204]	; (8003468 <_vfiprintf_r+0x21c>)
 800339c:	2203      	movs	r2, #3
 800339e:	f898 1000 	ldrb.w	r1, [r8]
 80033a2:	4628      	mov	r0, r5
 80033a4:	f000 fc4c 	bl	8003c40 <memchr>
 80033a8:	b140      	cbz	r0, 80033bc <_vfiprintf_r+0x170>
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	1b40      	subs	r0, r0, r5
 80033ae:	fa03 f000 	lsl.w	r0, r3, r0
 80033b2:	9b04      	ldr	r3, [sp, #16]
 80033b4:	f108 0801 	add.w	r8, r8, #1
 80033b8:	4303      	orrs	r3, r0
 80033ba:	9304      	str	r3, [sp, #16]
 80033bc:	f898 1000 	ldrb.w	r1, [r8]
 80033c0:	2206      	movs	r2, #6
 80033c2:	482a      	ldr	r0, [pc, #168]	; (800346c <_vfiprintf_r+0x220>)
 80033c4:	f108 0701 	add.w	r7, r8, #1
 80033c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033cc:	f000 fc38 	bl	8003c40 <memchr>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d037      	beq.n	8003444 <_vfiprintf_r+0x1f8>
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <_vfiprintf_r+0x224>)
 80033d6:	bb1b      	cbnz	r3, 8003420 <_vfiprintf_r+0x1d4>
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	3307      	adds	r3, #7
 80033dc:	f023 0307 	bic.w	r3, r3, #7
 80033e0:	3308      	adds	r3, #8
 80033e2:	9303      	str	r3, [sp, #12]
 80033e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e6:	444b      	add	r3, r9
 80033e8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ea:	e750      	b.n	800328e <_vfiprintf_r+0x42>
 80033ec:	fb05 3202 	mla	r2, r5, r2, r3
 80033f0:	2001      	movs	r0, #1
 80033f2:	4688      	mov	r8, r1
 80033f4:	e78a      	b.n	800330c <_vfiprintf_r+0xc0>
 80033f6:	2300      	movs	r3, #0
 80033f8:	250a      	movs	r5, #10
 80033fa:	4619      	mov	r1, r3
 80033fc:	f108 0801 	add.w	r8, r8, #1
 8003400:	9305      	str	r3, [sp, #20]
 8003402:	4640      	mov	r0, r8
 8003404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003408:	3a30      	subs	r2, #48	; 0x30
 800340a:	2a09      	cmp	r2, #9
 800340c:	d903      	bls.n	8003416 <_vfiprintf_r+0x1ca>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0c3      	beq.n	800339a <_vfiprintf_r+0x14e>
 8003412:	9105      	str	r1, [sp, #20]
 8003414:	e7c1      	b.n	800339a <_vfiprintf_r+0x14e>
 8003416:	fb05 2101 	mla	r1, r5, r1, r2
 800341a:	2301      	movs	r3, #1
 800341c:	4680      	mov	r8, r0
 800341e:	e7f0      	b.n	8003402 <_vfiprintf_r+0x1b6>
 8003420:	ab03      	add	r3, sp, #12
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	4622      	mov	r2, r4
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <_vfiprintf_r+0x228>)
 8003428:	a904      	add	r1, sp, #16
 800342a:	4630      	mov	r0, r6
 800342c:	f3af 8000 	nop.w
 8003430:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003434:	4681      	mov	r9, r0
 8003436:	d1d5      	bne.n	80033e4 <_vfiprintf_r+0x198>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	065b      	lsls	r3, r3, #25
 800343c:	f53f af7e 	bmi.w	800333c <_vfiprintf_r+0xf0>
 8003440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003442:	e77d      	b.n	8003340 <_vfiprintf_r+0xf4>
 8003444:	ab03      	add	r3, sp, #12
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4622      	mov	r2, r4
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <_vfiprintf_r+0x228>)
 800344c:	a904      	add	r1, sp, #16
 800344e:	4630      	mov	r0, r6
 8003450:	f000 f888 	bl	8003564 <_printf_i>
 8003454:	e7ec      	b.n	8003430 <_vfiprintf_r+0x1e4>
 8003456:	bf00      	nop
 8003458:	08003de8 	.word	0x08003de8
 800345c:	08003e28 	.word	0x08003e28
 8003460:	08003e08 	.word	0x08003e08
 8003464:	08003dc8 	.word	0x08003dc8
 8003468:	08003e2e 	.word	0x08003e2e
 800346c:	08003e32 	.word	0x08003e32
 8003470:	00000000 	.word	0x00000000
 8003474:	08003227 	.word	0x08003227

08003478 <_printf_common>:
 8003478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800347c:	4691      	mov	r9, r2
 800347e:	461f      	mov	r7, r3
 8003480:	688a      	ldr	r2, [r1, #8]
 8003482:	690b      	ldr	r3, [r1, #16]
 8003484:	4606      	mov	r6, r0
 8003486:	4293      	cmp	r3, r2
 8003488:	bfb8      	it	lt
 800348a:	4613      	movlt	r3, r2
 800348c:	f8c9 3000 	str.w	r3, [r9]
 8003490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003494:	460c      	mov	r4, r1
 8003496:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800349a:	b112      	cbz	r2, 80034a2 <_printf_common+0x2a>
 800349c:	3301      	adds	r3, #1
 800349e:	f8c9 3000 	str.w	r3, [r9]
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	0699      	lsls	r1, r3, #26
 80034a6:	bf42      	ittt	mi
 80034a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034ac:	3302      	addmi	r3, #2
 80034ae:	f8c9 3000 	strmi.w	r3, [r9]
 80034b2:	6825      	ldr	r5, [r4, #0]
 80034b4:	f015 0506 	ands.w	r5, r5, #6
 80034b8:	d107      	bne.n	80034ca <_printf_common+0x52>
 80034ba:	f104 0a19 	add.w	sl, r4, #25
 80034be:	68e3      	ldr	r3, [r4, #12]
 80034c0:	f8d9 2000 	ldr.w	r2, [r9]
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	42ab      	cmp	r3, r5
 80034c8:	dc29      	bgt.n	800351e <_printf_common+0xa6>
 80034ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	3300      	adds	r3, #0
 80034d2:	bf18      	it	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	0692      	lsls	r2, r2, #26
 80034d8:	d42e      	bmi.n	8003538 <_printf_common+0xc0>
 80034da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034de:	4639      	mov	r1, r7
 80034e0:	4630      	mov	r0, r6
 80034e2:	47c0      	blx	r8
 80034e4:	3001      	adds	r0, #1
 80034e6:	d021      	beq.n	800352c <_printf_common+0xb4>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	68e5      	ldr	r5, [r4, #12]
 80034ec:	f003 0306 	and.w	r3, r3, #6
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	bf18      	it	ne
 80034f4:	2500      	movne	r5, #0
 80034f6:	f8d9 2000 	ldr.w	r2, [r9]
 80034fa:	f04f 0900 	mov.w	r9, #0
 80034fe:	bf08      	it	eq
 8003500:	1aad      	subeq	r5, r5, r2
 8003502:	68a3      	ldr	r3, [r4, #8]
 8003504:	6922      	ldr	r2, [r4, #16]
 8003506:	bf08      	it	eq
 8003508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800350c:	4293      	cmp	r3, r2
 800350e:	bfc4      	itt	gt
 8003510:	1a9b      	subgt	r3, r3, r2
 8003512:	18ed      	addgt	r5, r5, r3
 8003514:	341a      	adds	r4, #26
 8003516:	454d      	cmp	r5, r9
 8003518:	d11a      	bne.n	8003550 <_printf_common+0xd8>
 800351a:	2000      	movs	r0, #0
 800351c:	e008      	b.n	8003530 <_printf_common+0xb8>
 800351e:	2301      	movs	r3, #1
 8003520:	4652      	mov	r2, sl
 8003522:	4639      	mov	r1, r7
 8003524:	4630      	mov	r0, r6
 8003526:	47c0      	blx	r8
 8003528:	3001      	adds	r0, #1
 800352a:	d103      	bne.n	8003534 <_printf_common+0xbc>
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003534:	3501      	adds	r5, #1
 8003536:	e7c2      	b.n	80034be <_printf_common+0x46>
 8003538:	2030      	movs	r0, #48	; 0x30
 800353a:	18e1      	adds	r1, r4, r3
 800353c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003546:	4422      	add	r2, r4
 8003548:	3302      	adds	r3, #2
 800354a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800354e:	e7c4      	b.n	80034da <_printf_common+0x62>
 8003550:	2301      	movs	r3, #1
 8003552:	4622      	mov	r2, r4
 8003554:	4639      	mov	r1, r7
 8003556:	4630      	mov	r0, r6
 8003558:	47c0      	blx	r8
 800355a:	3001      	adds	r0, #1
 800355c:	d0e6      	beq.n	800352c <_printf_common+0xb4>
 800355e:	f109 0901 	add.w	r9, r9, #1
 8003562:	e7d8      	b.n	8003516 <_printf_common+0x9e>

08003564 <_printf_i>:
 8003564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003568:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800356c:	460c      	mov	r4, r1
 800356e:	7e09      	ldrb	r1, [r1, #24]
 8003570:	b085      	sub	sp, #20
 8003572:	296e      	cmp	r1, #110	; 0x6e
 8003574:	4617      	mov	r7, r2
 8003576:	4606      	mov	r6, r0
 8003578:	4698      	mov	r8, r3
 800357a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800357c:	f000 80b3 	beq.w	80036e6 <_printf_i+0x182>
 8003580:	d822      	bhi.n	80035c8 <_printf_i+0x64>
 8003582:	2963      	cmp	r1, #99	; 0x63
 8003584:	d036      	beq.n	80035f4 <_printf_i+0x90>
 8003586:	d80a      	bhi.n	800359e <_printf_i+0x3a>
 8003588:	2900      	cmp	r1, #0
 800358a:	f000 80b9 	beq.w	8003700 <_printf_i+0x19c>
 800358e:	2958      	cmp	r1, #88	; 0x58
 8003590:	f000 8083 	beq.w	800369a <_printf_i+0x136>
 8003594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003598:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800359c:	e032      	b.n	8003604 <_printf_i+0xa0>
 800359e:	2964      	cmp	r1, #100	; 0x64
 80035a0:	d001      	beq.n	80035a6 <_printf_i+0x42>
 80035a2:	2969      	cmp	r1, #105	; 0x69
 80035a4:	d1f6      	bne.n	8003594 <_printf_i+0x30>
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	0605      	lsls	r5, r0, #24
 80035ac:	f103 0104 	add.w	r1, r3, #4
 80035b0:	d52a      	bpl.n	8003608 <_printf_i+0xa4>
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da03      	bge.n	80035c2 <_printf_i+0x5e>
 80035ba:	222d      	movs	r2, #45	; 0x2d
 80035bc:	425b      	negs	r3, r3
 80035be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035c2:	486f      	ldr	r0, [pc, #444]	; (8003780 <_printf_i+0x21c>)
 80035c4:	220a      	movs	r2, #10
 80035c6:	e039      	b.n	800363c <_printf_i+0xd8>
 80035c8:	2973      	cmp	r1, #115	; 0x73
 80035ca:	f000 809d 	beq.w	8003708 <_printf_i+0x1a4>
 80035ce:	d808      	bhi.n	80035e2 <_printf_i+0x7e>
 80035d0:	296f      	cmp	r1, #111	; 0x6f
 80035d2:	d020      	beq.n	8003616 <_printf_i+0xb2>
 80035d4:	2970      	cmp	r1, #112	; 0x70
 80035d6:	d1dd      	bne.n	8003594 <_printf_i+0x30>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	f043 0320 	orr.w	r3, r3, #32
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	e003      	b.n	80035ea <_printf_i+0x86>
 80035e2:	2975      	cmp	r1, #117	; 0x75
 80035e4:	d017      	beq.n	8003616 <_printf_i+0xb2>
 80035e6:	2978      	cmp	r1, #120	; 0x78
 80035e8:	d1d4      	bne.n	8003594 <_printf_i+0x30>
 80035ea:	2378      	movs	r3, #120	; 0x78
 80035ec:	4865      	ldr	r0, [pc, #404]	; (8003784 <_printf_i+0x220>)
 80035ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035f2:	e055      	b.n	80036a0 <_printf_i+0x13c>
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fa:	1d19      	adds	r1, r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6011      	str	r1, [r2, #0]
 8003600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003604:	2301      	movs	r3, #1
 8003606:	e08c      	b.n	8003722 <_printf_i+0x1be>
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800360e:	6011      	str	r1, [r2, #0]
 8003610:	bf18      	it	ne
 8003612:	b21b      	sxthne	r3, r3
 8003614:	e7cf      	b.n	80035b6 <_printf_i+0x52>
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	6825      	ldr	r5, [r4, #0]
 800361a:	1d18      	adds	r0, r3, #4
 800361c:	6010      	str	r0, [r2, #0]
 800361e:	0628      	lsls	r0, r5, #24
 8003620:	d501      	bpl.n	8003626 <_printf_i+0xc2>
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	e002      	b.n	800362c <_printf_i+0xc8>
 8003626:	0668      	lsls	r0, r5, #25
 8003628:	d5fb      	bpl.n	8003622 <_printf_i+0xbe>
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	296f      	cmp	r1, #111	; 0x6f
 800362e:	bf14      	ite	ne
 8003630:	220a      	movne	r2, #10
 8003632:	2208      	moveq	r2, #8
 8003634:	4852      	ldr	r0, [pc, #328]	; (8003780 <_printf_i+0x21c>)
 8003636:	2100      	movs	r1, #0
 8003638:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800363c:	6865      	ldr	r5, [r4, #4]
 800363e:	2d00      	cmp	r5, #0
 8003640:	60a5      	str	r5, [r4, #8]
 8003642:	f2c0 8095 	blt.w	8003770 <_printf_i+0x20c>
 8003646:	6821      	ldr	r1, [r4, #0]
 8003648:	f021 0104 	bic.w	r1, r1, #4
 800364c:	6021      	str	r1, [r4, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13d      	bne.n	80036ce <_printf_i+0x16a>
 8003652:	2d00      	cmp	r5, #0
 8003654:	f040 808e 	bne.w	8003774 <_printf_i+0x210>
 8003658:	4665      	mov	r5, ip
 800365a:	2a08      	cmp	r2, #8
 800365c:	d10b      	bne.n	8003676 <_printf_i+0x112>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d508      	bpl.n	8003676 <_printf_i+0x112>
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	6862      	ldr	r2, [r4, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	bfde      	ittt	le
 800366c:	2330      	movle	r3, #48	; 0x30
 800366e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003672:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003676:	ebac 0305 	sub.w	r3, ip, r5
 800367a:	6123      	str	r3, [r4, #16]
 800367c:	f8cd 8000 	str.w	r8, [sp]
 8003680:	463b      	mov	r3, r7
 8003682:	aa03      	add	r2, sp, #12
 8003684:	4621      	mov	r1, r4
 8003686:	4630      	mov	r0, r6
 8003688:	f7ff fef6 	bl	8003478 <_printf_common>
 800368c:	3001      	adds	r0, #1
 800368e:	d14d      	bne.n	800372c <_printf_i+0x1c8>
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	b005      	add	sp, #20
 8003696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800369a:	4839      	ldr	r0, [pc, #228]	; (8003780 <_printf_i+0x21c>)
 800369c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	6821      	ldr	r1, [r4, #0]
 80036a4:	1d1d      	adds	r5, r3, #4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6015      	str	r5, [r2, #0]
 80036aa:	060a      	lsls	r2, r1, #24
 80036ac:	d50b      	bpl.n	80036c6 <_printf_i+0x162>
 80036ae:	07ca      	lsls	r2, r1, #31
 80036b0:	bf44      	itt	mi
 80036b2:	f041 0120 	orrmi.w	r1, r1, #32
 80036b6:	6021      	strmi	r1, [r4, #0]
 80036b8:	b91b      	cbnz	r3, 80036c2 <_printf_i+0x15e>
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	f022 0220 	bic.w	r2, r2, #32
 80036c0:	6022      	str	r2, [r4, #0]
 80036c2:	2210      	movs	r2, #16
 80036c4:	e7b7      	b.n	8003636 <_printf_i+0xd2>
 80036c6:	064d      	lsls	r5, r1, #25
 80036c8:	bf48      	it	mi
 80036ca:	b29b      	uxthmi	r3, r3
 80036cc:	e7ef      	b.n	80036ae <_printf_i+0x14a>
 80036ce:	4665      	mov	r5, ip
 80036d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80036d4:	fb02 3311 	mls	r3, r2, r1, r3
 80036d8:	5cc3      	ldrb	r3, [r0, r3]
 80036da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036de:	460b      	mov	r3, r1
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d1f5      	bne.n	80036d0 <_printf_i+0x16c>
 80036e4:	e7b9      	b.n	800365a <_printf_i+0xf6>
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	6825      	ldr	r5, [r4, #0]
 80036ea:	1d18      	adds	r0, r3, #4
 80036ec:	6961      	ldr	r1, [r4, #20]
 80036ee:	6010      	str	r0, [r2, #0]
 80036f0:	0628      	lsls	r0, r5, #24
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	d501      	bpl.n	80036fa <_printf_i+0x196>
 80036f6:	6019      	str	r1, [r3, #0]
 80036f8:	e002      	b.n	8003700 <_printf_i+0x19c>
 80036fa:	066a      	lsls	r2, r5, #25
 80036fc:	d5fb      	bpl.n	80036f6 <_printf_i+0x192>
 80036fe:	8019      	strh	r1, [r3, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	4665      	mov	r5, ip
 8003704:	6123      	str	r3, [r4, #16]
 8003706:	e7b9      	b.n	800367c <_printf_i+0x118>
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	1d19      	adds	r1, r3, #4
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	681d      	ldr	r5, [r3, #0]
 8003710:	6862      	ldr	r2, [r4, #4]
 8003712:	2100      	movs	r1, #0
 8003714:	4628      	mov	r0, r5
 8003716:	f000 fa93 	bl	8003c40 <memchr>
 800371a:	b108      	cbz	r0, 8003720 <_printf_i+0x1bc>
 800371c:	1b40      	subs	r0, r0, r5
 800371e:	6060      	str	r0, [r4, #4]
 8003720:	6863      	ldr	r3, [r4, #4]
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	2300      	movs	r3, #0
 8003726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372a:	e7a7      	b.n	800367c <_printf_i+0x118>
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	462a      	mov	r2, r5
 8003730:	4639      	mov	r1, r7
 8003732:	4630      	mov	r0, r6
 8003734:	47c0      	blx	r8
 8003736:	3001      	adds	r0, #1
 8003738:	d0aa      	beq.n	8003690 <_printf_i+0x12c>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	079b      	lsls	r3, r3, #30
 800373e:	d413      	bmi.n	8003768 <_printf_i+0x204>
 8003740:	68e0      	ldr	r0, [r4, #12]
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	4298      	cmp	r0, r3
 8003746:	bfb8      	it	lt
 8003748:	4618      	movlt	r0, r3
 800374a:	e7a3      	b.n	8003694 <_printf_i+0x130>
 800374c:	2301      	movs	r3, #1
 800374e:	464a      	mov	r2, r9
 8003750:	4639      	mov	r1, r7
 8003752:	4630      	mov	r0, r6
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d09a      	beq.n	8003690 <_printf_i+0x12c>
 800375a:	3501      	adds	r5, #1
 800375c:	68e3      	ldr	r3, [r4, #12]
 800375e:	9a03      	ldr	r2, [sp, #12]
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	42ab      	cmp	r3, r5
 8003764:	dcf2      	bgt.n	800374c <_printf_i+0x1e8>
 8003766:	e7eb      	b.n	8003740 <_printf_i+0x1dc>
 8003768:	2500      	movs	r5, #0
 800376a:	f104 0919 	add.w	r9, r4, #25
 800376e:	e7f5      	b.n	800375c <_printf_i+0x1f8>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ac      	bne.n	80036ce <_printf_i+0x16a>
 8003774:	7803      	ldrb	r3, [r0, #0]
 8003776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800377a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800377e:	e76c      	b.n	800365a <_printf_i+0xf6>
 8003780:	08003e39 	.word	0x08003e39
 8003784:	08003e4a 	.word	0x08003e4a

08003788 <_sbrk_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	2300      	movs	r3, #0
 800378c:	4c05      	ldr	r4, [pc, #20]	; (80037a4 <_sbrk_r+0x1c>)
 800378e:	4605      	mov	r5, r0
 8003790:	4608      	mov	r0, r1
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	f7fd f822 	bl	80007dc <_sbrk>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_sbrk_r+0x1a>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_sbrk_r+0x1a>
 80037a0:	602b      	str	r3, [r5, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	20000130 	.word	0x20000130

080037a8 <__sread>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	460c      	mov	r4, r1
 80037ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b0:	f000 faa2 	bl	8003cf8 <_read_r>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	bfab      	itete	ge
 80037b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037ba:	89a3      	ldrhlt	r3, [r4, #12]
 80037bc:	181b      	addge	r3, r3, r0
 80037be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037c2:	bfac      	ite	ge
 80037c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037c6:	81a3      	strhlt	r3, [r4, #12]
 80037c8:	bd10      	pop	{r4, pc}

080037ca <__swrite>:
 80037ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ce:	461f      	mov	r7, r3
 80037d0:	898b      	ldrh	r3, [r1, #12]
 80037d2:	4605      	mov	r5, r0
 80037d4:	05db      	lsls	r3, r3, #23
 80037d6:	460c      	mov	r4, r1
 80037d8:	4616      	mov	r6, r2
 80037da:	d505      	bpl.n	80037e8 <__swrite+0x1e>
 80037dc:	2302      	movs	r3, #2
 80037de:	2200      	movs	r2, #0
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	f000 f9b6 	bl	8003b54 <_lseek_r>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	4632      	mov	r2, r6
 80037ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037f6:	463b      	mov	r3, r7
 80037f8:	4628      	mov	r0, r5
 80037fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037fe:	f000 b869 	b.w	80038d4 <_write_r>

08003802 <__sseek>:
 8003802:	b510      	push	{r4, lr}
 8003804:	460c      	mov	r4, r1
 8003806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380a:	f000 f9a3 	bl	8003b54 <_lseek_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	bf15      	itete	ne
 8003814:	6560      	strne	r0, [r4, #84]	; 0x54
 8003816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800381a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800381e:	81a3      	strheq	r3, [r4, #12]
 8003820:	bf18      	it	ne
 8003822:	81a3      	strhne	r3, [r4, #12]
 8003824:	bd10      	pop	{r4, pc}

08003826 <__sclose>:
 8003826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382a:	f000 b8d3 	b.w	80039d4 <_close_r>
	...

08003830 <__swbuf_r>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	460e      	mov	r6, r1
 8003834:	4614      	mov	r4, r2
 8003836:	4605      	mov	r5, r0
 8003838:	b118      	cbz	r0, 8003842 <__swbuf_r+0x12>
 800383a:	6983      	ldr	r3, [r0, #24]
 800383c:	b90b      	cbnz	r3, 8003842 <__swbuf_r+0x12>
 800383e:	f7ff fbf9 	bl	8003034 <__sinit>
 8003842:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <__swbuf_r+0x98>)
 8003844:	429c      	cmp	r4, r3
 8003846:	d12a      	bne.n	800389e <__swbuf_r+0x6e>
 8003848:	686c      	ldr	r4, [r5, #4]
 800384a:	69a3      	ldr	r3, [r4, #24]
 800384c:	60a3      	str	r3, [r4, #8]
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	071a      	lsls	r2, r3, #28
 8003852:	d52e      	bpl.n	80038b2 <__swbuf_r+0x82>
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	b363      	cbz	r3, 80038b2 <__swbuf_r+0x82>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	6820      	ldr	r0, [r4, #0]
 800385c:	b2f6      	uxtb	r6, r6
 800385e:	1ac0      	subs	r0, r0, r3
 8003860:	6963      	ldr	r3, [r4, #20]
 8003862:	4637      	mov	r7, r6
 8003864:	4283      	cmp	r3, r0
 8003866:	dc04      	bgt.n	8003872 <__swbuf_r+0x42>
 8003868:	4621      	mov	r1, r4
 800386a:	4628      	mov	r0, r5
 800386c:	f000 f948 	bl	8003b00 <_fflush_r>
 8003870:	bb28      	cbnz	r0, 80038be <__swbuf_r+0x8e>
 8003872:	68a3      	ldr	r3, [r4, #8]
 8003874:	3001      	adds	r0, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	60a3      	str	r3, [r4, #8]
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	6022      	str	r2, [r4, #0]
 8003880:	701e      	strb	r6, [r3, #0]
 8003882:	6963      	ldr	r3, [r4, #20]
 8003884:	4283      	cmp	r3, r0
 8003886:	d004      	beq.n	8003892 <__swbuf_r+0x62>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	07db      	lsls	r3, r3, #31
 800388c:	d519      	bpl.n	80038c2 <__swbuf_r+0x92>
 800388e:	2e0a      	cmp	r6, #10
 8003890:	d117      	bne.n	80038c2 <__swbuf_r+0x92>
 8003892:	4621      	mov	r1, r4
 8003894:	4628      	mov	r0, r5
 8003896:	f000 f933 	bl	8003b00 <_fflush_r>
 800389a:	b190      	cbz	r0, 80038c2 <__swbuf_r+0x92>
 800389c:	e00f      	b.n	80038be <__swbuf_r+0x8e>
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <__swbuf_r+0x9c>)
 80038a0:	429c      	cmp	r4, r3
 80038a2:	d101      	bne.n	80038a8 <__swbuf_r+0x78>
 80038a4:	68ac      	ldr	r4, [r5, #8]
 80038a6:	e7d0      	b.n	800384a <__swbuf_r+0x1a>
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <__swbuf_r+0xa0>)
 80038aa:	429c      	cmp	r4, r3
 80038ac:	bf08      	it	eq
 80038ae:	68ec      	ldreq	r4, [r5, #12]
 80038b0:	e7cb      	b.n	800384a <__swbuf_r+0x1a>
 80038b2:	4621      	mov	r1, r4
 80038b4:	4628      	mov	r0, r5
 80038b6:	f000 f81f 	bl	80038f8 <__swsetup_r>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d0cc      	beq.n	8003858 <__swbuf_r+0x28>
 80038be:	f04f 37ff 	mov.w	r7, #4294967295
 80038c2:	4638      	mov	r0, r7
 80038c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c6:	bf00      	nop
 80038c8:	08003de8 	.word	0x08003de8
 80038cc:	08003e08 	.word	0x08003e08
 80038d0:	08003dc8 	.word	0x08003dc8

080038d4 <_write_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	4605      	mov	r5, r0
 80038d8:	4608      	mov	r0, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	2200      	movs	r2, #0
 80038de:	4c05      	ldr	r4, [pc, #20]	; (80038f4 <_write_r+0x20>)
 80038e0:	6022      	str	r2, [r4, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f7fc ff2d 	bl	8000742 <_write>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d102      	bne.n	80038f2 <_write_r+0x1e>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	b103      	cbz	r3, 80038f2 <_write_r+0x1e>
 80038f0:	602b      	str	r3, [r5, #0]
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	20000130 	.word	0x20000130

080038f8 <__swsetup_r>:
 80038f8:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <__swsetup_r+0xcc>)
 80038fa:	b570      	push	{r4, r5, r6, lr}
 80038fc:	681d      	ldr	r5, [r3, #0]
 80038fe:	4606      	mov	r6, r0
 8003900:	460c      	mov	r4, r1
 8003902:	b125      	cbz	r5, 800390e <__swsetup_r+0x16>
 8003904:	69ab      	ldr	r3, [r5, #24]
 8003906:	b913      	cbnz	r3, 800390e <__swsetup_r+0x16>
 8003908:	4628      	mov	r0, r5
 800390a:	f7ff fb93 	bl	8003034 <__sinit>
 800390e:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <__swsetup_r+0xd0>)
 8003910:	429c      	cmp	r4, r3
 8003912:	d10f      	bne.n	8003934 <__swsetup_r+0x3c>
 8003914:	686c      	ldr	r4, [r5, #4]
 8003916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800391a:	b29a      	uxth	r2, r3
 800391c:	0715      	lsls	r5, r2, #28
 800391e:	d42c      	bmi.n	800397a <__swsetup_r+0x82>
 8003920:	06d0      	lsls	r0, r2, #27
 8003922:	d411      	bmi.n	8003948 <__swsetup_r+0x50>
 8003924:	2209      	movs	r2, #9
 8003926:	6032      	str	r2, [r6, #0]
 8003928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	f04f 30ff 	mov.w	r0, #4294967295
 8003932:	e03e      	b.n	80039b2 <__swsetup_r+0xba>
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <__swsetup_r+0xd4>)
 8003936:	429c      	cmp	r4, r3
 8003938:	d101      	bne.n	800393e <__swsetup_r+0x46>
 800393a:	68ac      	ldr	r4, [r5, #8]
 800393c:	e7eb      	b.n	8003916 <__swsetup_r+0x1e>
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <__swsetup_r+0xd8>)
 8003940:	429c      	cmp	r4, r3
 8003942:	bf08      	it	eq
 8003944:	68ec      	ldreq	r4, [r5, #12]
 8003946:	e7e6      	b.n	8003916 <__swsetup_r+0x1e>
 8003948:	0751      	lsls	r1, r2, #29
 800394a:	d512      	bpl.n	8003972 <__swsetup_r+0x7a>
 800394c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800394e:	b141      	cbz	r1, 8003962 <__swsetup_r+0x6a>
 8003950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003954:	4299      	cmp	r1, r3
 8003956:	d002      	beq.n	800395e <__swsetup_r+0x66>
 8003958:	4630      	mov	r0, r6
 800395a:	f000 f981 	bl	8003c60 <_free_r>
 800395e:	2300      	movs	r3, #0
 8003960:	6363      	str	r3, [r4, #52]	; 0x34
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003968:	81a3      	strh	r3, [r4, #12]
 800396a:	2300      	movs	r3, #0
 800396c:	6063      	str	r3, [r4, #4]
 800396e:	6923      	ldr	r3, [r4, #16]
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	6923      	ldr	r3, [r4, #16]
 800397c:	b94b      	cbnz	r3, 8003992 <__swsetup_r+0x9a>
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003988:	d003      	beq.n	8003992 <__swsetup_r+0x9a>
 800398a:	4621      	mov	r1, r4
 800398c:	4630      	mov	r0, r6
 800398e:	f000 f917 	bl	8003bc0 <__smakebuf_r>
 8003992:	89a2      	ldrh	r2, [r4, #12]
 8003994:	f012 0301 	ands.w	r3, r2, #1
 8003998:	d00c      	beq.n	80039b4 <__swsetup_r+0xbc>
 800399a:	2300      	movs	r3, #0
 800399c:	60a3      	str	r3, [r4, #8]
 800399e:	6963      	ldr	r3, [r4, #20]
 80039a0:	425b      	negs	r3, r3
 80039a2:	61a3      	str	r3, [r4, #24]
 80039a4:	6923      	ldr	r3, [r4, #16]
 80039a6:	b953      	cbnz	r3, 80039be <__swsetup_r+0xc6>
 80039a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80039b0:	d1ba      	bne.n	8003928 <__swsetup_r+0x30>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	0792      	lsls	r2, r2, #30
 80039b6:	bf58      	it	pl
 80039b8:	6963      	ldrpl	r3, [r4, #20]
 80039ba:	60a3      	str	r3, [r4, #8]
 80039bc:	e7f2      	b.n	80039a4 <__swsetup_r+0xac>
 80039be:	2000      	movs	r0, #0
 80039c0:	e7f7      	b.n	80039b2 <__swsetup_r+0xba>
 80039c2:	bf00      	nop
 80039c4:	2000000c 	.word	0x2000000c
 80039c8:	08003de8 	.word	0x08003de8
 80039cc:	08003e08 	.word	0x08003e08
 80039d0:	08003dc8 	.word	0x08003dc8

080039d4 <_close_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	2300      	movs	r3, #0
 80039d8:	4c05      	ldr	r4, [pc, #20]	; (80039f0 <_close_r+0x1c>)
 80039da:	4605      	mov	r5, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	f7fc fecb 	bl	800077a <_close>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_close_r+0x1a>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_close_r+0x1a>
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	20000130 	.word	0x20000130

080039f4 <__sflush_r>:
 80039f4:	898a      	ldrh	r2, [r1, #12]
 80039f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fa:	4605      	mov	r5, r0
 80039fc:	0710      	lsls	r0, r2, #28
 80039fe:	460c      	mov	r4, r1
 8003a00:	d458      	bmi.n	8003ab4 <__sflush_r+0xc0>
 8003a02:	684b      	ldr	r3, [r1, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	dc05      	bgt.n	8003a14 <__sflush_r+0x20>
 8003a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	dc02      	bgt.n	8003a14 <__sflush_r+0x20>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a16:	2e00      	cmp	r6, #0
 8003a18:	d0f9      	beq.n	8003a0e <__sflush_r+0x1a>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a20:	682f      	ldr	r7, [r5, #0]
 8003a22:	6a21      	ldr	r1, [r4, #32]
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	d032      	beq.n	8003a8e <__sflush_r+0x9a>
 8003a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	075a      	lsls	r2, r3, #29
 8003a2e:	d505      	bpl.n	8003a3c <__sflush_r+0x48>
 8003a30:	6863      	ldr	r3, [r4, #4]
 8003a32:	1ac0      	subs	r0, r0, r3
 8003a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a36:	b10b      	cbz	r3, 8003a3c <__sflush_r+0x48>
 8003a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a3a:	1ac0      	subs	r0, r0, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a42:	6a21      	ldr	r1, [r4, #32]
 8003a44:	4628      	mov	r0, r5
 8003a46:	47b0      	blx	r6
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	d106      	bne.n	8003a5c <__sflush_r+0x68>
 8003a4e:	6829      	ldr	r1, [r5, #0]
 8003a50:	291d      	cmp	r1, #29
 8003a52:	d848      	bhi.n	8003ae6 <__sflush_r+0xf2>
 8003a54:	4a29      	ldr	r2, [pc, #164]	; (8003afc <__sflush_r+0x108>)
 8003a56:	40ca      	lsrs	r2, r1
 8003a58:	07d6      	lsls	r6, r2, #31
 8003a5a:	d544      	bpl.n	8003ae6 <__sflush_r+0xf2>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	6062      	str	r2, [r4, #4]
 8003a60:	6922      	ldr	r2, [r4, #16]
 8003a62:	04d9      	lsls	r1, r3, #19
 8003a64:	6022      	str	r2, [r4, #0]
 8003a66:	d504      	bpl.n	8003a72 <__sflush_r+0x7e>
 8003a68:	1c42      	adds	r2, r0, #1
 8003a6a:	d101      	bne.n	8003a70 <__sflush_r+0x7c>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	b903      	cbnz	r3, 8003a72 <__sflush_r+0x7e>
 8003a70:	6560      	str	r0, [r4, #84]	; 0x54
 8003a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a74:	602f      	str	r7, [r5, #0]
 8003a76:	2900      	cmp	r1, #0
 8003a78:	d0c9      	beq.n	8003a0e <__sflush_r+0x1a>
 8003a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a7e:	4299      	cmp	r1, r3
 8003a80:	d002      	beq.n	8003a88 <__sflush_r+0x94>
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f8ec 	bl	8003c60 <_free_r>
 8003a88:	2000      	movs	r0, #0
 8003a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a8c:	e7c0      	b.n	8003a10 <__sflush_r+0x1c>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4628      	mov	r0, r5
 8003a92:	47b0      	blx	r6
 8003a94:	1c41      	adds	r1, r0, #1
 8003a96:	d1c8      	bne.n	8003a2a <__sflush_r+0x36>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0c5      	beq.n	8003a2a <__sflush_r+0x36>
 8003a9e:	2b1d      	cmp	r3, #29
 8003aa0:	d001      	beq.n	8003aa6 <__sflush_r+0xb2>
 8003aa2:	2b16      	cmp	r3, #22
 8003aa4:	d101      	bne.n	8003aaa <__sflush_r+0xb6>
 8003aa6:	602f      	str	r7, [r5, #0]
 8003aa8:	e7b1      	b.n	8003a0e <__sflush_r+0x1a>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab0:	81a3      	strh	r3, [r4, #12]
 8003ab2:	e7ad      	b.n	8003a10 <__sflush_r+0x1c>
 8003ab4:	690f      	ldr	r7, [r1, #16]
 8003ab6:	2f00      	cmp	r7, #0
 8003ab8:	d0a9      	beq.n	8003a0e <__sflush_r+0x1a>
 8003aba:	0793      	lsls	r3, r2, #30
 8003abc:	bf18      	it	ne
 8003abe:	2300      	movne	r3, #0
 8003ac0:	680e      	ldr	r6, [r1, #0]
 8003ac2:	bf08      	it	eq
 8003ac4:	694b      	ldreq	r3, [r1, #20]
 8003ac6:	eba6 0807 	sub.w	r8, r6, r7
 8003aca:	600f      	str	r7, [r1, #0]
 8003acc:	608b      	str	r3, [r1, #8]
 8003ace:	f1b8 0f00 	cmp.w	r8, #0
 8003ad2:	dd9c      	ble.n	8003a0e <__sflush_r+0x1a>
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	463a      	mov	r2, r7
 8003ad8:	6a21      	ldr	r1, [r4, #32]
 8003ada:	4628      	mov	r0, r5
 8003adc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ade:	47b0      	blx	r6
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	dc06      	bgt.n	8003af2 <__sflush_r+0xfe>
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	e78e      	b.n	8003a10 <__sflush_r+0x1c>
 8003af2:	4407      	add	r7, r0
 8003af4:	eba8 0800 	sub.w	r8, r8, r0
 8003af8:	e7e9      	b.n	8003ace <__sflush_r+0xda>
 8003afa:	bf00      	nop
 8003afc:	20400001 	.word	0x20400001

08003b00 <_fflush_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	690b      	ldr	r3, [r1, #16]
 8003b04:	4605      	mov	r5, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	b1db      	cbz	r3, 8003b42 <_fflush_r+0x42>
 8003b0a:	b118      	cbz	r0, 8003b14 <_fflush_r+0x14>
 8003b0c:	6983      	ldr	r3, [r0, #24]
 8003b0e:	b90b      	cbnz	r3, 8003b14 <_fflush_r+0x14>
 8003b10:	f7ff fa90 	bl	8003034 <__sinit>
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <_fflush_r+0x48>)
 8003b16:	429c      	cmp	r4, r3
 8003b18:	d109      	bne.n	8003b2e <_fflush_r+0x2e>
 8003b1a:	686c      	ldr	r4, [r5, #4]
 8003b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b20:	b17b      	cbz	r3, 8003b42 <_fflush_r+0x42>
 8003b22:	4621      	mov	r1, r4
 8003b24:	4628      	mov	r0, r5
 8003b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b2a:	f7ff bf63 	b.w	80039f4 <__sflush_r>
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <_fflush_r+0x4c>)
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d101      	bne.n	8003b38 <_fflush_r+0x38>
 8003b34:	68ac      	ldr	r4, [r5, #8]
 8003b36:	e7f1      	b.n	8003b1c <_fflush_r+0x1c>
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <_fflush_r+0x50>)
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	bf08      	it	eq
 8003b3e:	68ec      	ldreq	r4, [r5, #12]
 8003b40:	e7ec      	b.n	8003b1c <_fflush_r+0x1c>
 8003b42:	2000      	movs	r0, #0
 8003b44:	bd38      	pop	{r3, r4, r5, pc}
 8003b46:	bf00      	nop
 8003b48:	08003de8 	.word	0x08003de8
 8003b4c:	08003e08 	.word	0x08003e08
 8003b50:	08003dc8 	.word	0x08003dc8

08003b54 <_lseek_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4605      	mov	r5, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4c05      	ldr	r4, [pc, #20]	; (8003b74 <_lseek_r+0x20>)
 8003b60:	6022      	str	r2, [r4, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fc fe2d 	bl	80007c2 <_lseek>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_lseek_r+0x1e>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_lseek_r+0x1e>
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000130 	.word	0x20000130

08003b78 <__swhatbuf_r>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	460e      	mov	r6, r1
 8003b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b80:	b096      	sub	sp, #88	; 0x58
 8003b82:	2900      	cmp	r1, #0
 8003b84:	4614      	mov	r4, r2
 8003b86:	461d      	mov	r5, r3
 8003b88:	da07      	bge.n	8003b9a <__swhatbuf_r+0x22>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	602b      	str	r3, [r5, #0]
 8003b8e:	89b3      	ldrh	r3, [r6, #12]
 8003b90:	061a      	lsls	r2, r3, #24
 8003b92:	d410      	bmi.n	8003bb6 <__swhatbuf_r+0x3e>
 8003b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b98:	e00e      	b.n	8003bb8 <__swhatbuf_r+0x40>
 8003b9a:	466a      	mov	r2, sp
 8003b9c:	f000 f8be 	bl	8003d1c <_fstat_r>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	dbf2      	blt.n	8003b8a <__swhatbuf_r+0x12>
 8003ba4:	9a01      	ldr	r2, [sp, #4]
 8003ba6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003baa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bae:	425a      	negs	r2, r3
 8003bb0:	415a      	adcs	r2, r3
 8003bb2:	602a      	str	r2, [r5, #0]
 8003bb4:	e7ee      	b.n	8003b94 <__swhatbuf_r+0x1c>
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	2000      	movs	r0, #0
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	b016      	add	sp, #88	; 0x58
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}

08003bc0 <__smakebuf_r>:
 8003bc0:	898b      	ldrh	r3, [r1, #12]
 8003bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bc4:	079d      	lsls	r5, r3, #30
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	d507      	bpl.n	8003bdc <__smakebuf_r+0x1c>
 8003bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6163      	str	r3, [r4, #20]
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	ab01      	add	r3, sp, #4
 8003bde:	466a      	mov	r2, sp
 8003be0:	f7ff ffca 	bl	8003b78 <__swhatbuf_r>
 8003be4:	9900      	ldr	r1, [sp, #0]
 8003be6:	4605      	mov	r5, r0
 8003be8:	4630      	mov	r0, r6
 8003bea:	f7ff faad 	bl	8003148 <_malloc_r>
 8003bee:	b948      	cbnz	r0, 8003c04 <__smakebuf_r+0x44>
 8003bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bf4:	059a      	lsls	r2, r3, #22
 8003bf6:	d4ef      	bmi.n	8003bd8 <__smakebuf_r+0x18>
 8003bf8:	f023 0303 	bic.w	r3, r3, #3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	e7e3      	b.n	8003bcc <__smakebuf_r+0xc>
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <__smakebuf_r+0x7c>)
 8003c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	6020      	str	r0, [r4, #0]
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c10:	81a3      	strh	r3, [r4, #12]
 8003c12:	9b00      	ldr	r3, [sp, #0]
 8003c14:	6120      	str	r0, [r4, #16]
 8003c16:	6163      	str	r3, [r4, #20]
 8003c18:	9b01      	ldr	r3, [sp, #4]
 8003c1a:	b15b      	cbz	r3, 8003c34 <__smakebuf_r+0x74>
 8003c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c20:	4630      	mov	r0, r6
 8003c22:	f000 f88d 	bl	8003d40 <_isatty_r>
 8003c26:	b128      	cbz	r0, 8003c34 <__smakebuf_r+0x74>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	81a3      	strh	r3, [r4, #12]
 8003c34:	89a3      	ldrh	r3, [r4, #12]
 8003c36:	431d      	orrs	r5, r3
 8003c38:	81a5      	strh	r5, [r4, #12]
 8003c3a:	e7cd      	b.n	8003bd8 <__smakebuf_r+0x18>
 8003c3c:	08002ffd 	.word	0x08002ffd

08003c40 <memchr>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	b2c9      	uxtb	r1, r1
 8003c44:	4402      	add	r2, r0
 8003c46:	4290      	cmp	r0, r2
 8003c48:	4603      	mov	r3, r0
 8003c4a:	d101      	bne.n	8003c50 <memchr+0x10>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e003      	b.n	8003c58 <memchr+0x18>
 8003c50:	781c      	ldrb	r4, [r3, #0]
 8003c52:	3001      	adds	r0, #1
 8003c54:	428c      	cmp	r4, r1
 8003c56:	d1f6      	bne.n	8003c46 <memchr+0x6>
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd10      	pop	{r4, pc}

08003c5c <__malloc_lock>:
 8003c5c:	4770      	bx	lr

08003c5e <__malloc_unlock>:
 8003c5e:	4770      	bx	lr

08003c60 <_free_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4605      	mov	r5, r0
 8003c64:	2900      	cmp	r1, #0
 8003c66:	d043      	beq.n	8003cf0 <_free_r+0x90>
 8003c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6c:	1f0c      	subs	r4, r1, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfb8      	it	lt
 8003c72:	18e4      	addlt	r4, r4, r3
 8003c74:	f7ff fff2 	bl	8003c5c <__malloc_lock>
 8003c78:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <_free_r+0x94>)
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	b933      	cbnz	r3, 8003c8e <_free_r+0x2e>
 8003c80:	6063      	str	r3, [r4, #4]
 8003c82:	6014      	str	r4, [r2, #0]
 8003c84:	4628      	mov	r0, r5
 8003c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c8a:	f7ff bfe8 	b.w	8003c5e <__malloc_unlock>
 8003c8e:	42a3      	cmp	r3, r4
 8003c90:	d90b      	bls.n	8003caa <_free_r+0x4a>
 8003c92:	6821      	ldr	r1, [r4, #0]
 8003c94:	1862      	adds	r2, r4, r1
 8003c96:	4293      	cmp	r3, r2
 8003c98:	bf01      	itttt	eq
 8003c9a:	681a      	ldreq	r2, [r3, #0]
 8003c9c:	685b      	ldreq	r3, [r3, #4]
 8003c9e:	1852      	addeq	r2, r2, r1
 8003ca0:	6022      	streq	r2, [r4, #0]
 8003ca2:	6063      	str	r3, [r4, #4]
 8003ca4:	6004      	str	r4, [r0, #0]
 8003ca6:	e7ed      	b.n	8003c84 <_free_r+0x24>
 8003ca8:	4613      	mov	r3, r2
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	b10a      	cbz	r2, 8003cb2 <_free_r+0x52>
 8003cae:	42a2      	cmp	r2, r4
 8003cb0:	d9fa      	bls.n	8003ca8 <_free_r+0x48>
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	1858      	adds	r0, r3, r1
 8003cb6:	42a0      	cmp	r0, r4
 8003cb8:	d10b      	bne.n	8003cd2 <_free_r+0x72>
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	4401      	add	r1, r0
 8003cbe:	1858      	adds	r0, r3, r1
 8003cc0:	4282      	cmp	r2, r0
 8003cc2:	6019      	str	r1, [r3, #0]
 8003cc4:	d1de      	bne.n	8003c84 <_free_r+0x24>
 8003cc6:	6810      	ldr	r0, [r2, #0]
 8003cc8:	6852      	ldr	r2, [r2, #4]
 8003cca:	4401      	add	r1, r0
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	e7d8      	b.n	8003c84 <_free_r+0x24>
 8003cd2:	d902      	bls.n	8003cda <_free_r+0x7a>
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	602b      	str	r3, [r5, #0]
 8003cd8:	e7d4      	b.n	8003c84 <_free_r+0x24>
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	1821      	adds	r1, r4, r0
 8003cde:	428a      	cmp	r2, r1
 8003ce0:	bf01      	itttt	eq
 8003ce2:	6811      	ldreq	r1, [r2, #0]
 8003ce4:	6852      	ldreq	r2, [r2, #4]
 8003ce6:	1809      	addeq	r1, r1, r0
 8003ce8:	6021      	streq	r1, [r4, #0]
 8003cea:	6062      	str	r2, [r4, #4]
 8003cec:	605c      	str	r4, [r3, #4]
 8003cee:	e7c9      	b.n	8003c84 <_free_r+0x24>
 8003cf0:	bd38      	pop	{r3, r4, r5, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000090 	.word	0x20000090

08003cf8 <_read_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	2200      	movs	r2, #0
 8003d02:	4c05      	ldr	r4, [pc, #20]	; (8003d18 <_read_r+0x20>)
 8003d04:	6022      	str	r2, [r4, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f7fc fcfe 	bl	8000708 <_read>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d102      	bne.n	8003d16 <_read_r+0x1e>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	b103      	cbz	r3, 8003d16 <_read_r+0x1e>
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	20000130 	.word	0x20000130

08003d1c <_fstat_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	2300      	movs	r3, #0
 8003d20:	4c06      	ldr	r4, [pc, #24]	; (8003d3c <_fstat_r+0x20>)
 8003d22:	4605      	mov	r5, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	f7fc fd31 	bl	8000790 <_fstat>
 8003d2e:	1c43      	adds	r3, r0, #1
 8003d30:	d102      	bne.n	8003d38 <_fstat_r+0x1c>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	b103      	cbz	r3, 8003d38 <_fstat_r+0x1c>
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000130 	.word	0x20000130

08003d40 <_isatty_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	2300      	movs	r3, #0
 8003d44:	4c05      	ldr	r4, [pc, #20]	; (8003d5c <_isatty_r+0x1c>)
 8003d46:	4605      	mov	r5, r0
 8003d48:	4608      	mov	r0, r1
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	f7fc fd2f 	bl	80007ae <_isatty>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_isatty_r+0x1a>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_isatty_r+0x1a>
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	20000130 	.word	0x20000130

08003d60 <_init>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr

08003d6c <_fini>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr
