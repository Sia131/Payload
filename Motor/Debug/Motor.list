
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004fe0  08004fe0  00014fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005248  08005248  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005248  08005248  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005248  08005248  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005248  08005248  00015248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  0800542c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800542c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bae9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e42  00000000  00000000  0002bcee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  0002db30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  0002e838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a3a  00000000  00000000  0002f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000993a  00000000  00000000  00031e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074162  00000000  00000000  0003b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af90e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  000af98c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fc8 	.word	0x08004fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004fc8 	.word	0x08004fc8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fb50 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f814 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f958 	bl	8000d48 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a98:	f000 f864 	bl	8000b64 <MX_RTC_Init>
  MX_TIM2_Init();
 8000a9c:	f000 f8ac 	bl	8000bf8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000aa0:	f000 f928 	bl	8000cf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <main+0x30>)
 8000aa8:	f001 ff82 	bl	80029b0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  set_angle(&htim2, 90);
 8000aac:	215a      	movs	r1, #90	; 0x5a
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <main+0x30>)
 8000ab0:	f000 f990 	bl	8000dd4 <set_angle>
 8000ab4:	e7fa      	b.n	8000aac <main+0x24>
 8000ab6:	bf00      	nop
 8000ab8:	20000218 	.word	0x20000218

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	; 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac6:	2228      	movs	r2, #40	; 0x28
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fd5a 	bl	8003584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000aec:	230a      	movs	r3, #10
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2310      	movs	r3, #16
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fdd7 	bl	80016b8 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b10:	f000 f95a 	bl	8000dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f842 	bl	8001bb8 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b3a:	f000 f945 	bl	8000dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b46:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f9d0 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b56:	f000 f937 	bl	8000dc8 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3750      	adds	r7, #80	; 0x50
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	460a      	mov	r2, r1
 8000b70:	801a      	strh	r2, [r3, #0]
 8000b72:	460a      	mov	r2, r1
 8000b74:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_RTC_Init+0x8c>)
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <MX_RTC_Init+0x90>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_RTC_Init+0x8c>)
 8000b82:	f04f 32ff 	mov.w	r2, #4294967295
 8000b86:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_RTC_Init+0x8c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b8e:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <MX_RTC_Init+0x8c>)
 8000b90:	f001 fb20 	bl	80021d4 <HAL_RTC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000b9a:	f000 f915 	bl	8000dc8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2201      	movs	r2, #1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <MX_RTC_Init+0x8c>)
 8000bb2:	f001 fba5 	bl	8002300 <HAL_RTC_SetTime>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000bbc:	f000 f904 	bl	8000dc8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_RTC_Init+0x8c>)
 8000bd8:	f001 fc2a 	bl	8002430 <HAL_RTC_SetDate>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000be2:	f000 f8f1 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000204 	.word	0x20000204
 8000bf4:	40002800 	.word	0x40002800

08000bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c32:	224f      	movs	r2, #79	; 0x4f
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2019;
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c3e:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8000c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c50:	4827      	ldr	r0, [pc, #156]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c52:	f001 fe4d 	bl	80028f0 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c5c:	f000 f8b4 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c6e:	f001 ff97 	bl	8002ba0 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c78:	f000 f8a6 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c7e:	f001 fe62 	bl	8002946 <HAL_TIM_PWM_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c88:	f000 f89e 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000c9c:	f002 fadc 	bl	8003258 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ca6:	f000 f88f 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000caa:	2360      	movs	r3, #96	; 0x60
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000cc2:	f001 fea7 	bl	8002a14 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ccc:	f000 f87c 	bl	8000dc8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	699a      	ldr	r2, [r3, #24]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0208 	bic.w	r2, r2, #8
 8000cde:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <MX_TIM2_Init+0xf8>)
 8000ce2:	f000 f8fb 	bl	8000edc <HAL_TIM_MspPostInit>

}
 8000ce6:	bf00      	nop
 8000ce8:	3738      	adds	r7, #56	; 0x38
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000218 	.word	0x20000218

08000cf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART2_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f002 fad8 	bl	80032e0 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f847 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000258 	.word	0x20000258
 8000d44:	40004400 	.word	0x40004400

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_GPIO_Init+0x78>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <MX_GPIO_Init+0x78>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_GPIO_Init+0x78>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_GPIO_Init+0x78>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <MX_GPIO_Init+0x78>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_GPIO_Init+0x78>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_GPIO_Init+0x7c>)
 8000d94:	f000 fc6c 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2302      	movs	r3, #2
 8000da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_GPIO_Init+0x7c>)
 8000db2:	f000 fb03 	bl	80013bc <HAL_GPIO_Init>

}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40011000 	.word	0x40011000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <set_angle>:
void test_blink(){
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	HAL_Delay(100);
}

void set_angle(TIM_HandleTypeDef *htim, uint16_t angle ){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
	/*transfer function */
	uint16_t D = A*angle + B;
 8000de0:	887b      	ldrh	r3, [r7, #2]
 8000de2:	81fb      	strh	r3, [r7, #14]

	(*htim).Instance->CCR1 = D; //0
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	89fa      	ldrh	r2, [r7, #14]
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_MspInit+0x5c>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <HAL_MspInit+0x5c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6193      	str	r3, [r2, #24]
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_MspInit+0x5c>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_MspInit+0x5c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_MspInit+0x60>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_MspInit+0x60>)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000

08000e5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_RTC_MspInit+0x3c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d110      	bne.n	8000e90 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e6e:	f000 fc17 	bl	80016a0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_RTC_MspInit+0x40>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_RTC_MspInit+0x40>)
 8000e78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_RTC_MspInit+0x40>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_RTC_MspInit+0x44>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40002800 	.word	0x40002800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	4242043c 	.word	0x4242043c

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d10b      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_TIM_Base_MspInit+0x34>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_TIM_Base_MspInit+0x34>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_TIM_Base_MspInit+0x34>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efa:	d117      	bne.n	8000f2c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_TIM_MspPostInit+0x58>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_TIM_MspPostInit+0x58>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_TIM_MspPostInit+0x58>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f14:	2301      	movs	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <HAL_TIM_MspPostInit+0x5c>)
 8000f28:	f000 fa48 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d12f      	bne.n	8000fbc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f66:	61d3      	str	r3, [r2, #28]
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000fa0:	f000 fa0c 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000fb8:	f000 fa00 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <HardFault_Handler+0x4>

08000fe2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <BusFault_Handler+0x4>

08000fee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8ce 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x50>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x16>
		heap_end = &end;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <_sbrk+0x50>)
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <_sbrk+0x54>)
 8001038:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <_sbrk+0x50>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <_sbrk+0x50>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	466a      	mov	r2, sp
 800104a:	4293      	cmp	r3, r2
 800104c:	d907      	bls.n	800105e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800104e:	f002 fa6f 	bl	8003530 <__errno>
 8001052:	4602      	mov	r2, r0
 8001054:	230c      	movs	r3, #12
 8001056:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	e006      	b.n	800106c <_sbrk+0x48>
	}

	heap_end += incr;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <_sbrk+0x50>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <_sbrk+0x50>)
 8001068:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200001f8 	.word	0x200001f8
 8001078:	200002a0 	.word	0x200002a0

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <SystemInit+0x5c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <SystemInit+0x5c>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <SystemInit+0x5c>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4911      	ldr	r1, [pc, #68]	; (80010d8 <SystemInit+0x5c>)
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <SystemInit+0x60>)
 8001094:	4013      	ands	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <SystemInit+0x5c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <SystemInit+0x5c>)
 800109e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <SystemInit+0x5c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SystemInit+0x5c>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <SystemInit+0x5c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <SystemInit+0x5c>)
 80010ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SystemInit+0x5c>)
 80010c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SystemInit+0x64>)
 80010ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000
 80010dc:	f8ff0000 	.word	0xf8ff0000
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010e6:	e003      	b.n	80010f0 <LoopCopyDataInit>

080010e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010ee:	3104      	adds	r1, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010f8:	d3f6      	bcc.n	80010e8 <CopyDataInit>
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010fc:	e002      	b.n	8001104 <LoopFillZerobss>

080010fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001100:	f842 3b04 	str.w	r3, [r2], #4

08001104 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001106:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001108:	d3f9      	bcc.n	80010fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110a:	f7ff ffb7 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f002 fa15 	bl	800353c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001112:	f7ff fcb9 	bl	8000a88 <main>
  bx lr
 8001116:	4770      	bx	lr
  ldr r3, =_sidata
 8001118:	08005250 	.word	0x08005250
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001120:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001124:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001128:	200002a0 	.word	0x200002a0

0800112c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_2_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x28>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x28>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f907 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f808 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fe54 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f911 	bl	80013a2 <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 f8e7 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x20>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a03      	ldr	r2, [pc, #12]	; (80011dc <HAL_IncTick+0x20>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000298 	.word	0x20000298

080011e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <HAL_GetTick+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000298 	.word	0x20000298

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff90 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff49 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff5e 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff90 	bl	80012ac <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5f 	bl	8001258 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb0 	bl	8001310 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e127      	b.n	8001620 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d0:	2201      	movs	r2, #1
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8116 	bne.w	800161a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d034      	beq.n	8001460 <HAL_GPIO_Init+0xa4>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d80d      	bhi.n	8001416 <HAL_GPIO_Init+0x5a>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x9a>
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d804      	bhi.n	800140c <HAL_GPIO_Init+0x50>
 8001402:	2b00      	cmp	r3, #0
 8001404:	d031      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001406:	2b01      	cmp	r3, #1
 8001408:	d01c      	beq.n	8001444 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140a:	e048      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800140c:	2b03      	cmp	r3, #3
 800140e:	d043      	beq.n	8001498 <HAL_GPIO_Init+0xdc>
 8001410:	2b11      	cmp	r3, #17
 8001412:	d01b      	beq.n	800144c <HAL_GPIO_Init+0x90>
          break;
 8001414:	e043      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001416:	4a89      	ldr	r2, [pc, #548]	; (800163c <HAL_GPIO_Init+0x280>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d026      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800141c:	4a87      	ldr	r2, [pc, #540]	; (800163c <HAL_GPIO_Init+0x280>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d806      	bhi.n	8001430 <HAL_GPIO_Init+0x74>
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_GPIO_Init+0x284>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d020      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001428:	4a86      	ldr	r2, [pc, #536]	; (8001644 <HAL_GPIO_Init+0x288>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01d      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 800142e:	e036      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001430:	4a85      	ldr	r2, [pc, #532]	; (8001648 <HAL_GPIO_Init+0x28c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001436:	4a85      	ldr	r2, [pc, #532]	; (800164c <HAL_GPIO_Init+0x290>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d016      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800143c:	4a84      	ldr	r2, [pc, #528]	; (8001650 <HAL_GPIO_Init+0x294>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 8001442:	e02c      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e028      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e023      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3308      	adds	r3, #8
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e01e      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e019      	b.n	800149e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001472:	2304      	movs	r3, #4
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e012      	b.n	800149e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	611a      	str	r2, [r3, #16]
          break;
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
          break;
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d801      	bhi.n	80014a8 <HAL_GPIO_Init+0xec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	e001      	b.n	80014ac <HAL_GPIO_Init+0xf0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3304      	adds	r3, #4
 80014ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d802      	bhi.n	80014ba <HAL_GPIO_Init+0xfe>
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x104>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3b08      	subs	r3, #8
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	210f      	movs	r1, #15
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	6a39      	ldr	r1, [r7, #32]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8096 	beq.w	800161a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001506:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_GPIO_Init+0x29c>)
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x19e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x19a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x2a8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x196>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x192>
 800154a:	2303      	movs	r3, #3
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800154e:	2304      	movs	r3, #4
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800155a:	2300      	movs	r3, #0
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156c:	493a      	ldr	r1, [pc, #232]	; (8001658 <HAL_GPIO_Init+0x29c>)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4938      	ldr	r1, [pc, #224]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	43db      	mvns	r3, r3
 800159c:	4933      	ldr	r1, [pc, #204]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	492e      	ldr	r1, [pc, #184]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4929      	ldr	r1, [pc, #164]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	4924      	ldr	r1, [pc, #144]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	491f      	ldr	r1, [pc, #124]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	491a      	ldr	r1, [pc, #104]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4915      	ldr	r1, [pc, #84]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001616:	4013      	ands	r3, r2
 8001618:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f aed0 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
  }
}
 8001630:	bf00      	nop
 8001632:	372c      	adds	r7, #44	; 0x2c
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	10210000 	.word	0x10210000
 8001640:	10110000 	.word	0x10110000
 8001644:	10120000 	.word	0x10120000
 8001648:	10310000 	.word	0x10310000
 800164c:	10320000 	.word	0x10320000
 8001650:	10220000 	.word	0x10220000
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40011000 	.word	0x40011000
 8001668:	40011400 	.word	0x40011400
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	420e0020 	.word	0x420e0020

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e26c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8087 	beq.w	80017e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d00c      	beq.n	80016fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e4:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d112      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
 80016f0:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d10b      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	4b89      	ldr	r3, [pc, #548]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d06c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x12c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d168      	bne.n	80017e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e246      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x76>
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x98>
 8001736:	4b7b      	ldr	r3, [pc, #492]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7a      	ldr	r2, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a77      	ldr	r2, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0xbc>
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a71      	ldr	r2, [pc, #452]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001774:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a6a      	ldr	r2, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fd24 	bl	80011e0 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fd20 	bl	80011e0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1fa      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xe4>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fd10 	bl	80011e0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fd0c 	bl	80011e0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1e6      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x10c>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b08      	cmp	r3, #8
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1ba      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4939      	ldr	r1, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fcc5 	bl	80011e0 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fcc1 	bl	80011e0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e19b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fca4 	bl	80011e0 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fca0 	bl	80011e0 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e17a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d03a      	beq.n	800193c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d019      	beq.n	8001902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCC_OscConfig+0x274>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fc84 	bl	80011e0 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fc80 	bl	80011e0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e15a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 fada 	bl	8001eb4 <RCC_Delay>
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x274>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fc6a 	bl	80011e0 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190e:	e00f      	b.n	8001930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fc66 	bl	80011e0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d908      	bls.n	8001930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e140      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	42420000 	.word	0x42420000
 800192c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b9e      	ldr	r3, [pc, #632]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e9      	bne.n	8001910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a6 	beq.w	8001a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b97      	ldr	r3, [pc, #604]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b94      	ldr	r3, [pc, #592]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a93      	ldr	r2, [pc, #588]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b91      	ldr	r3, [pc, #580]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b8e      	ldr	r3, [pc, #568]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a8a      	ldr	r2, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff fc27 	bl	80011e0 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff fc23 	bl	80011e0 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0fd      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x312>
 80019bc:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x334>
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a75      	ldr	r2, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a72      	ldr	r2, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x356>
 80019f4:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a6c      	ldr	r2, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a66      	ldr	r2, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b64      	ldr	r3, [pc, #400]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a63      	ldr	r2, [pc, #396]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fbd7 	bl	80011e0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fbd3 	bl	80011e0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ab      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x37e>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fbc1 	bl	80011e0 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fbbd 	bl	80011e0 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e095      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8081 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d061      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d146      	bne.n	8001b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fb91 	bl	80011e0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff fb8d 	bl	80011e0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e067      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	492d      	ldr	r1, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a19      	ldr	r1, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	4927      	ldr	r1, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fb61 	bl	80011e0 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff fb5d 	bl	80011e0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e037      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46a>
 8001b40:	e02f      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb4a 	bl	80011e0 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fb46 	bl	80011e0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e020      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x498>
 8001b6e:	e018      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e013      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	42420060 	.word	0x42420060

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7ff fa9a 	bl	80011e0 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff fa96 	bl	80011e0 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9f8 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08005008 	.word	0x08005008
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b490      	push	{r4, r7}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d94:	1d3c      	adds	r4, r7, #4
 8001d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d002      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dca:	e02d      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dce:	623b      	str	r3, [r7, #32]
      break;
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	0c9b      	lsrs	r3, r3, #18
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dde:	4413      	add	r3, r2
 8001de0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001de4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0c5b      	lsrs	r3, r3, #17
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dfe:	4413      	add	r3, r2
 8001e00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e0a:	fb02 f203 	mul.w	r2, r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	e004      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	623b      	str	r3, [r7, #32]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2a:	623b      	str	r3, [r7, #32]
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc90      	pop	{r4, r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	08004fe0 	.word	0x08004fe0
 8001e40:	08004ff0 	.word	0x08004ff0
 8001e44:	40021000 	.word	0x40021000
 8001e48:	007a1200 	.word	0x007a1200
 8001e4c:	003d0900 	.word	0x003d0900

08001e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff2 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08005018 	.word	0x08005018

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e94:	4601      	mov	r1, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0adb      	lsrs	r3, r3, #11
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08005018 	.word	0x08005018

08001eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <RCC_Delay+0x34>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <RCC_Delay+0x38>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a5b      	lsrs	r3, r3, #9
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed0:	bf00      	nop
  }
  while (Delay --);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	60fa      	str	r2, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f9      	bne.n	8001ed0 <RCC_Delay+0x1c>
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d07d      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	61d3      	str	r3, [r2, #28]
 8001f28:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d118      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7ff f946 	bl	80011e0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	e008      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7ff f942 	bl	80011e0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e06d      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d02e      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d027      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001faa:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff f911 	bl	80011e0 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff f90d 	bl	80011e0 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e036      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4917      	ldr	r1, [pc, #92]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	490b      	ldr	r1, [pc, #44]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4904      	ldr	r1, [pc, #16]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	42420440 	.word	0x42420440

0800205c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b08d      	sub	sp, #52	; 0x34
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002064:	4b55      	ldr	r3, [pc, #340]	; (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002066:	f107 040c 	add.w	r4, r7, #12
 800206a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d07f      	beq.n	8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002090:	2b10      	cmp	r3, #16
 8002092:	d002      	beq.n	800209a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002094:	2b01      	cmp	r3, #1
 8002096:	d048      	beq.n	800212a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002098:	e08b      	b.n	80021b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80020a0:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d07f      	beq.n	80021ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	0c9b      	lsrs	r3, r3, #18
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020b8:	4413      	add	r3, r2
 80020ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020be:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ca:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0c5b      	lsrs	r3, r3, #17
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020d8:	4413      	add	r3, r2
 80020da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020ea:	4a37      	ldr	r2, [pc, #220]	; (80021c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020fa:	e004      	b.n	8002106 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	4a33      	ldr	r2, [pc, #204]	; (80021cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002112:	d102      	bne.n	800211a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002118:	e048      	b.n	80021ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002128:	e040      	b.n	80021ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213a:	d108      	bne.n	800214e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
 800214c:	e01f      	b.n	800218e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002158:	d109      	bne.n	800216e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002166:	f649 4340 	movw	r3, #40000	; 0x9c40
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
 800216c:	e00f      	b.n	800218e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002178:	d11a      	bne.n	80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d014      	beq.n	80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002186:	f24f 4324 	movw	r3, #62500	; 0xf424
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800218c:	e010      	b.n	80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800218e:	e00f      	b.n	80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002190:	f7ff fe7c 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0b9b      	lsrs	r3, r3, #14
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	3301      	adds	r3, #1
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80021b0:	bf00      	nop
    }
  }
  return (frequency);
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3734      	adds	r7, #52	; 0x34
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd90      	pop	{r4, r7, pc}
 80021bc:	08004ff4 	.word	0x08004ff4
 80021c0:	08005004 	.word	0x08005004
 80021c4:	40021000 	.word	0x40021000
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	003d0900 	.word	0x003d0900
 80021d0:	aaaaaaab 	.word	0xaaaaaaab

080021d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e084      	b.n	80022f4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7c5b      	ldrb	r3, [r3, #17]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fe2e 	bl	8000e5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f9c8 	bl	800259c <HAL_RTC_WaitForSynchro>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e06b      	b.n	80022f4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fa81 	bl	8002724 <RTC_EnterInitMode>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2204      	movs	r2, #4
 800222c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e060      	b.n	80022f4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0207 	bic.w	r2, r2, #7
 8002240:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_RTC_Init+0x128>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_RTC_Init+0x128>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RTC_Init+0x128>)
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4926      	ldr	r1, [pc, #152]	; (80022fc <HAL_RTC_Init+0x128>)
 8002264:	4313      	orrs	r3, r2
 8002266:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d003      	beq.n	800227a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e00e      	b.n	8002298 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800227a:	2001      	movs	r0, #1
 800227c:	f7ff feee 	bl	800205c <HAL_RCCEx_GetPeriphCLKFreq>
 8002280:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2204      	movs	r2, #4
 800228c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e030      	b.n	80022f4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3b01      	subs	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f023 010f 	bic.w	r1, r3, #15
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0c1a      	lsrs	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	b291      	uxth	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fa55 	bl	8002774 <RTC_ExitInitMode>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2204      	movs	r2, #4
 80022d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00c      	b.n	80022f4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80022f2:	2300      	movs	r3, #0
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40006c00 	.word	0x40006c00

08002300 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_RTC_SetTime+0x20>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e080      	b.n	8002426 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	7c1b      	ldrb	r3, [r3, #16]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_RTC_SetTime+0x30>
 800232c:	2302      	movs	r3, #2
 800232e:	e07a      	b.n	8002426 <HAL_RTC_SetTime+0x126>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d113      	bne.n	800236a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800234c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	4619      	mov	r1, r3
 8002356:	460b      	mov	r3, r1
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a5b      	subs	r3, r3, r1
 800235c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800235e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002364:	4413      	add	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e01e      	b.n	80023a8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fa28 	bl	80027c4 <RTC_Bcd2ToByte>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800237c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	785b      	ldrb	r3, [r3, #1]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fa1d 	bl	80027c4 <RTC_Bcd2ToByte>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002396:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	789b      	ldrb	r3, [r3, #2]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fa11 	bl	80027c4 <RTC_Bcd2ToByte>
 80023a2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80023a4:	4423      	add	r3, r4
 80023a6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80023a8:	6979      	ldr	r1, [r7, #20]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f953 	bl	8002656 <RTC_WriteTimeCounter>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2204      	movs	r2, #4
 80023ba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e02f      	b.n	8002426 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0205 	bic.w	r2, r2, #5
 80023d4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f964 	bl	80026a4 <RTC_ReadAlarmCounter>
 80023dc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d018      	beq.n	8002418 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d214      	bcs.n	8002418 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80023f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023f8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80023fa:	6939      	ldr	r1, [r7, #16]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f96a 	bl	80026d6 <RTC_WriteAlarmCounter>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2204      	movs	r2, #4
 800240c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e006      	b.n	8002426 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}
	...

08002430 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_RTC_SetDate+0x24>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e097      	b.n	8002588 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	7c1b      	ldrb	r3, [r3, #16]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_RTC_SetDate+0x34>
 8002460:	2302      	movs	r3, #2
 8002462:	e091      	b.n	8002588 <HAL_RTC_SetDate+0x158>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2202      	movs	r2, #2
 800246e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	78da      	ldrb	r2, [r3, #3]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	785a      	ldrb	r2, [r3, #1]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	789a      	ldrb	r2, [r3, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	739a      	strb	r2, [r3, #14]
 800248e:	e01a      	b.n	80024c6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	78db      	ldrb	r3, [r3, #3]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f995 	bl	80027c4 <RTC_Bcd2ToByte>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f98c 	bl	80027c4 <RTC_Bcd2ToByte>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	789b      	ldrb	r3, [r3, #2]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f983 	bl	80027c4 <RTC_Bcd2ToByte>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	7bdb      	ldrb	r3, [r3, #15]
 80024ca:	4618      	mov	r0, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	7b59      	ldrb	r1, [r3, #13]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	7b9b      	ldrb	r3, [r3, #14]
 80024d4:	461a      	mov	r2, r3
 80024d6:	f000 f993 	bl	8002800 <RTC_WeekDayNum>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	7b1a      	ldrb	r2, [r3, #12]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f883 	bl	80025f6 <RTC_ReadTimeCounter>
 80024f0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_RTC_SetDate+0x160>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0adb      	lsrs	r3, r3, #11
 80024fc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b18      	cmp	r3, #24
 8002502:	d93a      	bls.n	800257a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4a23      	ldr	r2, [pc, #140]	; (8002594 <HAL_RTC_SetDate+0x164>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	4a22      	ldr	r2, [pc, #136]	; (8002598 <HAL_RTC_SetDate+0x168>)
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800251a:	69f9      	ldr	r1, [r7, #28]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f89a 	bl	8002656 <RTC_WriteTimeCounter>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2204      	movs	r2, #4
 800252c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e027      	b.n	8002588 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f8b3 	bl	80026a4 <RTC_ReadAlarmCounter>
 800253e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d018      	beq.n	800257a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	429a      	cmp	r2, r3
 800254e:	d214      	bcs.n	800257a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002556:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800255a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8b9 	bl	80026d6 <RTC_WriteAlarmCounter>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2204      	movs	r2, #4
 800256e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e006      	b.n	8002588 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	91a2b3c5 	.word	0x91a2b3c5
 8002594:	aaaaaaab 	.word	0xaaaaaaab
 8002598:	00015180 	.word	0x00015180

0800259c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e01d      	b.n	80025ee <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0208 	bic.w	r2, r2, #8
 80025c0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80025c2:	f7fe fe0d 	bl	80011e0 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025c8:	e009      	b.n	80025de <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025ca:	f7fe fe09 	bl	80011e0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025d8:	d901      	bls.n	80025de <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e007      	b.n	80025ee <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b087      	sub	sp, #28
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	827b      	strh	r3, [r7, #18]
 8002602:	2300      	movs	r3, #0
 8002604:	823b      	strh	r3, [r7, #16]
 8002606:	2300      	movs	r3, #0
 8002608:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002626:	8a7a      	ldrh	r2, [r7, #18]
 8002628:	8a3b      	ldrh	r3, [r7, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	d008      	beq.n	8002640 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800262e:	8a3b      	ldrh	r3, [r7, #16]
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e004      	b.n	800264a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002640:	8a7b      	ldrh	r3, [r7, #18]
 8002642:	041a      	lsls	r2, r3, #16
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800264a:	697b      	ldr	r3, [r7, #20]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f85d 	bl	8002724 <RTC_EnterInitMode>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e011      	b.n	800269a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	0c12      	lsrs	r2, r2, #16
 800267e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b292      	uxth	r2, r2
 8002688:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f872 	bl	8002774 <RTC_ExitInitMode>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	81fb      	strh	r3, [r7, #14]
 80026b0:	2300      	movs	r3, #0
 80026b2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80026c4:	89fb      	ldrh	r3, [r7, #14]
 80026c6:	041a      	lsls	r2, r3, #16
 80026c8:	89bb      	ldrh	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f81d 	bl	8002724 <RTC_EnterInitMode>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e011      	b.n	800271a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	0c12      	lsrs	r2, r2, #16
 80026fe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b292      	uxth	r2, r2
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f832 	bl	8002774 <RTC_ExitInitMode>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002730:	f7fe fd56 	bl	80011e0 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002736:	e009      	b.n	800274c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002738:	f7fe fd52 	bl	80011e0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002746:	d901      	bls.n	800274c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e00f      	b.n	800276c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ee      	beq.n	8002738 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0210 	orr.w	r2, r2, #16
 8002768:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0210 	bic.w	r2, r2, #16
 800278e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002790:	f7fe fd26 	bl	80011e0 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002796:	e009      	b.n	80027ac <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002798:	f7fe fd22 	bl	80011e0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a6:	d901      	bls.n	80027ac <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e007      	b.n	80027bc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ee      	beq.n	8002798 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b2db      	uxtb	r3, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
	...

08002800 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
 800280c:	4613      	mov	r3, r2
 800280e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800281e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d82d      	bhi.n	8002882 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <RTC_WeekDayNum+0xe4>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	085a      	lsrs	r2, r3, #1
 800283a:	78bb      	ldrb	r3, [r7, #2]
 800283c:	441a      	add	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	441a      	add	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3b01      	subs	r3, #1
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3b01      	subs	r3, #1
 800284e:	4926      	ldr	r1, [pc, #152]	; (80028e8 <RTC_WeekDayNum+0xe8>)
 8002850:	fba1 1303 	umull	r1, r3, r1, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	1ad2      	subs	r2, r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	3b01      	subs	r3, #1
 800285c:	4922      	ldr	r1, [pc, #136]	; (80028e8 <RTC_WeekDayNum+0xe8>)
 800285e:	fba1 1303 	umull	r1, r3, r1, r3
 8002862:	09db      	lsrs	r3, r3, #7
 8002864:	4413      	add	r3, r2
 8002866:	1d1a      	adds	r2, r3, #4
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <RTC_WeekDayNum+0xec>)
 800286a:	fba3 1302 	umull	r1, r3, r3, r2
 800286e:	1ad1      	subs	r1, r2, r3
 8002870:	0849      	lsrs	r1, r1, #1
 8002872:	440b      	add	r3, r1
 8002874:	0899      	lsrs	r1, r3, #2
 8002876:	460b      	mov	r3, r1
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a5b      	subs	r3, r3, r1
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e029      	b.n	80028d6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <RTC_WeekDayNum+0xe4>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	085a      	lsrs	r2, r3, #1
 8002896:	78bb      	ldrb	r3, [r7, #2]
 8002898:	441a      	add	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	441a      	add	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	441a      	add	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4910      	ldr	r1, [pc, #64]	; (80028e8 <RTC_WeekDayNum+0xe8>)
 80028a8:	fba1 1303 	umull	r1, r3, r1, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	490d      	ldr	r1, [pc, #52]	; (80028e8 <RTC_WeekDayNum+0xe8>)
 80028b4:	fba1 1303 	umull	r1, r3, r1, r3
 80028b8:	09db      	lsrs	r3, r3, #7
 80028ba:	4413      	add	r3, r2
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <RTC_WeekDayNum+0xec>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	1ad1      	subs	r1, r2, r3
 80028c6:	0849      	lsrs	r1, r1, #1
 80028c8:	440b      	add	r3, r1
 80028ca:	0899      	lsrs	r1, r3, #2
 80028cc:	460b      	mov	r3, r1
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a5b      	subs	r3, r3, r1
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	b2db      	uxtb	r3, r3
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	38e38e39 	.word	0x38e38e39
 80028e8:	51eb851f 	.word	0x51eb851f
 80028ec:	24924925 	.word	0x24924925

080028f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e01d      	b.n	800293e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fac4 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f000 f9ee 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e01d      	b.n	8002994 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f815 	bl	800299c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f000 f9c3 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fc24 	bl	8003210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_TIM_PWM_Start+0x60>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d107      	bne.n	80029e2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40012c00 	.word	0x40012c00

08002a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0b4      	b.n	8002b98 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	f200 809f 	bhi.w	8002b84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a81 	.word	0x08002a81
 8002a50:	08002b85 	.word	0x08002b85
 8002a54:	08002b85 	.word	0x08002b85
 8002a58:	08002b85 	.word	0x08002b85
 8002a5c:	08002ac1 	.word	0x08002ac1
 8002a60:	08002b85 	.word	0x08002b85
 8002a64:	08002b85 	.word	0x08002b85
 8002a68:	08002b85 	.word	0x08002b85
 8002a6c:	08002b03 	.word	0x08002b03
 8002a70:	08002b85 	.word	0x08002b85
 8002a74:	08002b85 	.word	0x08002b85
 8002a78:	08002b85 	.word	0x08002b85
 8002a7c:	08002b43 	.word	0x08002b43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f9a4 	bl	8002dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0208 	orr.w	r2, r2, #8
 8002a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0204 	bic.w	r2, r2, #4
 8002aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6999      	ldr	r1, [r3, #24]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	619a      	str	r2, [r3, #24]
      break;
 8002abe:	e062      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f9ea 	bl	8002ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6999      	ldr	r1, [r3, #24]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	021a      	lsls	r2, r3, #8
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	619a      	str	r2, [r3, #24]
      break;
 8002b00:	e041      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fa33 	bl	8002f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0208 	orr.w	r2, r2, #8
 8002b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0204 	bic.w	r2, r2, #4
 8002b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69d9      	ldr	r1, [r3, #28]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	61da      	str	r2, [r3, #28]
      break;
 8002b40:	e021      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fa7d 	bl	8003048 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69d9      	ldr	r1, [r3, #28]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	021a      	lsls	r2, r3, #8
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	61da      	str	r2, [r3, #28]
      break;
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002b84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIM_ConfigClockSource+0x18>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0a6      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x166>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d067      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0x120>
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d80b      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x6c>
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d073      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0x140>
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d802      	bhi.n	8002c02 <HAL_TIM_ConfigClockSource+0x62>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d06f      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c00:	e078      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d06c      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0x140>
 8002c06:	2b30      	cmp	r3, #48	; 0x30
 8002c08:	d06a      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c0a:	e073      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c0c:	2b70      	cmp	r3, #112	; 0x70
 8002c0e:	d00d      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0x8c>
 8002c10:	2b70      	cmp	r3, #112	; 0x70
 8002c12:	d804      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x7e>
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d033      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0xe0>
 8002c18:	2b60      	cmp	r3, #96	; 0x60
 8002c1a:	d041      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c1c:	e06a      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	d066      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x152>
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c28:	d017      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c2a:	e063      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f000 fac9 	bl	80031d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]
      break;
 8002c58:	e04c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f000 fab2 	bl	80031d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7c:	609a      	str	r2, [r3, #8]
      break;
 8002c7e:	e039      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f000 fa29 	bl	80030e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2150      	movs	r1, #80	; 0x50
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fa80 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002c9e:	e029      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f000 fa47 	bl	8003140 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2160      	movs	r1, #96	; 0x60
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fa70 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002cbe:	e019      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f000 fa09 	bl	80030e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fa60 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002cde:	e009      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 fa57 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e000      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <TIM_Base_SetConfig+0xbc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <TIM_Base_SetConfig+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d007      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <TIM_Base_SetConfig+0xbc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <TIM_Base_SetConfig+0xc0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d103      	bne.n	8002db8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	615a      	str	r2, [r3, #20]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800

08002dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f023 0302 	bic.w	r3, r3, #2
 8002e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <TIM_OC1_SetConfig+0xc8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10c      	bne.n	8002e4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f023 0308 	bic.w	r3, r3, #8
 8002e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <TIM_OC1_SetConfig+0xc8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d111      	bne.n	8002e76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	621a      	str	r2, [r3, #32]
}
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40012c00 	.word	0x40012c00

08002ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f023 0210 	bic.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0320 	bic.w	r3, r3, #32
 8002eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <TIM_OC2_SetConfig+0xd0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d10d      	bne.n	8002f1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <TIM_OC2_SetConfig+0xd0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d113      	bne.n	8002f4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	621a      	str	r2, [r3, #32]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00

08002f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <TIM_OC3_SetConfig+0xd0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10d      	bne.n	8002fee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <TIM_OC3_SetConfig+0xd0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d113      	bne.n	800301e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	621a      	str	r2, [r3, #32]
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40012c00 	.word	0x40012c00

08003048 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	031b      	lsls	r3, r3, #12
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0f      	ldr	r2, [pc, #60]	; (80030e0 <TIM_OC4_SetConfig+0x98>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d109      	bne.n	80030bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40012c00 	.word	0x40012c00

080030e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f023 030a 	bic.w	r3, r3, #10
 8003120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 0210 	bic.w	r2, r3, #16
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800316a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	031b      	lsls	r3, r3, #12
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800317c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f043 0307 	orr.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b087      	sub	sp, #28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	021a      	lsls	r2, r3, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	609a      	str	r2, [r3, #8]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1a      	ldr	r2, [r3, #32]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800326c:	2302      	movs	r3, #2
 800326e:	e032      	b.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e03f      	b.n	8003372 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fe18 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	; 0x24
 8003310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f829 	bl	800337c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033b6:	f023 030c 	bic.w	r3, r3, #12
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	68f9      	ldr	r1, [r7, #12]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a52      	ldr	r2, [pc, #328]	; (8003528 <UART_SetConfig+0x1ac>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d14e      	bne.n	8003482 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe fd52 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 80033e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009a      	lsls	r2, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	4a4a      	ldr	r2, [pc, #296]	; (800352c <UART_SetConfig+0x1b0>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	0119      	lsls	r1, r3, #4
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	009a      	lsls	r2, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <UART_SetConfig+0x1b0>)
 8003422:	fba3 0302 	umull	r0, r3, r3, r2
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2064      	movs	r0, #100	; 0x64
 800342a:	fb00 f303 	mul.w	r3, r0, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	3332      	adds	r3, #50	; 0x32
 8003434:	4a3d      	ldr	r2, [pc, #244]	; (800352c <UART_SetConfig+0x1b0>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003440:	4419      	add	r1, r3
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fbb2 f2f3 	udiv	r2, r2, r3
 8003458:	4b34      	ldr	r3, [pc, #208]	; (800352c <UART_SetConfig+0x1b0>)
 800345a:	fba3 0302 	umull	r0, r3, r3, r2
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2064      	movs	r0, #100	; 0x64
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	; 0x32
 800346c:	4a2f      	ldr	r2, [pc, #188]	; (800352c <UART_SetConfig+0x1b0>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 020f 	and.w	r2, r3, #15
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	440a      	add	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003480:	e04d      	b.n	800351e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003482:	f7fe fcef 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8003486:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <UART_SetConfig+0x1b0>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	0119      	lsls	r1, r3, #4
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009a      	lsls	r2, r3, #2
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <UART_SetConfig+0x1b0>)
 80034c0:	fba3 0302 	umull	r0, r3, r3, r2
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	2064      	movs	r0, #100	; 0x64
 80034c8:	fb00 f303 	mul.w	r3, r0, r3
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	3332      	adds	r3, #50	; 0x32
 80034d2:	4a16      	ldr	r2, [pc, #88]	; (800352c <UART_SetConfig+0x1b0>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034de:	4419      	add	r1, r3
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009a      	lsls	r2, r3, #2
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <UART_SetConfig+0x1b0>)
 80034f8:	fba3 0302 	umull	r0, r3, r3, r2
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	2064      	movs	r0, #100	; 0x64
 8003500:	fb00 f303 	mul.w	r3, r0, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	3332      	adds	r3, #50	; 0x32
 800350a:	4a08      	ldr	r2, [pc, #32]	; (800352c <UART_SetConfig+0x1b0>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	f003 020f 	and.w	r2, r3, #15
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	440a      	add	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40013800 	.word	0x40013800
 800352c:	51eb851f 	.word	0x51eb851f

08003530 <__errno>:
 8003530:	4b01      	ldr	r3, [pc, #4]	; (8003538 <__errno+0x8>)
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c

0800353c <__libc_init_array>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	2500      	movs	r5, #0
 8003540:	4e0c      	ldr	r6, [pc, #48]	; (8003574 <__libc_init_array+0x38>)
 8003542:	4c0d      	ldr	r4, [pc, #52]	; (8003578 <__libc_init_array+0x3c>)
 8003544:	1ba4      	subs	r4, r4, r6
 8003546:	10a4      	asrs	r4, r4, #2
 8003548:	42a5      	cmp	r5, r4
 800354a:	d109      	bne.n	8003560 <__libc_init_array+0x24>
 800354c:	f001 fd3c 	bl	8004fc8 <_init>
 8003550:	2500      	movs	r5, #0
 8003552:	4e0a      	ldr	r6, [pc, #40]	; (800357c <__libc_init_array+0x40>)
 8003554:	4c0a      	ldr	r4, [pc, #40]	; (8003580 <__libc_init_array+0x44>)
 8003556:	1ba4      	subs	r4, r4, r6
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	42a5      	cmp	r5, r4
 800355c:	d105      	bne.n	800356a <__libc_init_array+0x2e>
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003564:	4798      	blx	r3
 8003566:	3501      	adds	r5, #1
 8003568:	e7ee      	b.n	8003548 <__libc_init_array+0xc>
 800356a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800356e:	4798      	blx	r3
 8003570:	3501      	adds	r5, #1
 8003572:	e7f2      	b.n	800355a <__libc_init_array+0x1e>
 8003574:	08005248 	.word	0x08005248
 8003578:	08005248 	.word	0x08005248
 800357c:	08005248 	.word	0x08005248
 8003580:	0800524c 	.word	0x0800524c

08003584 <memset>:
 8003584:	4603      	mov	r3, r0
 8003586:	4402      	add	r2, r0
 8003588:	4293      	cmp	r3, r2
 800358a:	d100      	bne.n	800358e <memset+0xa>
 800358c:	4770      	bx	lr
 800358e:	f803 1b01 	strb.w	r1, [r3], #1
 8003592:	e7f9      	b.n	8003588 <memset+0x4>

08003594 <__cvt>:
 8003594:	2b00      	cmp	r3, #0
 8003596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800359a:	461e      	mov	r6, r3
 800359c:	bfbb      	ittet	lt
 800359e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80035a2:	461e      	movlt	r6, r3
 80035a4:	2300      	movge	r3, #0
 80035a6:	232d      	movlt	r3, #45	; 0x2d
 80035a8:	b088      	sub	sp, #32
 80035aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80035ac:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80035b0:	f027 0720 	bic.w	r7, r7, #32
 80035b4:	2f46      	cmp	r7, #70	; 0x46
 80035b6:	4614      	mov	r4, r2
 80035b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80035ba:	700b      	strb	r3, [r1, #0]
 80035bc:	d004      	beq.n	80035c8 <__cvt+0x34>
 80035be:	2f45      	cmp	r7, #69	; 0x45
 80035c0:	d100      	bne.n	80035c4 <__cvt+0x30>
 80035c2:	3501      	adds	r5, #1
 80035c4:	2302      	movs	r3, #2
 80035c6:	e000      	b.n	80035ca <__cvt+0x36>
 80035c8:	2303      	movs	r3, #3
 80035ca:	aa07      	add	r2, sp, #28
 80035cc:	9204      	str	r2, [sp, #16]
 80035ce:	aa06      	add	r2, sp, #24
 80035d0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80035d4:	e9cd 3500 	strd	r3, r5, [sp]
 80035d8:	4622      	mov	r2, r4
 80035da:	4633      	mov	r3, r6
 80035dc:	f000 fba8 	bl	8003d30 <_dtoa_r>
 80035e0:	2f47      	cmp	r7, #71	; 0x47
 80035e2:	4680      	mov	r8, r0
 80035e4:	d102      	bne.n	80035ec <__cvt+0x58>
 80035e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035e8:	07db      	lsls	r3, r3, #31
 80035ea:	d526      	bpl.n	800363a <__cvt+0xa6>
 80035ec:	2f46      	cmp	r7, #70	; 0x46
 80035ee:	eb08 0905 	add.w	r9, r8, r5
 80035f2:	d111      	bne.n	8003618 <__cvt+0x84>
 80035f4:	f898 3000 	ldrb.w	r3, [r8]
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d10a      	bne.n	8003612 <__cvt+0x7e>
 80035fc:	2200      	movs	r2, #0
 80035fe:	2300      	movs	r3, #0
 8003600:	4620      	mov	r0, r4
 8003602:	4631      	mov	r1, r6
 8003604:	f7fd f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8003608:	b918      	cbnz	r0, 8003612 <__cvt+0x7e>
 800360a:	f1c5 0501 	rsb	r5, r5, #1
 800360e:	f8ca 5000 	str.w	r5, [sl]
 8003612:	f8da 3000 	ldr.w	r3, [sl]
 8003616:	4499      	add	r9, r3
 8003618:	2200      	movs	r2, #0
 800361a:	2300      	movs	r3, #0
 800361c:	4620      	mov	r0, r4
 800361e:	4631      	mov	r1, r6
 8003620:	f7fd f9c2 	bl	80009a8 <__aeabi_dcmpeq>
 8003624:	b938      	cbnz	r0, 8003636 <__cvt+0xa2>
 8003626:	2230      	movs	r2, #48	; 0x30
 8003628:	9b07      	ldr	r3, [sp, #28]
 800362a:	454b      	cmp	r3, r9
 800362c:	d205      	bcs.n	800363a <__cvt+0xa6>
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	9107      	str	r1, [sp, #28]
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e7f8      	b.n	8003628 <__cvt+0x94>
 8003636:	f8cd 901c 	str.w	r9, [sp, #28]
 800363a:	4640      	mov	r0, r8
 800363c:	9b07      	ldr	r3, [sp, #28]
 800363e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003640:	eba3 0308 	sub.w	r3, r3, r8
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	b008      	add	sp, #32
 8003648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800364c <__exponent>:
 800364c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800364e:	2900      	cmp	r1, #0
 8003650:	bfb4      	ite	lt
 8003652:	232d      	movlt	r3, #45	; 0x2d
 8003654:	232b      	movge	r3, #43	; 0x2b
 8003656:	4604      	mov	r4, r0
 8003658:	bfb8      	it	lt
 800365a:	4249      	neglt	r1, r1
 800365c:	2909      	cmp	r1, #9
 800365e:	f804 2b02 	strb.w	r2, [r4], #2
 8003662:	7043      	strb	r3, [r0, #1]
 8003664:	dd21      	ble.n	80036aa <__exponent+0x5e>
 8003666:	f10d 0307 	add.w	r3, sp, #7
 800366a:	461f      	mov	r7, r3
 800366c:	260a      	movs	r6, #10
 800366e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003672:	fb06 1115 	mls	r1, r6, r5, r1
 8003676:	2d09      	cmp	r5, #9
 8003678:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800367c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003680:	f103 32ff 	add.w	r2, r3, #4294967295
 8003684:	4629      	mov	r1, r5
 8003686:	dc09      	bgt.n	800369c <__exponent+0x50>
 8003688:	3130      	adds	r1, #48	; 0x30
 800368a:	3b02      	subs	r3, #2
 800368c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003690:	42bb      	cmp	r3, r7
 8003692:	4622      	mov	r2, r4
 8003694:	d304      	bcc.n	80036a0 <__exponent+0x54>
 8003696:	1a10      	subs	r0, r2, r0
 8003698:	b003      	add	sp, #12
 800369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369c:	4613      	mov	r3, r2
 800369e:	e7e6      	b.n	800366e <__exponent+0x22>
 80036a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a4:	f804 2b01 	strb.w	r2, [r4], #1
 80036a8:	e7f2      	b.n	8003690 <__exponent+0x44>
 80036aa:	2330      	movs	r3, #48	; 0x30
 80036ac:	4419      	add	r1, r3
 80036ae:	7083      	strb	r3, [r0, #2]
 80036b0:	1d02      	adds	r2, r0, #4
 80036b2:	70c1      	strb	r1, [r0, #3]
 80036b4:	e7ef      	b.n	8003696 <__exponent+0x4a>
	...

080036b8 <_printf_float>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	b091      	sub	sp, #68	; 0x44
 80036be:	460c      	mov	r4, r1
 80036c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80036c2:	4693      	mov	fp, r2
 80036c4:	461e      	mov	r6, r3
 80036c6:	4605      	mov	r5, r0
 80036c8:	f001 f8e6 	bl	8004898 <_localeconv_r>
 80036cc:	6803      	ldr	r3, [r0, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	9309      	str	r3, [sp, #36]	; 0x24
 80036d2:	f7fc fd3d 	bl	8000150 <strlen>
 80036d6:	2300      	movs	r3, #0
 80036d8:	930e      	str	r3, [sp, #56]	; 0x38
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	900a      	str	r0, [sp, #40]	; 0x28
 80036de:	3307      	adds	r3, #7
 80036e0:	f023 0307 	bic.w	r3, r3, #7
 80036e4:	f103 0208 	add.w	r2, r3, #8
 80036e8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80036ec:	f8d4 a000 	ldr.w	sl, [r4]
 80036f0:	603a      	str	r2, [r7, #0]
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036fa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80036fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003702:	930b      	str	r3, [sp, #44]	; 0x2c
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	4ba6      	ldr	r3, [pc, #664]	; (80039a4 <_printf_float+0x2ec>)
 800370a:	4638      	mov	r0, r7
 800370c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800370e:	f7fd f97d 	bl	8000a0c <__aeabi_dcmpun>
 8003712:	bb68      	cbnz	r0, 8003770 <_printf_float+0xb8>
 8003714:	f04f 32ff 	mov.w	r2, #4294967295
 8003718:	4ba2      	ldr	r3, [pc, #648]	; (80039a4 <_printf_float+0x2ec>)
 800371a:	4638      	mov	r0, r7
 800371c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800371e:	f7fd f957 	bl	80009d0 <__aeabi_dcmple>
 8003722:	bb28      	cbnz	r0, 8003770 <_printf_float+0xb8>
 8003724:	2200      	movs	r2, #0
 8003726:	2300      	movs	r3, #0
 8003728:	4638      	mov	r0, r7
 800372a:	4649      	mov	r1, r9
 800372c:	f7fd f946 	bl	80009bc <__aeabi_dcmplt>
 8003730:	b110      	cbz	r0, 8003738 <_printf_float+0x80>
 8003732:	232d      	movs	r3, #45	; 0x2d
 8003734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003738:	4f9b      	ldr	r7, [pc, #620]	; (80039a8 <_printf_float+0x2f0>)
 800373a:	4b9c      	ldr	r3, [pc, #624]	; (80039ac <_printf_float+0x2f4>)
 800373c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003740:	bf98      	it	ls
 8003742:	461f      	movls	r7, r3
 8003744:	2303      	movs	r3, #3
 8003746:	f04f 0900 	mov.w	r9, #0
 800374a:	6123      	str	r3, [r4, #16]
 800374c:	f02a 0304 	bic.w	r3, sl, #4
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	9600      	str	r6, [sp, #0]
 8003754:	465b      	mov	r3, fp
 8003756:	aa0f      	add	r2, sp, #60	; 0x3c
 8003758:	4621      	mov	r1, r4
 800375a:	4628      	mov	r0, r5
 800375c:	f000 f9e2 	bl	8003b24 <_printf_common>
 8003760:	3001      	adds	r0, #1
 8003762:	f040 8090 	bne.w	8003886 <_printf_float+0x1ce>
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	b011      	add	sp, #68	; 0x44
 800376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003770:	463a      	mov	r2, r7
 8003772:	464b      	mov	r3, r9
 8003774:	4638      	mov	r0, r7
 8003776:	4649      	mov	r1, r9
 8003778:	f7fd f948 	bl	8000a0c <__aeabi_dcmpun>
 800377c:	b110      	cbz	r0, 8003784 <_printf_float+0xcc>
 800377e:	4f8c      	ldr	r7, [pc, #560]	; (80039b0 <_printf_float+0x2f8>)
 8003780:	4b8c      	ldr	r3, [pc, #560]	; (80039b4 <_printf_float+0x2fc>)
 8003782:	e7db      	b.n	800373c <_printf_float+0x84>
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	a80d      	add	r0, sp, #52	; 0x34
 800378e:	a90e      	add	r1, sp, #56	; 0x38
 8003790:	d140      	bne.n	8003814 <_printf_float+0x15c>
 8003792:	2306      	movs	r3, #6
 8003794:	6063      	str	r3, [r4, #4]
 8003796:	f04f 0c00 	mov.w	ip, #0
 800379a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800379e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80037a2:	6863      	ldr	r3, [r4, #4]
 80037a4:	6022      	str	r2, [r4, #0]
 80037a6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	463a      	mov	r2, r7
 80037ae:	464b      	mov	r3, r9
 80037b0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80037b4:	4628      	mov	r0, r5
 80037b6:	f7ff feed 	bl	8003594 <__cvt>
 80037ba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80037be:	2b47      	cmp	r3, #71	; 0x47
 80037c0:	4607      	mov	r7, r0
 80037c2:	d109      	bne.n	80037d8 <_printf_float+0x120>
 80037c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037c6:	1cd8      	adds	r0, r3, #3
 80037c8:	db02      	blt.n	80037d0 <_printf_float+0x118>
 80037ca:	6862      	ldr	r2, [r4, #4]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	dd47      	ble.n	8003860 <_printf_float+0x1a8>
 80037d0:	f1a8 0802 	sub.w	r8, r8, #2
 80037d4:	fa5f f888 	uxtb.w	r8, r8
 80037d8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80037dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80037de:	d824      	bhi.n	800382a <_printf_float+0x172>
 80037e0:	3901      	subs	r1, #1
 80037e2:	4642      	mov	r2, r8
 80037e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037e8:	910d      	str	r1, [sp, #52]	; 0x34
 80037ea:	f7ff ff2f 	bl	800364c <__exponent>
 80037ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037f0:	4681      	mov	r9, r0
 80037f2:	1813      	adds	r3, r2, r0
 80037f4:	2a01      	cmp	r2, #1
 80037f6:	6123      	str	r3, [r4, #16]
 80037f8:	dc02      	bgt.n	8003800 <_printf_float+0x148>
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	07d1      	lsls	r1, r2, #31
 80037fe:	d501      	bpl.n	8003804 <_printf_float+0x14c>
 8003800:	3301      	adds	r3, #1
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0a2      	beq.n	8003752 <_printf_float+0x9a>
 800380c:	232d      	movs	r3, #45	; 0x2d
 800380e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003812:	e79e      	b.n	8003752 <_printf_float+0x9a>
 8003814:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003818:	f000 816e 	beq.w	8003af8 <_printf_float+0x440>
 800381c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003820:	d1b9      	bne.n	8003796 <_printf_float+0xde>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1b7      	bne.n	8003796 <_printf_float+0xde>
 8003826:	2301      	movs	r3, #1
 8003828:	e7b4      	b.n	8003794 <_printf_float+0xdc>
 800382a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800382e:	d119      	bne.n	8003864 <_printf_float+0x1ac>
 8003830:	2900      	cmp	r1, #0
 8003832:	6863      	ldr	r3, [r4, #4]
 8003834:	dd0c      	ble.n	8003850 <_printf_float+0x198>
 8003836:	6121      	str	r1, [r4, #16]
 8003838:	b913      	cbnz	r3, 8003840 <_printf_float+0x188>
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	07d2      	lsls	r2, r2, #31
 800383e:	d502      	bpl.n	8003846 <_printf_float+0x18e>
 8003840:	3301      	adds	r3, #1
 8003842:	440b      	add	r3, r1
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003848:	f04f 0900 	mov.w	r9, #0
 800384c:	65a3      	str	r3, [r4, #88]	; 0x58
 800384e:	e7d9      	b.n	8003804 <_printf_float+0x14c>
 8003850:	b913      	cbnz	r3, 8003858 <_printf_float+0x1a0>
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	07d0      	lsls	r0, r2, #31
 8003856:	d501      	bpl.n	800385c <_printf_float+0x1a4>
 8003858:	3302      	adds	r3, #2
 800385a:	e7f3      	b.n	8003844 <_printf_float+0x18c>
 800385c:	2301      	movs	r3, #1
 800385e:	e7f1      	b.n	8003844 <_printf_float+0x18c>
 8003860:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003864:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003868:	4293      	cmp	r3, r2
 800386a:	db05      	blt.n	8003878 <_printf_float+0x1c0>
 800386c:	6822      	ldr	r2, [r4, #0]
 800386e:	6123      	str	r3, [r4, #16]
 8003870:	07d1      	lsls	r1, r2, #31
 8003872:	d5e8      	bpl.n	8003846 <_printf_float+0x18e>
 8003874:	3301      	adds	r3, #1
 8003876:	e7e5      	b.n	8003844 <_printf_float+0x18c>
 8003878:	2b00      	cmp	r3, #0
 800387a:	bfcc      	ite	gt
 800387c:	2301      	movgt	r3, #1
 800387e:	f1c3 0302 	rsble	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	e7de      	b.n	8003844 <_printf_float+0x18c>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	055a      	lsls	r2, r3, #21
 800388a:	d407      	bmi.n	800389c <_printf_float+0x1e4>
 800388c:	6923      	ldr	r3, [r4, #16]
 800388e:	463a      	mov	r2, r7
 8003890:	4659      	mov	r1, fp
 8003892:	4628      	mov	r0, r5
 8003894:	47b0      	blx	r6
 8003896:	3001      	adds	r0, #1
 8003898:	d129      	bne.n	80038ee <_printf_float+0x236>
 800389a:	e764      	b.n	8003766 <_printf_float+0xae>
 800389c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80038a0:	f240 80d7 	bls.w	8003a52 <_printf_float+0x39a>
 80038a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038a8:	2200      	movs	r2, #0
 80038aa:	2300      	movs	r3, #0
 80038ac:	f7fd f87c 	bl	80009a8 <__aeabi_dcmpeq>
 80038b0:	b388      	cbz	r0, 8003916 <_printf_float+0x25e>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4a40      	ldr	r2, [pc, #256]	; (80039b8 <_printf_float+0x300>)
 80038b6:	4659      	mov	r1, fp
 80038b8:	4628      	mov	r0, r5
 80038ba:	47b0      	blx	r6
 80038bc:	3001      	adds	r0, #1
 80038be:	f43f af52 	beq.w	8003766 <_printf_float+0xae>
 80038c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038c6:	429a      	cmp	r2, r3
 80038c8:	db02      	blt.n	80038d0 <_printf_float+0x218>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	07d8      	lsls	r0, r3, #31
 80038ce:	d50e      	bpl.n	80038ee <_printf_float+0x236>
 80038d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038d4:	4659      	mov	r1, fp
 80038d6:	4628      	mov	r0, r5
 80038d8:	47b0      	blx	r6
 80038da:	3001      	adds	r0, #1
 80038dc:	f43f af43 	beq.w	8003766 <_printf_float+0xae>
 80038e0:	2700      	movs	r7, #0
 80038e2:	f104 081a 	add.w	r8, r4, #26
 80038e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038e8:	3b01      	subs	r3, #1
 80038ea:	42bb      	cmp	r3, r7
 80038ec:	dc09      	bgt.n	8003902 <_printf_float+0x24a>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	079f      	lsls	r7, r3, #30
 80038f2:	f100 80fd 	bmi.w	8003af0 <_printf_float+0x438>
 80038f6:	68e0      	ldr	r0, [r4, #12]
 80038f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038fa:	4298      	cmp	r0, r3
 80038fc:	bfb8      	it	lt
 80038fe:	4618      	movlt	r0, r3
 8003900:	e733      	b.n	800376a <_printf_float+0xb2>
 8003902:	2301      	movs	r3, #1
 8003904:	4642      	mov	r2, r8
 8003906:	4659      	mov	r1, fp
 8003908:	4628      	mov	r0, r5
 800390a:	47b0      	blx	r6
 800390c:	3001      	adds	r0, #1
 800390e:	f43f af2a 	beq.w	8003766 <_printf_float+0xae>
 8003912:	3701      	adds	r7, #1
 8003914:	e7e7      	b.n	80038e6 <_printf_float+0x22e>
 8003916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	dc2b      	bgt.n	8003974 <_printf_float+0x2bc>
 800391c:	2301      	movs	r3, #1
 800391e:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <_printf_float+0x300>)
 8003920:	4659      	mov	r1, fp
 8003922:	4628      	mov	r0, r5
 8003924:	47b0      	blx	r6
 8003926:	3001      	adds	r0, #1
 8003928:	f43f af1d 	beq.w	8003766 <_printf_float+0xae>
 800392c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800392e:	b923      	cbnz	r3, 800393a <_printf_float+0x282>
 8003930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003932:	b913      	cbnz	r3, 800393a <_printf_float+0x282>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	07d9      	lsls	r1, r3, #31
 8003938:	d5d9      	bpl.n	80038ee <_printf_float+0x236>
 800393a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800393e:	4659      	mov	r1, fp
 8003940:	4628      	mov	r0, r5
 8003942:	47b0      	blx	r6
 8003944:	3001      	adds	r0, #1
 8003946:	f43f af0e 	beq.w	8003766 <_printf_float+0xae>
 800394a:	f04f 0800 	mov.w	r8, #0
 800394e:	f104 091a 	add.w	r9, r4, #26
 8003952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003954:	425b      	negs	r3, r3
 8003956:	4543      	cmp	r3, r8
 8003958:	dc01      	bgt.n	800395e <_printf_float+0x2a6>
 800395a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800395c:	e797      	b.n	800388e <_printf_float+0x1d6>
 800395e:	2301      	movs	r3, #1
 8003960:	464a      	mov	r2, r9
 8003962:	4659      	mov	r1, fp
 8003964:	4628      	mov	r0, r5
 8003966:	47b0      	blx	r6
 8003968:	3001      	adds	r0, #1
 800396a:	f43f aefc 	beq.w	8003766 <_printf_float+0xae>
 800396e:	f108 0801 	add.w	r8, r8, #1
 8003972:	e7ee      	b.n	8003952 <_printf_float+0x29a>
 8003974:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003978:	429a      	cmp	r2, r3
 800397a:	bfa8      	it	ge
 800397c:	461a      	movge	r2, r3
 800397e:	2a00      	cmp	r2, #0
 8003980:	4690      	mov	r8, r2
 8003982:	dd07      	ble.n	8003994 <_printf_float+0x2dc>
 8003984:	4613      	mov	r3, r2
 8003986:	4659      	mov	r1, fp
 8003988:	463a      	mov	r2, r7
 800398a:	4628      	mov	r0, r5
 800398c:	47b0      	blx	r6
 800398e:	3001      	adds	r0, #1
 8003990:	f43f aee9 	beq.w	8003766 <_printf_float+0xae>
 8003994:	f104 031a 	add.w	r3, r4, #26
 8003998:	f04f 0a00 	mov.w	sl, #0
 800399c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80039a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80039a2:	e015      	b.n	80039d0 <_printf_float+0x318>
 80039a4:	7fefffff 	.word	0x7fefffff
 80039a8:	08005024 	.word	0x08005024
 80039ac:	08005020 	.word	0x08005020
 80039b0:	0800502c 	.word	0x0800502c
 80039b4:	08005028 	.word	0x08005028
 80039b8:	08005030 	.word	0x08005030
 80039bc:	2301      	movs	r3, #1
 80039be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039c0:	4659      	mov	r1, fp
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b0      	blx	r6
 80039c6:	3001      	adds	r0, #1
 80039c8:	f43f aecd 	beq.w	8003766 <_printf_float+0xae>
 80039cc:	f10a 0a01 	add.w	sl, sl, #1
 80039d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80039d4:	eba9 0308 	sub.w	r3, r9, r8
 80039d8:	4553      	cmp	r3, sl
 80039da:	dcef      	bgt.n	80039bc <_printf_float+0x304>
 80039dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039e0:	429a      	cmp	r2, r3
 80039e2:	444f      	add	r7, r9
 80039e4:	db14      	blt.n	8003a10 <_printf_float+0x358>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	07da      	lsls	r2, r3, #31
 80039ea:	d411      	bmi.n	8003a10 <_printf_float+0x358>
 80039ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80039f0:	eba3 0209 	sub.w	r2, r3, r9
 80039f4:	eba3 0901 	sub.w	r9, r3, r1
 80039f8:	4591      	cmp	r9, r2
 80039fa:	bfa8      	it	ge
 80039fc:	4691      	movge	r9, r2
 80039fe:	f1b9 0f00 	cmp.w	r9, #0
 8003a02:	dc0d      	bgt.n	8003a20 <_printf_float+0x368>
 8003a04:	2700      	movs	r7, #0
 8003a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a0a:	f104 081a 	add.w	r8, r4, #26
 8003a0e:	e018      	b.n	8003a42 <_printf_float+0x38a>
 8003a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a14:	4659      	mov	r1, fp
 8003a16:	4628      	mov	r0, r5
 8003a18:	47b0      	blx	r6
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d1e6      	bne.n	80039ec <_printf_float+0x334>
 8003a1e:	e6a2      	b.n	8003766 <_printf_float+0xae>
 8003a20:	464b      	mov	r3, r9
 8003a22:	463a      	mov	r2, r7
 8003a24:	4659      	mov	r1, fp
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b0      	blx	r6
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1ea      	bne.n	8003a04 <_printf_float+0x34c>
 8003a2e:	e69a      	b.n	8003766 <_printf_float+0xae>
 8003a30:	2301      	movs	r3, #1
 8003a32:	4642      	mov	r2, r8
 8003a34:	4659      	mov	r1, fp
 8003a36:	4628      	mov	r0, r5
 8003a38:	47b0      	blx	r6
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	f43f ae93 	beq.w	8003766 <_printf_float+0xae>
 8003a40:	3701      	adds	r7, #1
 8003a42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	eba3 0309 	sub.w	r3, r3, r9
 8003a4c:	42bb      	cmp	r3, r7
 8003a4e:	dcef      	bgt.n	8003a30 <_printf_float+0x378>
 8003a50:	e74d      	b.n	80038ee <_printf_float+0x236>
 8003a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a54:	2a01      	cmp	r2, #1
 8003a56:	dc01      	bgt.n	8003a5c <_printf_float+0x3a4>
 8003a58:	07db      	lsls	r3, r3, #31
 8003a5a:	d538      	bpl.n	8003ace <_printf_float+0x416>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	463a      	mov	r2, r7
 8003a60:	4659      	mov	r1, fp
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b0      	blx	r6
 8003a66:	3001      	adds	r0, #1
 8003a68:	f43f ae7d 	beq.w	8003766 <_printf_float+0xae>
 8003a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a70:	4659      	mov	r1, fp
 8003a72:	4628      	mov	r0, r5
 8003a74:	47b0      	blx	r6
 8003a76:	3001      	adds	r0, #1
 8003a78:	f107 0701 	add.w	r7, r7, #1
 8003a7c:	f43f ae73 	beq.w	8003766 <_printf_float+0xae>
 8003a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a86:	2200      	movs	r2, #0
 8003a88:	f103 38ff 	add.w	r8, r3, #4294967295
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f7fc ff8b 	bl	80009a8 <__aeabi_dcmpeq>
 8003a92:	b9c0      	cbnz	r0, 8003ac6 <_printf_float+0x40e>
 8003a94:	4643      	mov	r3, r8
 8003a96:	463a      	mov	r2, r7
 8003a98:	4659      	mov	r1, fp
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	47b0      	blx	r6
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	d10d      	bne.n	8003abe <_printf_float+0x406>
 8003aa2:	e660      	b.n	8003766 <_printf_float+0xae>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	4628      	mov	r0, r5
 8003aac:	47b0      	blx	r6
 8003aae:	3001      	adds	r0, #1
 8003ab0:	f43f ae59 	beq.w	8003766 <_printf_float+0xae>
 8003ab4:	3701      	adds	r7, #1
 8003ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	42bb      	cmp	r3, r7
 8003abc:	dcf2      	bgt.n	8003aa4 <_printf_float+0x3ec>
 8003abe:	464b      	mov	r3, r9
 8003ac0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ac4:	e6e4      	b.n	8003890 <_printf_float+0x1d8>
 8003ac6:	2700      	movs	r7, #0
 8003ac8:	f104 081a 	add.w	r8, r4, #26
 8003acc:	e7f3      	b.n	8003ab6 <_printf_float+0x3fe>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e7e1      	b.n	8003a96 <_printf_float+0x3de>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	4659      	mov	r1, fp
 8003ad8:	4628      	mov	r0, r5
 8003ada:	47b0      	blx	r6
 8003adc:	3001      	adds	r0, #1
 8003ade:	f43f ae42 	beq.w	8003766 <_printf_float+0xae>
 8003ae2:	3701      	adds	r7, #1
 8003ae4:	68e3      	ldr	r3, [r4, #12]
 8003ae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	42bb      	cmp	r3, r7
 8003aec:	dcf1      	bgt.n	8003ad2 <_printf_float+0x41a>
 8003aee:	e702      	b.n	80038f6 <_printf_float+0x23e>
 8003af0:	2700      	movs	r7, #0
 8003af2:	f104 0819 	add.w	r8, r4, #25
 8003af6:	e7f5      	b.n	8003ae4 <_printf_float+0x42c>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f43f ae94 	beq.w	8003826 <_printf_float+0x16e>
 8003afe:	f04f 0c00 	mov.w	ip, #0
 8003b02:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003b06:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003b0a:	6022      	str	r2, [r4, #0]
 8003b0c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003b10:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	463a      	mov	r2, r7
 8003b18:	464b      	mov	r3, r9
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f7ff fd3a 	bl	8003594 <__cvt>
 8003b20:	4607      	mov	r7, r0
 8003b22:	e64f      	b.n	80037c4 <_printf_float+0x10c>

08003b24 <_printf_common>:
 8003b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b28:	4691      	mov	r9, r2
 8003b2a:	461f      	mov	r7, r3
 8003b2c:	688a      	ldr	r2, [r1, #8]
 8003b2e:	690b      	ldr	r3, [r1, #16]
 8003b30:	4606      	mov	r6, r0
 8003b32:	4293      	cmp	r3, r2
 8003b34:	bfb8      	it	lt
 8003b36:	4613      	movlt	r3, r2
 8003b38:	f8c9 3000 	str.w	r3, [r9]
 8003b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b40:	460c      	mov	r4, r1
 8003b42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b46:	b112      	cbz	r2, 8003b4e <_printf_common+0x2a>
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f8c9 3000 	str.w	r3, [r9]
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	0699      	lsls	r1, r3, #26
 8003b52:	bf42      	ittt	mi
 8003b54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b58:	3302      	addmi	r3, #2
 8003b5a:	f8c9 3000 	strmi.w	r3, [r9]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	f015 0506 	ands.w	r5, r5, #6
 8003b64:	d107      	bne.n	8003b76 <_printf_common+0x52>
 8003b66:	f104 0a19 	add.w	sl, r4, #25
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	42ab      	cmp	r3, r5
 8003b74:	dc29      	bgt.n	8003bca <_printf_common+0xa6>
 8003b76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	3300      	adds	r3, #0
 8003b7e:	bf18      	it	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	0692      	lsls	r2, r2, #26
 8003b84:	d42e      	bmi.n	8003be4 <_printf_common+0xc0>
 8003b86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	47c0      	blx	r8
 8003b90:	3001      	adds	r0, #1
 8003b92:	d021      	beq.n	8003bd8 <_printf_common+0xb4>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	68e5      	ldr	r5, [r4, #12]
 8003b98:	f003 0306 	and.w	r3, r3, #6
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	bf18      	it	ne
 8003ba0:	2500      	movne	r5, #0
 8003ba2:	f8d9 2000 	ldr.w	r2, [r9]
 8003ba6:	f04f 0900 	mov.w	r9, #0
 8003baa:	bf08      	it	eq
 8003bac:	1aad      	subeq	r5, r5, r2
 8003bae:	68a3      	ldr	r3, [r4, #8]
 8003bb0:	6922      	ldr	r2, [r4, #16]
 8003bb2:	bf08      	it	eq
 8003bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bfc4      	itt	gt
 8003bbc:	1a9b      	subgt	r3, r3, r2
 8003bbe:	18ed      	addgt	r5, r5, r3
 8003bc0:	341a      	adds	r4, #26
 8003bc2:	454d      	cmp	r5, r9
 8003bc4:	d11a      	bne.n	8003bfc <_printf_common+0xd8>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e008      	b.n	8003bdc <_printf_common+0xb8>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4652      	mov	r2, sl
 8003bce:	4639      	mov	r1, r7
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	47c0      	blx	r8
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d103      	bne.n	8003be0 <_printf_common+0xbc>
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be0:	3501      	adds	r5, #1
 8003be2:	e7c2      	b.n	8003b6a <_printf_common+0x46>
 8003be4:	2030      	movs	r0, #48	; 0x30
 8003be6:	18e1      	adds	r1, r4, r3
 8003be8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bf2:	4422      	add	r2, r4
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bfa:	e7c4      	b.n	8003b86 <_printf_common+0x62>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4622      	mov	r2, r4
 8003c00:	4639      	mov	r1, r7
 8003c02:	4630      	mov	r0, r6
 8003c04:	47c0      	blx	r8
 8003c06:	3001      	adds	r0, #1
 8003c08:	d0e6      	beq.n	8003bd8 <_printf_common+0xb4>
 8003c0a:	f109 0901 	add.w	r9, r9, #1
 8003c0e:	e7d8      	b.n	8003bc2 <_printf_common+0x9e>

08003c10 <quorem>:
 8003c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	6903      	ldr	r3, [r0, #16]
 8003c16:	690c      	ldr	r4, [r1, #16]
 8003c18:	4680      	mov	r8, r0
 8003c1a:	42a3      	cmp	r3, r4
 8003c1c:	f2c0 8084 	blt.w	8003d28 <quorem+0x118>
 8003c20:	3c01      	subs	r4, #1
 8003c22:	f101 0714 	add.w	r7, r1, #20
 8003c26:	f100 0614 	add.w	r6, r0, #20
 8003c2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003c2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003c32:	3501      	adds	r5, #1
 8003c34:	fbb0 f5f5 	udiv	r5, r0, r5
 8003c38:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003c3c:	eb06 030c 	add.w	r3, r6, ip
 8003c40:	eb07 090c 	add.w	r9, r7, ip
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	b39d      	cbz	r5, 8003cb0 <quorem+0xa0>
 8003c48:	f04f 0a00 	mov.w	sl, #0
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	46b6      	mov	lr, r6
 8003c50:	46d3      	mov	fp, sl
 8003c52:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c56:	b293      	uxth	r3, r2
 8003c58:	fb05 a303 	mla	r3, r5, r3, sl
 8003c5c:	0c12      	lsrs	r2, r2, #16
 8003c5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c62:	fb05 a202 	mla	r2, r5, r2, sl
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	ebab 0303 	sub.w	r3, fp, r3
 8003c6c:	f8de b000 	ldr.w	fp, [lr]
 8003c70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003c74:	fa1f fb8b 	uxth.w	fp, fp
 8003c78:	445b      	add	r3, fp
 8003c7a:	fa1f fb82 	uxth.w	fp, r2
 8003c7e:	f8de 2000 	ldr.w	r2, [lr]
 8003c82:	4581      	cmp	r9, r0
 8003c84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c92:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003c96:	f84e 3b04 	str.w	r3, [lr], #4
 8003c9a:	d2da      	bcs.n	8003c52 <quorem+0x42>
 8003c9c:	f856 300c 	ldr.w	r3, [r6, ip]
 8003ca0:	b933      	cbnz	r3, 8003cb0 <quorem+0xa0>
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	3b04      	subs	r3, #4
 8003ca6:	429e      	cmp	r6, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	d331      	bcc.n	8003d10 <quorem+0x100>
 8003cac:	f8c8 4010 	str.w	r4, [r8, #16]
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	f001 f827 	bl	8004d04 <__mcmp>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	db26      	blt.n	8003d08 <quorem+0xf8>
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f04f 0c00 	mov.w	ip, #0
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	f857 1b04 	ldr.w	r1, [r7], #4
 8003cc6:	f8d0 e000 	ldr.w	lr, [r0]
 8003cca:	b28b      	uxth	r3, r1
 8003ccc:	ebac 0303 	sub.w	r3, ip, r3
 8003cd0:	fa1f f28e 	uxth.w	r2, lr
 8003cd4:	4413      	add	r3, r2
 8003cd6:	0c0a      	lsrs	r2, r1, #16
 8003cd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003cdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ce6:	45b9      	cmp	r9, r7
 8003ce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003cec:	f840 3b04 	str.w	r3, [r0], #4
 8003cf0:	d2e7      	bcs.n	8003cc2 <quorem+0xb2>
 8003cf2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003cf6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003cfa:	b92a      	cbnz	r2, 8003d08 <quorem+0xf8>
 8003cfc:	3b04      	subs	r3, #4
 8003cfe:	429e      	cmp	r6, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	d30b      	bcc.n	8003d1c <quorem+0x10c>
 8003d04:	f8c8 4010 	str.w	r4, [r8, #16]
 8003d08:	4628      	mov	r0, r5
 8003d0a:	b003      	add	sp, #12
 8003d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	3b04      	subs	r3, #4
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	d1c9      	bne.n	8003cac <quorem+0x9c>
 8003d18:	3c01      	subs	r4, #1
 8003d1a:	e7c4      	b.n	8003ca6 <quorem+0x96>
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d1ef      	bne.n	8003d04 <quorem+0xf4>
 8003d24:	3c01      	subs	r4, #1
 8003d26:	e7ea      	b.n	8003cfe <quorem+0xee>
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e7ee      	b.n	8003d0a <quorem+0xfa>
 8003d2c:	0000      	movs	r0, r0
	...

08003d30 <_dtoa_r>:
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	4616      	mov	r6, r2
 8003d36:	461f      	mov	r7, r3
 8003d38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d3a:	b095      	sub	sp, #84	; 0x54
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003d42:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003d46:	b93d      	cbnz	r5, 8003d58 <_dtoa_r+0x28>
 8003d48:	2010      	movs	r0, #16
 8003d4a:	f000 fdb3 	bl	80048b4 <malloc>
 8003d4e:	6260      	str	r0, [r4, #36]	; 0x24
 8003d50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d54:	6005      	str	r5, [r0, #0]
 8003d56:	60c5      	str	r5, [r0, #12]
 8003d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	b151      	cbz	r1, 8003d74 <_dtoa_r+0x44>
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	2301      	movs	r3, #1
 8003d62:	4093      	lsls	r3, r2
 8003d64:	604a      	str	r2, [r1, #4]
 8003d66:	608b      	str	r3, [r1, #8]
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f000 fdea 	bl	8004942 <_Bfree>
 8003d6e:	2200      	movs	r2, #0
 8003d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	1e3b      	subs	r3, r7, #0
 8003d76:	bfaf      	iteee	ge
 8003d78:	2300      	movge	r3, #0
 8003d7a:	2201      	movlt	r2, #1
 8003d7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	9303      	strlt	r3, [sp, #12]
 8003d82:	bfac      	ite	ge
 8003d84:	f8c8 3000 	strge.w	r3, [r8]
 8003d88:	f8c8 2000 	strlt.w	r2, [r8]
 8003d8c:	4bae      	ldr	r3, [pc, #696]	; (8004048 <_dtoa_r+0x318>)
 8003d8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003d92:	ea33 0308 	bics.w	r3, r3, r8
 8003d96:	d11b      	bne.n	8003dd0 <_dtoa_r+0xa0>
 8003d98:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	9b02      	ldr	r3, [sp, #8]
 8003da2:	b923      	cbnz	r3, 8003dae <_dtoa_r+0x7e>
 8003da4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003da8:	2800      	cmp	r0, #0
 8003daa:	f000 8545 	beq.w	8004838 <_dtoa_r+0xb08>
 8003dae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003db0:	b953      	cbnz	r3, 8003dc8 <_dtoa_r+0x98>
 8003db2:	4ba6      	ldr	r3, [pc, #664]	; (800404c <_dtoa_r+0x31c>)
 8003db4:	e021      	b.n	8003dfa <_dtoa_r+0xca>
 8003db6:	4ba6      	ldr	r3, [pc, #664]	; (8004050 <_dtoa_r+0x320>)
 8003db8:	9306      	str	r3, [sp, #24]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	9806      	ldr	r0, [sp, #24]
 8003dc2:	b015      	add	sp, #84	; 0x54
 8003dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc8:	4ba0      	ldr	r3, [pc, #640]	; (800404c <_dtoa_r+0x31c>)
 8003dca:	9306      	str	r3, [sp, #24]
 8003dcc:	3303      	adds	r3, #3
 8003dce:	e7f5      	b.n	8003dbc <_dtoa_r+0x8c>
 8003dd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4630      	mov	r0, r6
 8003dda:	4639      	mov	r1, r7
 8003ddc:	f7fc fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8003de0:	4682      	mov	sl, r0
 8003de2:	b160      	cbz	r0, 8003dfe <_dtoa_r+0xce>
 8003de4:	2301      	movs	r3, #1
 8003de6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8520 	beq.w	8004832 <_dtoa_r+0xb02>
 8003df2:	4b98      	ldr	r3, [pc, #608]	; (8004054 <_dtoa_r+0x324>)
 8003df4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	9306      	str	r3, [sp, #24]
 8003dfc:	e7e0      	b.n	8003dc0 <_dtoa_r+0x90>
 8003dfe:	ab12      	add	r3, sp, #72	; 0x48
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	ab13      	add	r3, sp, #76	; 0x4c
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4632      	mov	r2, r6
 8003e08:	463b      	mov	r3, r7
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 fff2 	bl	8004df4 <__d2b>
 8003e10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003e14:	4683      	mov	fp, r0
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	d07d      	beq.n	8003f16 <_dtoa_r+0x1e6>
 8003e1a:	46b0      	mov	r8, r6
 8003e1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003e20:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003e24:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003e28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003e2c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003e30:	2200      	movs	r2, #0
 8003e32:	4b89      	ldr	r3, [pc, #548]	; (8004058 <_dtoa_r+0x328>)
 8003e34:	4640      	mov	r0, r8
 8003e36:	4649      	mov	r1, r9
 8003e38:	f7fc f996 	bl	8000168 <__aeabi_dsub>
 8003e3c:	a37c      	add	r3, pc, #496	; (adr r3, 8004030 <_dtoa_r+0x300>)
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f7fc fb49 	bl	80004d8 <__aeabi_dmul>
 8003e46:	a37c      	add	r3, pc, #496	; (adr r3, 8004038 <_dtoa_r+0x308>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f7fc f98e 	bl	800016c <__adddf3>
 8003e50:	4606      	mov	r6, r0
 8003e52:	4628      	mov	r0, r5
 8003e54:	460f      	mov	r7, r1
 8003e56:	f7fc fad5 	bl	8000404 <__aeabi_i2d>
 8003e5a:	a379      	add	r3, pc, #484	; (adr r3, 8004040 <_dtoa_r+0x310>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fb3a 	bl	80004d8 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4630      	mov	r0, r6
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	f7fc f97e 	bl	800016c <__adddf3>
 8003e70:	4606      	mov	r6, r0
 8003e72:	460f      	mov	r7, r1
 8003e74:	f7fc fde0 	bl	8000a38 <__aeabi_d2iz>
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4682      	mov	sl, r0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4630      	mov	r0, r6
 8003e80:	4639      	mov	r1, r7
 8003e82:	f7fc fd9b 	bl	80009bc <__aeabi_dcmplt>
 8003e86:	b148      	cbz	r0, 8003e9c <_dtoa_r+0x16c>
 8003e88:	4650      	mov	r0, sl
 8003e8a:	f7fc fabb 	bl	8000404 <__aeabi_i2d>
 8003e8e:	4632      	mov	r2, r6
 8003e90:	463b      	mov	r3, r7
 8003e92:	f7fc fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8003e96:	b908      	cbnz	r0, 8003e9c <_dtoa_r+0x16c>
 8003e98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e9c:	f1ba 0f16 	cmp.w	sl, #22
 8003ea0:	d85a      	bhi.n	8003f58 <_dtoa_r+0x228>
 8003ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ea6:	496d      	ldr	r1, [pc, #436]	; (800405c <_dtoa_r+0x32c>)
 8003ea8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eb0:	f7fc fda2 	bl	80009f8 <__aeabi_dcmpgt>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d051      	beq.n	8003f5c <_dtoa_r+0x22c>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8003ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ec2:	1b5d      	subs	r5, r3, r5
 8003ec4:	1e6b      	subs	r3, r5, #1
 8003ec6:	9307      	str	r3, [sp, #28]
 8003ec8:	bf43      	ittte	mi
 8003eca:	2300      	movmi	r3, #0
 8003ecc:	f1c5 0901 	rsbmi	r9, r5, #1
 8003ed0:	9307      	strmi	r3, [sp, #28]
 8003ed2:	f04f 0900 	movpl.w	r9, #0
 8003ed6:	f1ba 0f00 	cmp.w	sl, #0
 8003eda:	db41      	blt.n	8003f60 <_dtoa_r+0x230>
 8003edc:	9b07      	ldr	r3, [sp, #28]
 8003ede:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003ee2:	4453      	add	r3, sl
 8003ee4:	9307      	str	r3, [sp, #28]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9308      	str	r3, [sp, #32]
 8003eea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	f200 808f 	bhi.w	8004010 <_dtoa_r+0x2e0>
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	bfc4      	itt	gt
 8003ef6:	3b04      	subgt	r3, #4
 8003ef8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003efa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003efc:	bfc8      	it	gt
 8003efe:	2500      	movgt	r5, #0
 8003f00:	f1a3 0302 	sub.w	r3, r3, #2
 8003f04:	bfd8      	it	le
 8003f06:	2501      	movle	r5, #1
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	f200 808d 	bhi.w	8004028 <_dtoa_r+0x2f8>
 8003f0e:	e8df f003 	tbb	[pc, r3]
 8003f12:	7d7b      	.short	0x7d7b
 8003f14:	6f2f      	.short	0x6f2f
 8003f16:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003f1a:	441d      	add	r5, r3
 8003f1c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003f20:	2820      	cmp	r0, #32
 8003f22:	dd13      	ble.n	8003f4c <_dtoa_r+0x21c>
 8003f24:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003f28:	9b02      	ldr	r3, [sp, #8]
 8003f2a:	fa08 f800 	lsl.w	r8, r8, r0
 8003f2e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003f32:	fa23 f000 	lsr.w	r0, r3, r0
 8003f36:	ea48 0000 	orr.w	r0, r8, r0
 8003f3a:	f7fc fa53 	bl	80003e4 <__aeabi_ui2d>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4680      	mov	r8, r0
 8003f42:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003f46:	3d01      	subs	r5, #1
 8003f48:	9310      	str	r3, [sp, #64]	; 0x40
 8003f4a:	e771      	b.n	8003e30 <_dtoa_r+0x100>
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	f1c0 0020 	rsb	r0, r0, #32
 8003f52:	fa03 f000 	lsl.w	r0, r3, r0
 8003f56:	e7f0      	b.n	8003f3a <_dtoa_r+0x20a>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e7b0      	b.n	8003ebe <_dtoa_r+0x18e>
 8003f5c:	900d      	str	r0, [sp, #52]	; 0x34
 8003f5e:	e7af      	b.n	8003ec0 <_dtoa_r+0x190>
 8003f60:	f1ca 0300 	rsb	r3, sl, #0
 8003f64:	9308      	str	r3, [sp, #32]
 8003f66:	2300      	movs	r3, #0
 8003f68:	eba9 090a 	sub.w	r9, r9, sl
 8003f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8003f6e:	e7bc      	b.n	8003eea <_dtoa_r+0x1ba>
 8003f70:	2301      	movs	r3, #1
 8003f72:	9309      	str	r3, [sp, #36]	; 0x24
 8003f74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	dd74      	ble.n	8004064 <_dtoa_r+0x334>
 8003f7a:	4698      	mov	r8, r3
 8003f7c:	9304      	str	r3, [sp, #16]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f82:	6072      	str	r2, [r6, #4]
 8003f84:	2204      	movs	r2, #4
 8003f86:	f102 0014 	add.w	r0, r2, #20
 8003f8a:	4298      	cmp	r0, r3
 8003f8c:	6871      	ldr	r1, [r6, #4]
 8003f8e:	d96e      	bls.n	800406e <_dtoa_r+0x33e>
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 fca2 	bl	80048da <_Balloc>
 8003f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f98:	6030      	str	r0, [r6, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b8 0f0e 	cmp.w	r8, #14
 8003fa0:	9306      	str	r3, [sp, #24]
 8003fa2:	f200 80ed 	bhi.w	8004180 <_dtoa_r+0x450>
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	f000 80ea 	beq.w	8004180 <_dtoa_r+0x450>
 8003fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fb0:	f1ba 0f00 	cmp.w	sl, #0
 8003fb4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003fb8:	dd77      	ble.n	80040aa <_dtoa_r+0x37a>
 8003fba:	4a28      	ldr	r2, [pc, #160]	; (800405c <_dtoa_r+0x32c>)
 8003fbc:	f00a 030f 	and.w	r3, sl, #15
 8003fc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003fc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fc8:	06f0      	lsls	r0, r6, #27
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003fd2:	d568      	bpl.n	80040a6 <_dtoa_r+0x376>
 8003fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003fd8:	4b21      	ldr	r3, [pc, #132]	; (8004060 <_dtoa_r+0x330>)
 8003fda:	2503      	movs	r5, #3
 8003fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fe0:	f7fc fba4 	bl	800072c <__aeabi_ddiv>
 8003fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fe8:	f006 060f 	and.w	r6, r6, #15
 8003fec:	4f1c      	ldr	r7, [pc, #112]	; (8004060 <_dtoa_r+0x330>)
 8003fee:	e04f      	b.n	8004090 <_dtoa_r+0x360>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ff6:	4453      	add	r3, sl
 8003ff8:	f103 0801 	add.w	r8, r3, #1
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	4643      	mov	r3, r8
 8004000:	2b01      	cmp	r3, #1
 8004002:	bfb8      	it	lt
 8004004:	2301      	movlt	r3, #1
 8004006:	e7ba      	b.n	8003f7e <_dtoa_r+0x24e>
 8004008:	2300      	movs	r3, #0
 800400a:	e7b2      	b.n	8003f72 <_dtoa_r+0x242>
 800400c:	2300      	movs	r3, #0
 800400e:	e7f0      	b.n	8003ff2 <_dtoa_r+0x2c2>
 8004010:	2501      	movs	r5, #1
 8004012:	2300      	movs	r3, #0
 8004014:	9509      	str	r5, [sp, #36]	; 0x24
 8004016:	931e      	str	r3, [sp, #120]	; 0x78
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	2200      	movs	r2, #0
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	4698      	mov	r8, r3
 8004022:	2312      	movs	r3, #18
 8004024:	921f      	str	r2, [sp, #124]	; 0x7c
 8004026:	e7aa      	b.n	8003f7e <_dtoa_r+0x24e>
 8004028:	2301      	movs	r3, #1
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	e7f4      	b.n	8004018 <_dtoa_r+0x2e8>
 800402e:	bf00      	nop
 8004030:	636f4361 	.word	0x636f4361
 8004034:	3fd287a7 	.word	0x3fd287a7
 8004038:	8b60c8b3 	.word	0x8b60c8b3
 800403c:	3fc68a28 	.word	0x3fc68a28
 8004040:	509f79fb 	.word	0x509f79fb
 8004044:	3fd34413 	.word	0x3fd34413
 8004048:	7ff00000 	.word	0x7ff00000
 800404c:	0800503b 	.word	0x0800503b
 8004050:	08005032 	.word	0x08005032
 8004054:	08005031 	.word	0x08005031
 8004058:	3ff80000 	.word	0x3ff80000
 800405c:	08005068 	.word	0x08005068
 8004060:	08005040 	.word	0x08005040
 8004064:	2301      	movs	r3, #1
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	4698      	mov	r8, r3
 800406a:	461a      	mov	r2, r3
 800406c:	e7da      	b.n	8004024 <_dtoa_r+0x2f4>
 800406e:	3101      	adds	r1, #1
 8004070:	6071      	str	r1, [r6, #4]
 8004072:	0052      	lsls	r2, r2, #1
 8004074:	e787      	b.n	8003f86 <_dtoa_r+0x256>
 8004076:	07f1      	lsls	r1, r6, #31
 8004078:	d508      	bpl.n	800408c <_dtoa_r+0x35c>
 800407a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800407e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004082:	f7fc fa29 	bl	80004d8 <__aeabi_dmul>
 8004086:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800408a:	3501      	adds	r5, #1
 800408c:	1076      	asrs	r6, r6, #1
 800408e:	3708      	adds	r7, #8
 8004090:	2e00      	cmp	r6, #0
 8004092:	d1f0      	bne.n	8004076 <_dtoa_r+0x346>
 8004094:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800409c:	f7fc fb46 	bl	800072c <__aeabi_ddiv>
 80040a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040a4:	e01b      	b.n	80040de <_dtoa_r+0x3ae>
 80040a6:	2502      	movs	r5, #2
 80040a8:	e7a0      	b.n	8003fec <_dtoa_r+0x2bc>
 80040aa:	f000 80a4 	beq.w	80041f6 <_dtoa_r+0x4c6>
 80040ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80040b2:	f1ca 0600 	rsb	r6, sl, #0
 80040b6:	4ba0      	ldr	r3, [pc, #640]	; (8004338 <_dtoa_r+0x608>)
 80040b8:	f006 020f 	and.w	r2, r6, #15
 80040bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc fa08 	bl	80004d8 <__aeabi_dmul>
 80040c8:	2502      	movs	r5, #2
 80040ca:	2300      	movs	r3, #0
 80040cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040d0:	4f9a      	ldr	r7, [pc, #616]	; (800433c <_dtoa_r+0x60c>)
 80040d2:	1136      	asrs	r6, r6, #4
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	f040 8083 	bne.w	80041e0 <_dtoa_r+0x4b0>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e0      	bne.n	80040a0 <_dtoa_r+0x370>
 80040de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 808a 	beq.w	80041fa <_dtoa_r+0x4ca>
 80040e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80040ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040f2:	2200      	movs	r2, #0
 80040f4:	4b92      	ldr	r3, [pc, #584]	; (8004340 <_dtoa_r+0x610>)
 80040f6:	f7fc fc61 	bl	80009bc <__aeabi_dcmplt>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d07d      	beq.n	80041fa <_dtoa_r+0x4ca>
 80040fe:	f1b8 0f00 	cmp.w	r8, #0
 8004102:	d07a      	beq.n	80041fa <_dtoa_r+0x4ca>
 8004104:	9b04      	ldr	r3, [sp, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	dd36      	ble.n	8004178 <_dtoa_r+0x448>
 800410a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800410e:	2200      	movs	r2, #0
 8004110:	4b8c      	ldr	r3, [pc, #560]	; (8004344 <_dtoa_r+0x614>)
 8004112:	f7fc f9e1 	bl	80004d8 <__aeabi_dmul>
 8004116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800411a:	9e04      	ldr	r6, [sp, #16]
 800411c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004120:	3501      	adds	r5, #1
 8004122:	4628      	mov	r0, r5
 8004124:	f7fc f96e 	bl	8000404 <__aeabi_i2d>
 8004128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800412c:	f7fc f9d4 	bl	80004d8 <__aeabi_dmul>
 8004130:	2200      	movs	r2, #0
 8004132:	4b85      	ldr	r3, [pc, #532]	; (8004348 <_dtoa_r+0x618>)
 8004134:	f7fc f81a 	bl	800016c <__adddf3>
 8004138:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800413c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004140:	950b      	str	r5, [sp, #44]	; 0x2c
 8004142:	2e00      	cmp	r6, #0
 8004144:	d15c      	bne.n	8004200 <_dtoa_r+0x4d0>
 8004146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800414a:	2200      	movs	r2, #0
 800414c:	4b7f      	ldr	r3, [pc, #508]	; (800434c <_dtoa_r+0x61c>)
 800414e:	f7fc f80b 	bl	8000168 <__aeabi_dsub>
 8004152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004154:	462b      	mov	r3, r5
 8004156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800415a:	f7fc fc4d 	bl	80009f8 <__aeabi_dcmpgt>
 800415e:	2800      	cmp	r0, #0
 8004160:	f040 8281 	bne.w	8004666 <_dtoa_r+0x936>
 8004164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800416a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800416e:	f7fc fc25 	bl	80009bc <__aeabi_dcmplt>
 8004172:	2800      	cmp	r0, #0
 8004174:	f040 8275 	bne.w	8004662 <_dtoa_r+0x932>
 8004178:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800417c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004182:	2b00      	cmp	r3, #0
 8004184:	f2c0 814b 	blt.w	800441e <_dtoa_r+0x6ee>
 8004188:	f1ba 0f0e 	cmp.w	sl, #14
 800418c:	f300 8147 	bgt.w	800441e <_dtoa_r+0x6ee>
 8004190:	4b69      	ldr	r3, [pc, #420]	; (8004338 <_dtoa_r+0x608>)
 8004192:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800419e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f280 80d7 	bge.w	8004354 <_dtoa_r+0x624>
 80041a6:	f1b8 0f00 	cmp.w	r8, #0
 80041aa:	f300 80d3 	bgt.w	8004354 <_dtoa_r+0x624>
 80041ae:	f040 8257 	bne.w	8004660 <_dtoa_r+0x930>
 80041b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041b6:	2200      	movs	r2, #0
 80041b8:	4b64      	ldr	r3, [pc, #400]	; (800434c <_dtoa_r+0x61c>)
 80041ba:	f7fc f98d 	bl	80004d8 <__aeabi_dmul>
 80041be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041c2:	f7fc fc0f 	bl	80009e4 <__aeabi_dcmpge>
 80041c6:	4646      	mov	r6, r8
 80041c8:	4647      	mov	r7, r8
 80041ca:	2800      	cmp	r0, #0
 80041cc:	f040 822d 	bne.w	800462a <_dtoa_r+0x8fa>
 80041d0:	9b06      	ldr	r3, [sp, #24]
 80041d2:	9a06      	ldr	r2, [sp, #24]
 80041d4:	1c5d      	adds	r5, r3, #1
 80041d6:	2331      	movs	r3, #49	; 0x31
 80041d8:	f10a 0a01 	add.w	sl, sl, #1
 80041dc:	7013      	strb	r3, [r2, #0]
 80041de:	e228      	b.n	8004632 <_dtoa_r+0x902>
 80041e0:	07f2      	lsls	r2, r6, #31
 80041e2:	d505      	bpl.n	80041f0 <_dtoa_r+0x4c0>
 80041e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e8:	f7fc f976 	bl	80004d8 <__aeabi_dmul>
 80041ec:	2301      	movs	r3, #1
 80041ee:	3501      	adds	r5, #1
 80041f0:	1076      	asrs	r6, r6, #1
 80041f2:	3708      	adds	r7, #8
 80041f4:	e76e      	b.n	80040d4 <_dtoa_r+0x3a4>
 80041f6:	2502      	movs	r5, #2
 80041f8:	e771      	b.n	80040de <_dtoa_r+0x3ae>
 80041fa:	4657      	mov	r7, sl
 80041fc:	4646      	mov	r6, r8
 80041fe:	e790      	b.n	8004122 <_dtoa_r+0x3f2>
 8004200:	4b4d      	ldr	r3, [pc, #308]	; (8004338 <_dtoa_r+0x608>)
 8004202:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004206:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800420a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d048      	beq.n	80042a2 <_dtoa_r+0x572>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	2000      	movs	r0, #0
 8004216:	494e      	ldr	r1, [pc, #312]	; (8004350 <_dtoa_r+0x620>)
 8004218:	f7fc fa88 	bl	800072c <__aeabi_ddiv>
 800421c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004220:	f7fb ffa2 	bl	8000168 <__aeabi_dsub>
 8004224:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004228:	9d06      	ldr	r5, [sp, #24]
 800422a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800422e:	f7fc fc03 	bl	8000a38 <__aeabi_d2iz>
 8004232:	9011      	str	r0, [sp, #68]	; 0x44
 8004234:	f7fc f8e6 	bl	8000404 <__aeabi_i2d>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004240:	f7fb ff92 	bl	8000168 <__aeabi_dsub>
 8004244:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800424a:	3330      	adds	r3, #48	; 0x30
 800424c:	f805 3b01 	strb.w	r3, [r5], #1
 8004250:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004254:	f7fc fbb2 	bl	80009bc <__aeabi_dcmplt>
 8004258:	2800      	cmp	r0, #0
 800425a:	d163      	bne.n	8004324 <_dtoa_r+0x5f4>
 800425c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004260:	2000      	movs	r0, #0
 8004262:	4937      	ldr	r1, [pc, #220]	; (8004340 <_dtoa_r+0x610>)
 8004264:	f7fb ff80 	bl	8000168 <__aeabi_dsub>
 8004268:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800426c:	f7fc fba6 	bl	80009bc <__aeabi_dcmplt>
 8004270:	2800      	cmp	r0, #0
 8004272:	f040 80b5 	bne.w	80043e0 <_dtoa_r+0x6b0>
 8004276:	9b06      	ldr	r3, [sp, #24]
 8004278:	1aeb      	subs	r3, r5, r3
 800427a:	429e      	cmp	r6, r3
 800427c:	f77f af7c 	ble.w	8004178 <_dtoa_r+0x448>
 8004280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004284:	2200      	movs	r2, #0
 8004286:	4b2f      	ldr	r3, [pc, #188]	; (8004344 <_dtoa_r+0x614>)
 8004288:	f7fc f926 	bl	80004d8 <__aeabi_dmul>
 800428c:	2200      	movs	r2, #0
 800428e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004296:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <_dtoa_r+0x614>)
 8004298:	f7fc f91e 	bl	80004d8 <__aeabi_dmul>
 800429c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042a0:	e7c3      	b.n	800422a <_dtoa_r+0x4fa>
 80042a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042a6:	f7fc f917 	bl	80004d8 <__aeabi_dmul>
 80042aa:	9b06      	ldr	r3, [sp, #24]
 80042ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042b0:	199d      	adds	r5, r3, r6
 80042b2:	461e      	mov	r6, r3
 80042b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b8:	f7fc fbbe 	bl	8000a38 <__aeabi_d2iz>
 80042bc:	9011      	str	r0, [sp, #68]	; 0x44
 80042be:	f7fc f8a1 	bl	8000404 <__aeabi_i2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ca:	f7fb ff4d 	bl	8000168 <__aeabi_dsub>
 80042ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042d4:	3330      	adds	r3, #48	; 0x30
 80042d6:	f806 3b01 	strb.w	r3, [r6], #1
 80042da:	42ae      	cmp	r6, r5
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	d124      	bne.n	800432c <_dtoa_r+0x5fc>
 80042e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <_dtoa_r+0x620>)
 80042e8:	f7fb ff40 	bl	800016c <__adddf3>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042f4:	f7fc fb80 	bl	80009f8 <__aeabi_dcmpgt>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d171      	bne.n	80043e0 <_dtoa_r+0x6b0>
 80042fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004300:	2000      	movs	r0, #0
 8004302:	4913      	ldr	r1, [pc, #76]	; (8004350 <_dtoa_r+0x620>)
 8004304:	f7fb ff30 	bl	8000168 <__aeabi_dsub>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004310:	f7fc fb54 	bl	80009bc <__aeabi_dcmplt>
 8004314:	2800      	cmp	r0, #0
 8004316:	f43f af2f 	beq.w	8004178 <_dtoa_r+0x448>
 800431a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800431e:	1e6a      	subs	r2, r5, #1
 8004320:	2b30      	cmp	r3, #48	; 0x30
 8004322:	d001      	beq.n	8004328 <_dtoa_r+0x5f8>
 8004324:	46ba      	mov	sl, r7
 8004326:	e04a      	b.n	80043be <_dtoa_r+0x68e>
 8004328:	4615      	mov	r5, r2
 800432a:	e7f6      	b.n	800431a <_dtoa_r+0x5ea>
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <_dtoa_r+0x614>)
 800432e:	f7fc f8d3 	bl	80004d8 <__aeabi_dmul>
 8004332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004336:	e7bd      	b.n	80042b4 <_dtoa_r+0x584>
 8004338:	08005068 	.word	0x08005068
 800433c:	08005040 	.word	0x08005040
 8004340:	3ff00000 	.word	0x3ff00000
 8004344:	40240000 	.word	0x40240000
 8004348:	401c0000 	.word	0x401c0000
 800434c:	40140000 	.word	0x40140000
 8004350:	3fe00000 	.word	0x3fe00000
 8004354:	9d06      	ldr	r5, [sp, #24]
 8004356:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800435a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435e:	4630      	mov	r0, r6
 8004360:	4639      	mov	r1, r7
 8004362:	f7fc f9e3 	bl	800072c <__aeabi_ddiv>
 8004366:	f7fc fb67 	bl	8000a38 <__aeabi_d2iz>
 800436a:	4681      	mov	r9, r0
 800436c:	f7fc f84a 	bl	8000404 <__aeabi_i2d>
 8004370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004374:	f7fc f8b0 	bl	80004d8 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4630      	mov	r0, r6
 800437e:	4639      	mov	r1, r7
 8004380:	f7fb fef2 	bl	8000168 <__aeabi_dsub>
 8004384:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004388:	f805 6b01 	strb.w	r6, [r5], #1
 800438c:	9e06      	ldr	r6, [sp, #24]
 800438e:	4602      	mov	r2, r0
 8004390:	1bae      	subs	r6, r5, r6
 8004392:	45b0      	cmp	r8, r6
 8004394:	460b      	mov	r3, r1
 8004396:	d135      	bne.n	8004404 <_dtoa_r+0x6d4>
 8004398:	f7fb fee8 	bl	800016c <__adddf3>
 800439c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043a0:	4606      	mov	r6, r0
 80043a2:	460f      	mov	r7, r1
 80043a4:	f7fc fb28 	bl	80009f8 <__aeabi_dcmpgt>
 80043a8:	b9c8      	cbnz	r0, 80043de <_dtoa_r+0x6ae>
 80043aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ae:	4630      	mov	r0, r6
 80043b0:	4639      	mov	r1, r7
 80043b2:	f7fc faf9 	bl	80009a8 <__aeabi_dcmpeq>
 80043b6:	b110      	cbz	r0, 80043be <_dtoa_r+0x68e>
 80043b8:	f019 0f01 	tst.w	r9, #1
 80043bc:	d10f      	bne.n	80043de <_dtoa_r+0x6ae>
 80043be:	4659      	mov	r1, fp
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 fabe 	bl	8004942 <_Bfree>
 80043c6:	2300      	movs	r3, #0
 80043c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043ca:	702b      	strb	r3, [r5, #0]
 80043cc:	f10a 0301 	add.w	r3, sl, #1
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f43f acf3 	beq.w	8003dc0 <_dtoa_r+0x90>
 80043da:	601d      	str	r5, [r3, #0]
 80043dc:	e4f0      	b.n	8003dc0 <_dtoa_r+0x90>
 80043de:	4657      	mov	r7, sl
 80043e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043e4:	1e6b      	subs	r3, r5, #1
 80043e6:	2a39      	cmp	r2, #57	; 0x39
 80043e8:	d106      	bne.n	80043f8 <_dtoa_r+0x6c8>
 80043ea:	9a06      	ldr	r2, [sp, #24]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d107      	bne.n	8004400 <_dtoa_r+0x6d0>
 80043f0:	2330      	movs	r3, #48	; 0x30
 80043f2:	7013      	strb	r3, [r2, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	3701      	adds	r7, #1
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	3201      	adds	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e791      	b.n	8004324 <_dtoa_r+0x5f4>
 8004400:	461d      	mov	r5, r3
 8004402:	e7ed      	b.n	80043e0 <_dtoa_r+0x6b0>
 8004404:	2200      	movs	r2, #0
 8004406:	4b99      	ldr	r3, [pc, #612]	; (800466c <_dtoa_r+0x93c>)
 8004408:	f7fc f866 	bl	80004d8 <__aeabi_dmul>
 800440c:	2200      	movs	r2, #0
 800440e:	2300      	movs	r3, #0
 8004410:	4606      	mov	r6, r0
 8004412:	460f      	mov	r7, r1
 8004414:	f7fc fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8004418:	2800      	cmp	r0, #0
 800441a:	d09e      	beq.n	800435a <_dtoa_r+0x62a>
 800441c:	e7cf      	b.n	80043be <_dtoa_r+0x68e>
 800441e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004420:	2a00      	cmp	r2, #0
 8004422:	f000 8088 	beq.w	8004536 <_dtoa_r+0x806>
 8004426:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004428:	2a01      	cmp	r2, #1
 800442a:	dc6d      	bgt.n	8004508 <_dtoa_r+0x7d8>
 800442c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800442e:	2a00      	cmp	r2, #0
 8004430:	d066      	beq.n	8004500 <_dtoa_r+0x7d0>
 8004432:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004436:	464d      	mov	r5, r9
 8004438:	9e08      	ldr	r6, [sp, #32]
 800443a:	9a07      	ldr	r2, [sp, #28]
 800443c:	2101      	movs	r1, #1
 800443e:	441a      	add	r2, r3
 8004440:	4620      	mov	r0, r4
 8004442:	4499      	add	r9, r3
 8004444:	9207      	str	r2, [sp, #28]
 8004446:	f000 fb1c 	bl	8004a82 <__i2b>
 800444a:	4607      	mov	r7, r0
 800444c:	2d00      	cmp	r5, #0
 800444e:	dd0b      	ble.n	8004468 <_dtoa_r+0x738>
 8004450:	9b07      	ldr	r3, [sp, #28]
 8004452:	2b00      	cmp	r3, #0
 8004454:	dd08      	ble.n	8004468 <_dtoa_r+0x738>
 8004456:	42ab      	cmp	r3, r5
 8004458:	bfa8      	it	ge
 800445a:	462b      	movge	r3, r5
 800445c:	9a07      	ldr	r2, [sp, #28]
 800445e:	eba9 0903 	sub.w	r9, r9, r3
 8004462:	1aed      	subs	r5, r5, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	9307      	str	r3, [sp, #28]
 8004468:	9b08      	ldr	r3, [sp, #32]
 800446a:	b1eb      	cbz	r3, 80044a8 <_dtoa_r+0x778>
 800446c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800446e:	2b00      	cmp	r3, #0
 8004470:	d065      	beq.n	800453e <_dtoa_r+0x80e>
 8004472:	b18e      	cbz	r6, 8004498 <_dtoa_r+0x768>
 8004474:	4639      	mov	r1, r7
 8004476:	4632      	mov	r2, r6
 8004478:	4620      	mov	r0, r4
 800447a:	f000 fba1 	bl	8004bc0 <__pow5mult>
 800447e:	465a      	mov	r2, fp
 8004480:	4601      	mov	r1, r0
 8004482:	4607      	mov	r7, r0
 8004484:	4620      	mov	r0, r4
 8004486:	f000 fb05 	bl	8004a94 <__multiply>
 800448a:	4659      	mov	r1, fp
 800448c:	900a      	str	r0, [sp, #40]	; 0x28
 800448e:	4620      	mov	r0, r4
 8004490:	f000 fa57 	bl	8004942 <_Bfree>
 8004494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004496:	469b      	mov	fp, r3
 8004498:	9b08      	ldr	r3, [sp, #32]
 800449a:	1b9a      	subs	r2, r3, r6
 800449c:	d004      	beq.n	80044a8 <_dtoa_r+0x778>
 800449e:	4659      	mov	r1, fp
 80044a0:	4620      	mov	r0, r4
 80044a2:	f000 fb8d 	bl	8004bc0 <__pow5mult>
 80044a6:	4683      	mov	fp, r0
 80044a8:	2101      	movs	r1, #1
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 fae9 	bl	8004a82 <__i2b>
 80044b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044b2:	4606      	mov	r6, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 81c6 	beq.w	8004846 <_dtoa_r+0xb16>
 80044ba:	461a      	mov	r2, r3
 80044bc:	4601      	mov	r1, r0
 80044be:	4620      	mov	r0, r4
 80044c0:	f000 fb7e 	bl	8004bc0 <__pow5mult>
 80044c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044c6:	4606      	mov	r6, r0
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	dc3e      	bgt.n	800454a <_dtoa_r+0x81a>
 80044cc:	9b02      	ldr	r3, [sp, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d137      	bne.n	8004542 <_dtoa_r+0x812>
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d134      	bne.n	8004546 <_dtoa_r+0x816>
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044e2:	0d1b      	lsrs	r3, r3, #20
 80044e4:	051b      	lsls	r3, r3, #20
 80044e6:	b12b      	cbz	r3, 80044f4 <_dtoa_r+0x7c4>
 80044e8:	9b07      	ldr	r3, [sp, #28]
 80044ea:	f109 0901 	add.w	r9, r9, #1
 80044ee:	3301      	adds	r3, #1
 80044f0:	9307      	str	r3, [sp, #28]
 80044f2:	2301      	movs	r3, #1
 80044f4:	9308      	str	r3, [sp, #32]
 80044f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d128      	bne.n	800454e <_dtoa_r+0x81e>
 80044fc:	2001      	movs	r0, #1
 80044fe:	e02e      	b.n	800455e <_dtoa_r+0x82e>
 8004500:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004502:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004506:	e796      	b.n	8004436 <_dtoa_r+0x706>
 8004508:	9b08      	ldr	r3, [sp, #32]
 800450a:	f108 36ff 	add.w	r6, r8, #4294967295
 800450e:	42b3      	cmp	r3, r6
 8004510:	bfb7      	itett	lt
 8004512:	9b08      	ldrlt	r3, [sp, #32]
 8004514:	1b9e      	subge	r6, r3, r6
 8004516:	1af2      	sublt	r2, r6, r3
 8004518:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800451a:	bfbf      	itttt	lt
 800451c:	9608      	strlt	r6, [sp, #32]
 800451e:	189b      	addlt	r3, r3, r2
 8004520:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004522:	2600      	movlt	r6, #0
 8004524:	f1b8 0f00 	cmp.w	r8, #0
 8004528:	bfb9      	ittee	lt
 800452a:	eba9 0508 	sublt.w	r5, r9, r8
 800452e:	2300      	movlt	r3, #0
 8004530:	464d      	movge	r5, r9
 8004532:	4643      	movge	r3, r8
 8004534:	e781      	b.n	800443a <_dtoa_r+0x70a>
 8004536:	9e08      	ldr	r6, [sp, #32]
 8004538:	464d      	mov	r5, r9
 800453a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800453c:	e786      	b.n	800444c <_dtoa_r+0x71c>
 800453e:	9a08      	ldr	r2, [sp, #32]
 8004540:	e7ad      	b.n	800449e <_dtoa_r+0x76e>
 8004542:	2300      	movs	r3, #0
 8004544:	e7d6      	b.n	80044f4 <_dtoa_r+0x7c4>
 8004546:	9b02      	ldr	r3, [sp, #8]
 8004548:	e7d4      	b.n	80044f4 <_dtoa_r+0x7c4>
 800454a:	2300      	movs	r3, #0
 800454c:	9308      	str	r3, [sp, #32]
 800454e:	6933      	ldr	r3, [r6, #16]
 8004550:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004554:	6918      	ldr	r0, [r3, #16]
 8004556:	f000 fa46 	bl	80049e6 <__hi0bits>
 800455a:	f1c0 0020 	rsb	r0, r0, #32
 800455e:	9b07      	ldr	r3, [sp, #28]
 8004560:	4418      	add	r0, r3
 8004562:	f010 001f 	ands.w	r0, r0, #31
 8004566:	d047      	beq.n	80045f8 <_dtoa_r+0x8c8>
 8004568:	f1c0 0320 	rsb	r3, r0, #32
 800456c:	2b04      	cmp	r3, #4
 800456e:	dd3b      	ble.n	80045e8 <_dtoa_r+0x8b8>
 8004570:	9b07      	ldr	r3, [sp, #28]
 8004572:	f1c0 001c 	rsb	r0, r0, #28
 8004576:	4481      	add	r9, r0
 8004578:	4405      	add	r5, r0
 800457a:	4403      	add	r3, r0
 800457c:	9307      	str	r3, [sp, #28]
 800457e:	f1b9 0f00 	cmp.w	r9, #0
 8004582:	dd05      	ble.n	8004590 <_dtoa_r+0x860>
 8004584:	4659      	mov	r1, fp
 8004586:	464a      	mov	r2, r9
 8004588:	4620      	mov	r0, r4
 800458a:	f000 fb67 	bl	8004c5c <__lshift>
 800458e:	4683      	mov	fp, r0
 8004590:	9b07      	ldr	r3, [sp, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	dd05      	ble.n	80045a2 <_dtoa_r+0x872>
 8004596:	4631      	mov	r1, r6
 8004598:	461a      	mov	r2, r3
 800459a:	4620      	mov	r0, r4
 800459c:	f000 fb5e 	bl	8004c5c <__lshift>
 80045a0:	4606      	mov	r6, r0
 80045a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045a4:	b353      	cbz	r3, 80045fc <_dtoa_r+0x8cc>
 80045a6:	4631      	mov	r1, r6
 80045a8:	4658      	mov	r0, fp
 80045aa:	f000 fbab 	bl	8004d04 <__mcmp>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	da24      	bge.n	80045fc <_dtoa_r+0x8cc>
 80045b2:	2300      	movs	r3, #0
 80045b4:	4659      	mov	r1, fp
 80045b6:	220a      	movs	r2, #10
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 f9d9 	bl	8004970 <__multadd>
 80045be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045c4:	4683      	mov	fp, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8144 	beq.w	8004854 <_dtoa_r+0xb24>
 80045cc:	2300      	movs	r3, #0
 80045ce:	4639      	mov	r1, r7
 80045d0:	220a      	movs	r2, #10
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 f9cc 	bl	8004970 <__multadd>
 80045d8:	9b04      	ldr	r3, [sp, #16]
 80045da:	4607      	mov	r7, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dc4d      	bgt.n	800467c <_dtoa_r+0x94c>
 80045e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	dd4a      	ble.n	800467c <_dtoa_r+0x94c>
 80045e6:	e011      	b.n	800460c <_dtoa_r+0x8dc>
 80045e8:	d0c9      	beq.n	800457e <_dtoa_r+0x84e>
 80045ea:	9a07      	ldr	r2, [sp, #28]
 80045ec:	331c      	adds	r3, #28
 80045ee:	441a      	add	r2, r3
 80045f0:	4499      	add	r9, r3
 80045f2:	441d      	add	r5, r3
 80045f4:	4613      	mov	r3, r2
 80045f6:	e7c1      	b.n	800457c <_dtoa_r+0x84c>
 80045f8:	4603      	mov	r3, r0
 80045fa:	e7f6      	b.n	80045ea <_dtoa_r+0x8ba>
 80045fc:	f1b8 0f00 	cmp.w	r8, #0
 8004600:	dc36      	bgt.n	8004670 <_dtoa_r+0x940>
 8004602:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004604:	2b02      	cmp	r3, #2
 8004606:	dd33      	ble.n	8004670 <_dtoa_r+0x940>
 8004608:	f8cd 8010 	str.w	r8, [sp, #16]
 800460c:	9b04      	ldr	r3, [sp, #16]
 800460e:	b963      	cbnz	r3, 800462a <_dtoa_r+0x8fa>
 8004610:	4631      	mov	r1, r6
 8004612:	2205      	movs	r2, #5
 8004614:	4620      	mov	r0, r4
 8004616:	f000 f9ab 	bl	8004970 <__multadd>
 800461a:	4601      	mov	r1, r0
 800461c:	4606      	mov	r6, r0
 800461e:	4658      	mov	r0, fp
 8004620:	f000 fb70 	bl	8004d04 <__mcmp>
 8004624:	2800      	cmp	r0, #0
 8004626:	f73f add3 	bgt.w	80041d0 <_dtoa_r+0x4a0>
 800462a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800462c:	9d06      	ldr	r5, [sp, #24]
 800462e:	ea6f 0a03 	mvn.w	sl, r3
 8004632:	f04f 0900 	mov.w	r9, #0
 8004636:	4631      	mov	r1, r6
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f982 	bl	8004942 <_Bfree>
 800463e:	2f00      	cmp	r7, #0
 8004640:	f43f aebd 	beq.w	80043be <_dtoa_r+0x68e>
 8004644:	f1b9 0f00 	cmp.w	r9, #0
 8004648:	d005      	beq.n	8004656 <_dtoa_r+0x926>
 800464a:	45b9      	cmp	r9, r7
 800464c:	d003      	beq.n	8004656 <_dtoa_r+0x926>
 800464e:	4649      	mov	r1, r9
 8004650:	4620      	mov	r0, r4
 8004652:	f000 f976 	bl	8004942 <_Bfree>
 8004656:	4639      	mov	r1, r7
 8004658:	4620      	mov	r0, r4
 800465a:	f000 f972 	bl	8004942 <_Bfree>
 800465e:	e6ae      	b.n	80043be <_dtoa_r+0x68e>
 8004660:	2600      	movs	r6, #0
 8004662:	4637      	mov	r7, r6
 8004664:	e7e1      	b.n	800462a <_dtoa_r+0x8fa>
 8004666:	46ba      	mov	sl, r7
 8004668:	4637      	mov	r7, r6
 800466a:	e5b1      	b.n	80041d0 <_dtoa_r+0x4a0>
 800466c:	40240000 	.word	0x40240000
 8004670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004672:	f8cd 8010 	str.w	r8, [sp, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80f3 	beq.w	8004862 <_dtoa_r+0xb32>
 800467c:	2d00      	cmp	r5, #0
 800467e:	dd05      	ble.n	800468c <_dtoa_r+0x95c>
 8004680:	4639      	mov	r1, r7
 8004682:	462a      	mov	r2, r5
 8004684:	4620      	mov	r0, r4
 8004686:	f000 fae9 	bl	8004c5c <__lshift>
 800468a:	4607      	mov	r7, r0
 800468c:	9b08      	ldr	r3, [sp, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04c      	beq.n	800472c <_dtoa_r+0x9fc>
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4620      	mov	r0, r4
 8004696:	f000 f920 	bl	80048da <_Balloc>
 800469a:	4605      	mov	r5, r0
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	f107 010c 	add.w	r1, r7, #12
 80046a2:	3202      	adds	r2, #2
 80046a4:	0092      	lsls	r2, r2, #2
 80046a6:	300c      	adds	r0, #12
 80046a8:	f000 f90c 	bl	80048c4 <memcpy>
 80046ac:	2201      	movs	r2, #1
 80046ae:	4629      	mov	r1, r5
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 fad3 	bl	8004c5c <__lshift>
 80046b6:	46b9      	mov	r9, r7
 80046b8:	4607      	mov	r7, r0
 80046ba:	9b06      	ldr	r3, [sp, #24]
 80046bc:	9307      	str	r3, [sp, #28]
 80046be:	9b02      	ldr	r3, [sp, #8]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	9308      	str	r3, [sp, #32]
 80046c6:	4631      	mov	r1, r6
 80046c8:	4658      	mov	r0, fp
 80046ca:	f7ff faa1 	bl	8003c10 <quorem>
 80046ce:	4649      	mov	r1, r9
 80046d0:	4605      	mov	r5, r0
 80046d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80046d6:	4658      	mov	r0, fp
 80046d8:	f000 fb14 	bl	8004d04 <__mcmp>
 80046dc:	463a      	mov	r2, r7
 80046de:	9002      	str	r0, [sp, #8]
 80046e0:	4631      	mov	r1, r6
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 fb28 	bl	8004d38 <__mdiff>
 80046e8:	68c3      	ldr	r3, [r0, #12]
 80046ea:	4602      	mov	r2, r0
 80046ec:	bb03      	cbnz	r3, 8004730 <_dtoa_r+0xa00>
 80046ee:	4601      	mov	r1, r0
 80046f0:	9009      	str	r0, [sp, #36]	; 0x24
 80046f2:	4658      	mov	r0, fp
 80046f4:	f000 fb06 	bl	8004d04 <__mcmp>
 80046f8:	4603      	mov	r3, r0
 80046fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046fc:	4611      	mov	r1, r2
 80046fe:	4620      	mov	r0, r4
 8004700:	9309      	str	r3, [sp, #36]	; 0x24
 8004702:	f000 f91e 	bl	8004942 <_Bfree>
 8004706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004708:	b9a3      	cbnz	r3, 8004734 <_dtoa_r+0xa04>
 800470a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800470c:	b992      	cbnz	r2, 8004734 <_dtoa_r+0xa04>
 800470e:	9a08      	ldr	r2, [sp, #32]
 8004710:	b982      	cbnz	r2, 8004734 <_dtoa_r+0xa04>
 8004712:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004716:	d029      	beq.n	800476c <_dtoa_r+0xa3c>
 8004718:	9b02      	ldr	r3, [sp, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	dd01      	ble.n	8004722 <_dtoa_r+0x9f2>
 800471e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004722:	9b07      	ldr	r3, [sp, #28]
 8004724:	1c5d      	adds	r5, r3, #1
 8004726:	f883 8000 	strb.w	r8, [r3]
 800472a:	e784      	b.n	8004636 <_dtoa_r+0x906>
 800472c:	4638      	mov	r0, r7
 800472e:	e7c2      	b.n	80046b6 <_dtoa_r+0x986>
 8004730:	2301      	movs	r3, #1
 8004732:	e7e3      	b.n	80046fc <_dtoa_r+0x9cc>
 8004734:	9a02      	ldr	r2, [sp, #8]
 8004736:	2a00      	cmp	r2, #0
 8004738:	db04      	blt.n	8004744 <_dtoa_r+0xa14>
 800473a:	d123      	bne.n	8004784 <_dtoa_r+0xa54>
 800473c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800473e:	bb0a      	cbnz	r2, 8004784 <_dtoa_r+0xa54>
 8004740:	9a08      	ldr	r2, [sp, #32]
 8004742:	b9fa      	cbnz	r2, 8004784 <_dtoa_r+0xa54>
 8004744:	2b00      	cmp	r3, #0
 8004746:	ddec      	ble.n	8004722 <_dtoa_r+0x9f2>
 8004748:	4659      	mov	r1, fp
 800474a:	2201      	movs	r2, #1
 800474c:	4620      	mov	r0, r4
 800474e:	f000 fa85 	bl	8004c5c <__lshift>
 8004752:	4631      	mov	r1, r6
 8004754:	4683      	mov	fp, r0
 8004756:	f000 fad5 	bl	8004d04 <__mcmp>
 800475a:	2800      	cmp	r0, #0
 800475c:	dc03      	bgt.n	8004766 <_dtoa_r+0xa36>
 800475e:	d1e0      	bne.n	8004722 <_dtoa_r+0x9f2>
 8004760:	f018 0f01 	tst.w	r8, #1
 8004764:	d0dd      	beq.n	8004722 <_dtoa_r+0x9f2>
 8004766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800476a:	d1d8      	bne.n	800471e <_dtoa_r+0x9ee>
 800476c:	9b07      	ldr	r3, [sp, #28]
 800476e:	9a07      	ldr	r2, [sp, #28]
 8004770:	1c5d      	adds	r5, r3, #1
 8004772:	2339      	movs	r3, #57	; 0x39
 8004774:	7013      	strb	r3, [r2, #0]
 8004776:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800477a:	1e6a      	subs	r2, r5, #1
 800477c:	2b39      	cmp	r3, #57	; 0x39
 800477e:	d04d      	beq.n	800481c <_dtoa_r+0xaec>
 8004780:	3301      	adds	r3, #1
 8004782:	e052      	b.n	800482a <_dtoa_r+0xafa>
 8004784:	9a07      	ldr	r2, [sp, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f102 0501 	add.w	r5, r2, #1
 800478c:	dd06      	ble.n	800479c <_dtoa_r+0xa6c>
 800478e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004792:	d0eb      	beq.n	800476c <_dtoa_r+0xa3c>
 8004794:	f108 0801 	add.w	r8, r8, #1
 8004798:	9b07      	ldr	r3, [sp, #28]
 800479a:	e7c4      	b.n	8004726 <_dtoa_r+0x9f6>
 800479c:	9b06      	ldr	r3, [sp, #24]
 800479e:	9a04      	ldr	r2, [sp, #16]
 80047a0:	1aeb      	subs	r3, r5, r3
 80047a2:	4293      	cmp	r3, r2
 80047a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80047a8:	d021      	beq.n	80047ee <_dtoa_r+0xabe>
 80047aa:	4659      	mov	r1, fp
 80047ac:	2300      	movs	r3, #0
 80047ae:	220a      	movs	r2, #10
 80047b0:	4620      	mov	r0, r4
 80047b2:	f000 f8dd 	bl	8004970 <__multadd>
 80047b6:	45b9      	cmp	r9, r7
 80047b8:	4683      	mov	fp, r0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	f04f 020a 	mov.w	r2, #10
 80047c2:	4649      	mov	r1, r9
 80047c4:	4620      	mov	r0, r4
 80047c6:	d105      	bne.n	80047d4 <_dtoa_r+0xaa4>
 80047c8:	f000 f8d2 	bl	8004970 <__multadd>
 80047cc:	4681      	mov	r9, r0
 80047ce:	4607      	mov	r7, r0
 80047d0:	9507      	str	r5, [sp, #28]
 80047d2:	e778      	b.n	80046c6 <_dtoa_r+0x996>
 80047d4:	f000 f8cc 	bl	8004970 <__multadd>
 80047d8:	4639      	mov	r1, r7
 80047da:	4681      	mov	r9, r0
 80047dc:	2300      	movs	r3, #0
 80047de:	220a      	movs	r2, #10
 80047e0:	4620      	mov	r0, r4
 80047e2:	f000 f8c5 	bl	8004970 <__multadd>
 80047e6:	4607      	mov	r7, r0
 80047e8:	e7f2      	b.n	80047d0 <_dtoa_r+0xaa0>
 80047ea:	f04f 0900 	mov.w	r9, #0
 80047ee:	4659      	mov	r1, fp
 80047f0:	2201      	movs	r2, #1
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 fa32 	bl	8004c5c <__lshift>
 80047f8:	4631      	mov	r1, r6
 80047fa:	4683      	mov	fp, r0
 80047fc:	f000 fa82 	bl	8004d04 <__mcmp>
 8004800:	2800      	cmp	r0, #0
 8004802:	dcb8      	bgt.n	8004776 <_dtoa_r+0xa46>
 8004804:	d102      	bne.n	800480c <_dtoa_r+0xadc>
 8004806:	f018 0f01 	tst.w	r8, #1
 800480a:	d1b4      	bne.n	8004776 <_dtoa_r+0xa46>
 800480c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004810:	1e6a      	subs	r2, r5, #1
 8004812:	2b30      	cmp	r3, #48	; 0x30
 8004814:	f47f af0f 	bne.w	8004636 <_dtoa_r+0x906>
 8004818:	4615      	mov	r5, r2
 800481a:	e7f7      	b.n	800480c <_dtoa_r+0xadc>
 800481c:	9b06      	ldr	r3, [sp, #24]
 800481e:	4293      	cmp	r3, r2
 8004820:	d105      	bne.n	800482e <_dtoa_r+0xafe>
 8004822:	2331      	movs	r3, #49	; 0x31
 8004824:	9a06      	ldr	r2, [sp, #24]
 8004826:	f10a 0a01 	add.w	sl, sl, #1
 800482a:	7013      	strb	r3, [r2, #0]
 800482c:	e703      	b.n	8004636 <_dtoa_r+0x906>
 800482e:	4615      	mov	r5, r2
 8004830:	e7a1      	b.n	8004776 <_dtoa_r+0xa46>
 8004832:	4b17      	ldr	r3, [pc, #92]	; (8004890 <_dtoa_r+0xb60>)
 8004834:	f7ff bae1 	b.w	8003dfa <_dtoa_r+0xca>
 8004838:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800483a:	2b00      	cmp	r3, #0
 800483c:	f47f aabb 	bne.w	8003db6 <_dtoa_r+0x86>
 8004840:	4b14      	ldr	r3, [pc, #80]	; (8004894 <_dtoa_r+0xb64>)
 8004842:	f7ff bada 	b.w	8003dfa <_dtoa_r+0xca>
 8004846:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004848:	2b01      	cmp	r3, #1
 800484a:	f77f ae3f 	ble.w	80044cc <_dtoa_r+0x79c>
 800484e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004850:	9308      	str	r3, [sp, #32]
 8004852:	e653      	b.n	80044fc <_dtoa_r+0x7cc>
 8004854:	9b04      	ldr	r3, [sp, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	dc03      	bgt.n	8004862 <_dtoa_r+0xb32>
 800485a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800485c:	2b02      	cmp	r3, #2
 800485e:	f73f aed5 	bgt.w	800460c <_dtoa_r+0x8dc>
 8004862:	9d06      	ldr	r5, [sp, #24]
 8004864:	4631      	mov	r1, r6
 8004866:	4658      	mov	r0, fp
 8004868:	f7ff f9d2 	bl	8003c10 <quorem>
 800486c:	9b06      	ldr	r3, [sp, #24]
 800486e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004872:	f805 8b01 	strb.w	r8, [r5], #1
 8004876:	9a04      	ldr	r2, [sp, #16]
 8004878:	1aeb      	subs	r3, r5, r3
 800487a:	429a      	cmp	r2, r3
 800487c:	ddb5      	ble.n	80047ea <_dtoa_r+0xaba>
 800487e:	4659      	mov	r1, fp
 8004880:	2300      	movs	r3, #0
 8004882:	220a      	movs	r2, #10
 8004884:	4620      	mov	r0, r4
 8004886:	f000 f873 	bl	8004970 <__multadd>
 800488a:	4683      	mov	fp, r0
 800488c:	e7ea      	b.n	8004864 <_dtoa_r+0xb34>
 800488e:	bf00      	nop
 8004890:	08005030 	.word	0x08005030
 8004894:	08005032 	.word	0x08005032

08004898 <_localeconv_r>:
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <_localeconv_r+0x14>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6a18      	ldr	r0, [r3, #32]
 800489e:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <_localeconv_r+0x18>)
 80048a0:	2800      	cmp	r0, #0
 80048a2:	bf08      	it	eq
 80048a4:	4618      	moveq	r0, r3
 80048a6:	30f0      	adds	r0, #240	; 0xf0
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	20000070 	.word	0x20000070

080048b4 <malloc>:
 80048b4:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <malloc+0xc>)
 80048b6:	4601      	mov	r1, r0
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	f000 baf9 	b.w	8004eb0 <_malloc_r>
 80048be:	bf00      	nop
 80048c0:	2000000c 	.word	0x2000000c

080048c4 <memcpy>:
 80048c4:	b510      	push	{r4, lr}
 80048c6:	1e43      	subs	r3, r0, #1
 80048c8:	440a      	add	r2, r1
 80048ca:	4291      	cmp	r1, r2
 80048cc:	d100      	bne.n	80048d0 <memcpy+0xc>
 80048ce:	bd10      	pop	{r4, pc}
 80048d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d8:	e7f7      	b.n	80048ca <memcpy+0x6>

080048da <_Balloc>:
 80048da:	b570      	push	{r4, r5, r6, lr}
 80048dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048de:	4604      	mov	r4, r0
 80048e0:	460e      	mov	r6, r1
 80048e2:	b93d      	cbnz	r5, 80048f4 <_Balloc+0x1a>
 80048e4:	2010      	movs	r0, #16
 80048e6:	f7ff ffe5 	bl	80048b4 <malloc>
 80048ea:	6260      	str	r0, [r4, #36]	; 0x24
 80048ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80048f0:	6005      	str	r5, [r0, #0]
 80048f2:	60c5      	str	r5, [r0, #12]
 80048f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80048f6:	68eb      	ldr	r3, [r5, #12]
 80048f8:	b183      	cbz	r3, 800491c <_Balloc+0x42>
 80048fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004902:	b9b8      	cbnz	r0, 8004934 <_Balloc+0x5a>
 8004904:	2101      	movs	r1, #1
 8004906:	fa01 f506 	lsl.w	r5, r1, r6
 800490a:	1d6a      	adds	r2, r5, #5
 800490c:	0092      	lsls	r2, r2, #2
 800490e:	4620      	mov	r0, r4
 8004910:	f000 fabf 	bl	8004e92 <_calloc_r>
 8004914:	b160      	cbz	r0, 8004930 <_Balloc+0x56>
 8004916:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800491a:	e00e      	b.n	800493a <_Balloc+0x60>
 800491c:	2221      	movs	r2, #33	; 0x21
 800491e:	2104      	movs	r1, #4
 8004920:	4620      	mov	r0, r4
 8004922:	f000 fab6 	bl	8004e92 <_calloc_r>
 8004926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004928:	60e8      	str	r0, [r5, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e4      	bne.n	80048fa <_Balloc+0x20>
 8004930:	2000      	movs	r0, #0
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	6802      	ldr	r2, [r0, #0]
 8004936:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800493a:	2300      	movs	r3, #0
 800493c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004940:	e7f7      	b.n	8004932 <_Balloc+0x58>

08004942 <_Bfree>:
 8004942:	b570      	push	{r4, r5, r6, lr}
 8004944:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004946:	4606      	mov	r6, r0
 8004948:	460d      	mov	r5, r1
 800494a:	b93c      	cbnz	r4, 800495c <_Bfree+0x1a>
 800494c:	2010      	movs	r0, #16
 800494e:	f7ff ffb1 	bl	80048b4 <malloc>
 8004952:	6270      	str	r0, [r6, #36]	; 0x24
 8004954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004958:	6004      	str	r4, [r0, #0]
 800495a:	60c4      	str	r4, [r0, #12]
 800495c:	b13d      	cbz	r5, 800496e <_Bfree+0x2c>
 800495e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004960:	686a      	ldr	r2, [r5, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004968:	6029      	str	r1, [r5, #0]
 800496a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800496e:	bd70      	pop	{r4, r5, r6, pc}

08004970 <__multadd>:
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	461f      	mov	r7, r3
 8004976:	4606      	mov	r6, r0
 8004978:	460c      	mov	r4, r1
 800497a:	2300      	movs	r3, #0
 800497c:	690d      	ldr	r5, [r1, #16]
 800497e:	f101 0c14 	add.w	ip, r1, #20
 8004982:	f8dc 0000 	ldr.w	r0, [ip]
 8004986:	3301      	adds	r3, #1
 8004988:	b281      	uxth	r1, r0
 800498a:	fb02 7101 	mla	r1, r2, r1, r7
 800498e:	0c00      	lsrs	r0, r0, #16
 8004990:	0c0f      	lsrs	r7, r1, #16
 8004992:	fb02 7000 	mla	r0, r2, r0, r7
 8004996:	b289      	uxth	r1, r1
 8004998:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800499c:	429d      	cmp	r5, r3
 800499e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80049a2:	f84c 1b04 	str.w	r1, [ip], #4
 80049a6:	dcec      	bgt.n	8004982 <__multadd+0x12>
 80049a8:	b1d7      	cbz	r7, 80049e0 <__multadd+0x70>
 80049aa:	68a3      	ldr	r3, [r4, #8]
 80049ac:	42ab      	cmp	r3, r5
 80049ae:	dc12      	bgt.n	80049d6 <__multadd+0x66>
 80049b0:	6861      	ldr	r1, [r4, #4]
 80049b2:	4630      	mov	r0, r6
 80049b4:	3101      	adds	r1, #1
 80049b6:	f7ff ff90 	bl	80048da <_Balloc>
 80049ba:	4680      	mov	r8, r0
 80049bc:	6922      	ldr	r2, [r4, #16]
 80049be:	f104 010c 	add.w	r1, r4, #12
 80049c2:	3202      	adds	r2, #2
 80049c4:	0092      	lsls	r2, r2, #2
 80049c6:	300c      	adds	r0, #12
 80049c8:	f7ff ff7c 	bl	80048c4 <memcpy>
 80049cc:	4621      	mov	r1, r4
 80049ce:	4630      	mov	r0, r6
 80049d0:	f7ff ffb7 	bl	8004942 <_Bfree>
 80049d4:	4644      	mov	r4, r8
 80049d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80049da:	3501      	adds	r5, #1
 80049dc:	615f      	str	r7, [r3, #20]
 80049de:	6125      	str	r5, [r4, #16]
 80049e0:	4620      	mov	r0, r4
 80049e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049e6 <__hi0bits>:
 80049e6:	0c02      	lsrs	r2, r0, #16
 80049e8:	0412      	lsls	r2, r2, #16
 80049ea:	4603      	mov	r3, r0
 80049ec:	b9b2      	cbnz	r2, 8004a1c <__hi0bits+0x36>
 80049ee:	0403      	lsls	r3, r0, #16
 80049f0:	2010      	movs	r0, #16
 80049f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049f6:	bf04      	itt	eq
 80049f8:	021b      	lsleq	r3, r3, #8
 80049fa:	3008      	addeq	r0, #8
 80049fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004a00:	bf04      	itt	eq
 8004a02:	011b      	lsleq	r3, r3, #4
 8004a04:	3004      	addeq	r0, #4
 8004a06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004a0a:	bf04      	itt	eq
 8004a0c:	009b      	lsleq	r3, r3, #2
 8004a0e:	3002      	addeq	r0, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	db06      	blt.n	8004a22 <__hi0bits+0x3c>
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	d503      	bpl.n	8004a20 <__hi0bits+0x3a>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	4770      	bx	lr
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e7e8      	b.n	80049f2 <__hi0bits+0xc>
 8004a20:	2020      	movs	r0, #32
 8004a22:	4770      	bx	lr

08004a24 <__lo0bits>:
 8004a24:	6803      	ldr	r3, [r0, #0]
 8004a26:	4601      	mov	r1, r0
 8004a28:	f013 0207 	ands.w	r2, r3, #7
 8004a2c:	d00b      	beq.n	8004a46 <__lo0bits+0x22>
 8004a2e:	07da      	lsls	r2, r3, #31
 8004a30:	d423      	bmi.n	8004a7a <__lo0bits+0x56>
 8004a32:	0798      	lsls	r0, r3, #30
 8004a34:	bf49      	itett	mi
 8004a36:	085b      	lsrmi	r3, r3, #1
 8004a38:	089b      	lsrpl	r3, r3, #2
 8004a3a:	2001      	movmi	r0, #1
 8004a3c:	600b      	strmi	r3, [r1, #0]
 8004a3e:	bf5c      	itt	pl
 8004a40:	600b      	strpl	r3, [r1, #0]
 8004a42:	2002      	movpl	r0, #2
 8004a44:	4770      	bx	lr
 8004a46:	b298      	uxth	r0, r3
 8004a48:	b9a8      	cbnz	r0, 8004a76 <__lo0bits+0x52>
 8004a4a:	2010      	movs	r0, #16
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a52:	bf04      	itt	eq
 8004a54:	0a1b      	lsreq	r3, r3, #8
 8004a56:	3008      	addeq	r0, #8
 8004a58:	071a      	lsls	r2, r3, #28
 8004a5a:	bf04      	itt	eq
 8004a5c:	091b      	lsreq	r3, r3, #4
 8004a5e:	3004      	addeq	r0, #4
 8004a60:	079a      	lsls	r2, r3, #30
 8004a62:	bf04      	itt	eq
 8004a64:	089b      	lsreq	r3, r3, #2
 8004a66:	3002      	addeq	r0, #2
 8004a68:	07da      	lsls	r2, r3, #31
 8004a6a:	d402      	bmi.n	8004a72 <__lo0bits+0x4e>
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	d006      	beq.n	8004a7e <__lo0bits+0x5a>
 8004a70:	3001      	adds	r0, #1
 8004a72:	600b      	str	r3, [r1, #0]
 8004a74:	4770      	bx	lr
 8004a76:	4610      	mov	r0, r2
 8004a78:	e7e9      	b.n	8004a4e <__lo0bits+0x2a>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	4770      	bx	lr
 8004a7e:	2020      	movs	r0, #32
 8004a80:	4770      	bx	lr

08004a82 <__i2b>:
 8004a82:	b510      	push	{r4, lr}
 8004a84:	460c      	mov	r4, r1
 8004a86:	2101      	movs	r1, #1
 8004a88:	f7ff ff27 	bl	80048da <_Balloc>
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	6144      	str	r4, [r0, #20]
 8004a90:	6102      	str	r2, [r0, #16]
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <__multiply>:
 8004a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a98:	4614      	mov	r4, r2
 8004a9a:	690a      	ldr	r2, [r1, #16]
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	4688      	mov	r8, r1
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	bfbe      	ittt	lt
 8004aa4:	460b      	movlt	r3, r1
 8004aa6:	46a0      	movlt	r8, r4
 8004aa8:	461c      	movlt	r4, r3
 8004aaa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004aae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004ab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004ab6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004aba:	eb07 0609 	add.w	r6, r7, r9
 8004abe:	42b3      	cmp	r3, r6
 8004ac0:	bfb8      	it	lt
 8004ac2:	3101      	addlt	r1, #1
 8004ac4:	f7ff ff09 	bl	80048da <_Balloc>
 8004ac8:	f100 0514 	add.w	r5, r0, #20
 8004acc:	462b      	mov	r3, r5
 8004ace:	2200      	movs	r2, #0
 8004ad0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004ad4:	4573      	cmp	r3, lr
 8004ad6:	d316      	bcc.n	8004b06 <__multiply+0x72>
 8004ad8:	f104 0214 	add.w	r2, r4, #20
 8004adc:	f108 0114 	add.w	r1, r8, #20
 8004ae0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004ae4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	9b00      	ldr	r3, [sp, #0]
 8004aec:	9201      	str	r2, [sp, #4]
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d80c      	bhi.n	8004b0c <__multiply+0x78>
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	dd03      	ble.n	8004afe <__multiply+0x6a>
 8004af6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d05d      	beq.n	8004bba <__multiply+0x126>
 8004afe:	6106      	str	r6, [r0, #16]
 8004b00:	b003      	add	sp, #12
 8004b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b06:	f843 2b04 	str.w	r2, [r3], #4
 8004b0a:	e7e3      	b.n	8004ad4 <__multiply+0x40>
 8004b0c:	f8b2 b000 	ldrh.w	fp, [r2]
 8004b10:	f1bb 0f00 	cmp.w	fp, #0
 8004b14:	d023      	beq.n	8004b5e <__multiply+0xca>
 8004b16:	4689      	mov	r9, r1
 8004b18:	46ac      	mov	ip, r5
 8004b1a:	f04f 0800 	mov.w	r8, #0
 8004b1e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004b22:	f8dc a000 	ldr.w	sl, [ip]
 8004b26:	b2a3      	uxth	r3, r4
 8004b28:	fa1f fa8a 	uxth.w	sl, sl
 8004b2c:	fb0b a303 	mla	r3, fp, r3, sl
 8004b30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004b34:	f8dc 4000 	ldr.w	r4, [ip]
 8004b38:	4443      	add	r3, r8
 8004b3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004b3e:	fb0b 840a 	mla	r4, fp, sl, r8
 8004b42:	46e2      	mov	sl, ip
 8004b44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b4e:	454f      	cmp	r7, r9
 8004b50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004b54:	f84a 3b04 	str.w	r3, [sl], #4
 8004b58:	d82b      	bhi.n	8004bb2 <__multiply+0x11e>
 8004b5a:	f8cc 8004 	str.w	r8, [ip, #4]
 8004b5e:	9b01      	ldr	r3, [sp, #4]
 8004b60:	3204      	adds	r2, #4
 8004b62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004b66:	f1ba 0f00 	cmp.w	sl, #0
 8004b6a:	d020      	beq.n	8004bae <__multiply+0x11a>
 8004b6c:	4689      	mov	r9, r1
 8004b6e:	46a8      	mov	r8, r5
 8004b70:	f04f 0b00 	mov.w	fp, #0
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	f8b9 c000 	ldrh.w	ip, [r9]
 8004b7a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	fb0a 440c 	mla	r4, sl, ip, r4
 8004b84:	46c4      	mov	ip, r8
 8004b86:	445c      	add	r4, fp
 8004b88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b8c:	f84c 3b04 	str.w	r3, [ip], #4
 8004b90:	f859 3b04 	ldr.w	r3, [r9], #4
 8004b94:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	fb0a b303 	mla	r3, sl, r3, fp
 8004b9e:	454f      	cmp	r7, r9
 8004ba0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004ba4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004ba8:	d805      	bhi.n	8004bb6 <__multiply+0x122>
 8004baa:	f8c8 3004 	str.w	r3, [r8, #4]
 8004bae:	3504      	adds	r5, #4
 8004bb0:	e79b      	b.n	8004aea <__multiply+0x56>
 8004bb2:	46d4      	mov	ip, sl
 8004bb4:	e7b3      	b.n	8004b1e <__multiply+0x8a>
 8004bb6:	46e0      	mov	r8, ip
 8004bb8:	e7dd      	b.n	8004b76 <__multiply+0xe2>
 8004bba:	3e01      	subs	r6, #1
 8004bbc:	e799      	b.n	8004af2 <__multiply+0x5e>
	...

08004bc0 <__pow5mult>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4615      	mov	r5, r2
 8004bc6:	f012 0203 	ands.w	r2, r2, #3
 8004bca:	4606      	mov	r6, r0
 8004bcc:	460f      	mov	r7, r1
 8004bce:	d007      	beq.n	8004be0 <__pow5mult+0x20>
 8004bd0:	4c21      	ldr	r4, [pc, #132]	; (8004c58 <__pow5mult+0x98>)
 8004bd2:	3a01      	subs	r2, #1
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bda:	f7ff fec9 	bl	8004970 <__multadd>
 8004bde:	4607      	mov	r7, r0
 8004be0:	10ad      	asrs	r5, r5, #2
 8004be2:	d035      	beq.n	8004c50 <__pow5mult+0x90>
 8004be4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004be6:	b93c      	cbnz	r4, 8004bf8 <__pow5mult+0x38>
 8004be8:	2010      	movs	r0, #16
 8004bea:	f7ff fe63 	bl	80048b4 <malloc>
 8004bee:	6270      	str	r0, [r6, #36]	; 0x24
 8004bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004bf4:	6004      	str	r4, [r0, #0]
 8004bf6:	60c4      	str	r4, [r0, #12]
 8004bf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c00:	b94c      	cbnz	r4, 8004c16 <__pow5mult+0x56>
 8004c02:	f240 2171 	movw	r1, #625	; 0x271
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7ff ff3b 	bl	8004a82 <__i2b>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4604      	mov	r4, r0
 8004c10:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c14:	6003      	str	r3, [r0, #0]
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	07eb      	lsls	r3, r5, #31
 8004c1c:	d50a      	bpl.n	8004c34 <__pow5mult+0x74>
 8004c1e:	4639      	mov	r1, r7
 8004c20:	4622      	mov	r2, r4
 8004c22:	4630      	mov	r0, r6
 8004c24:	f7ff ff36 	bl	8004a94 <__multiply>
 8004c28:	4681      	mov	r9, r0
 8004c2a:	4639      	mov	r1, r7
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f7ff fe88 	bl	8004942 <_Bfree>
 8004c32:	464f      	mov	r7, r9
 8004c34:	106d      	asrs	r5, r5, #1
 8004c36:	d00b      	beq.n	8004c50 <__pow5mult+0x90>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	b938      	cbnz	r0, 8004c4c <__pow5mult+0x8c>
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4630      	mov	r0, r6
 8004c42:	f7ff ff27 	bl	8004a94 <__multiply>
 8004c46:	6020      	str	r0, [r4, #0]
 8004c48:	f8c0 8000 	str.w	r8, [r0]
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	e7e4      	b.n	8004c1a <__pow5mult+0x5a>
 8004c50:	4638      	mov	r0, r7
 8004c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c56:	bf00      	nop
 8004c58:	08005130 	.word	0x08005130

08004c5c <__lshift>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	460c      	mov	r4, r1
 8004c62:	4607      	mov	r7, r0
 8004c64:	4616      	mov	r6, r2
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c6c:	eb0a 0903 	add.w	r9, sl, r3
 8004c70:	6849      	ldr	r1, [r1, #4]
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	f109 0501 	add.w	r5, r9, #1
 8004c78:	42ab      	cmp	r3, r5
 8004c7a:	db32      	blt.n	8004ce2 <__lshift+0x86>
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff fe2c 	bl	80048da <_Balloc>
 8004c82:	2300      	movs	r3, #0
 8004c84:	4680      	mov	r8, r0
 8004c86:	461a      	mov	r2, r3
 8004c88:	f100 0114 	add.w	r1, r0, #20
 8004c8c:	4553      	cmp	r3, sl
 8004c8e:	db2b      	blt.n	8004ce8 <__lshift+0x8c>
 8004c90:	6920      	ldr	r0, [r4, #16]
 8004c92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c96:	f104 0314 	add.w	r3, r4, #20
 8004c9a:	f016 021f 	ands.w	r2, r6, #31
 8004c9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ca2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ca6:	d025      	beq.n	8004cf4 <__lshift+0x98>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f1c2 0e20 	rsb	lr, r2, #32
 8004cae:	468a      	mov	sl, r1
 8004cb0:	681e      	ldr	r6, [r3, #0]
 8004cb2:	4096      	lsls	r6, r2
 8004cb4:	4330      	orrs	r0, r6
 8004cb6:	f84a 0b04 	str.w	r0, [sl], #4
 8004cba:	f853 0b04 	ldr.w	r0, [r3], #4
 8004cbe:	459c      	cmp	ip, r3
 8004cc0:	fa20 f00e 	lsr.w	r0, r0, lr
 8004cc4:	d814      	bhi.n	8004cf0 <__lshift+0x94>
 8004cc6:	6048      	str	r0, [r1, #4]
 8004cc8:	b108      	cbz	r0, 8004cce <__lshift+0x72>
 8004cca:	f109 0502 	add.w	r5, r9, #2
 8004cce:	3d01      	subs	r5, #1
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f8c8 5010 	str.w	r5, [r8, #16]
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	f7ff fe33 	bl	8004942 <_Bfree>
 8004cdc:	4640      	mov	r0, r8
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	3101      	adds	r1, #1
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	e7c7      	b.n	8004c78 <__lshift+0x1c>
 8004ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004cec:	3301      	adds	r3, #1
 8004cee:	e7cd      	b.n	8004c8c <__lshift+0x30>
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	e7dc      	b.n	8004cae <__lshift+0x52>
 8004cf4:	3904      	subs	r1, #4
 8004cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cfa:	459c      	cmp	ip, r3
 8004cfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d00:	d8f9      	bhi.n	8004cf6 <__lshift+0x9a>
 8004d02:	e7e4      	b.n	8004cce <__lshift+0x72>

08004d04 <__mcmp>:
 8004d04:	6903      	ldr	r3, [r0, #16]
 8004d06:	690a      	ldr	r2, [r1, #16]
 8004d08:	b530      	push	{r4, r5, lr}
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	d10c      	bne.n	8004d28 <__mcmp+0x24>
 8004d0e:	0092      	lsls	r2, r2, #2
 8004d10:	3014      	adds	r0, #20
 8004d12:	3114      	adds	r1, #20
 8004d14:	1884      	adds	r4, r0, r2
 8004d16:	4411      	add	r1, r2
 8004d18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d20:	4295      	cmp	r5, r2
 8004d22:	d003      	beq.n	8004d2c <__mcmp+0x28>
 8004d24:	d305      	bcc.n	8004d32 <__mcmp+0x2e>
 8004d26:	2301      	movs	r3, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd30      	pop	{r4, r5, pc}
 8004d2c:	42a0      	cmp	r0, r4
 8004d2e:	d3f3      	bcc.n	8004d18 <__mcmp+0x14>
 8004d30:	e7fa      	b.n	8004d28 <__mcmp+0x24>
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	e7f7      	b.n	8004d28 <__mcmp+0x24>

08004d38 <__mdiff>:
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	4607      	mov	r7, r0
 8004d40:	4611      	mov	r1, r2
 8004d42:	4628      	mov	r0, r5
 8004d44:	4614      	mov	r4, r2
 8004d46:	f7ff ffdd 	bl	8004d04 <__mcmp>
 8004d4a:	1e06      	subs	r6, r0, #0
 8004d4c:	d108      	bne.n	8004d60 <__mdiff+0x28>
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7ff fdc2 	bl	80048da <_Balloc>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d60:	bfa4      	itt	ge
 8004d62:	4623      	movge	r3, r4
 8004d64:	462c      	movge	r4, r5
 8004d66:	4638      	mov	r0, r7
 8004d68:	6861      	ldr	r1, [r4, #4]
 8004d6a:	bfa6      	itte	ge
 8004d6c:	461d      	movge	r5, r3
 8004d6e:	2600      	movge	r6, #0
 8004d70:	2601      	movlt	r6, #1
 8004d72:	f7ff fdb2 	bl	80048da <_Balloc>
 8004d76:	f04f 0e00 	mov.w	lr, #0
 8004d7a:	60c6      	str	r6, [r0, #12]
 8004d7c:	692b      	ldr	r3, [r5, #16]
 8004d7e:	6926      	ldr	r6, [r4, #16]
 8004d80:	f104 0214 	add.w	r2, r4, #20
 8004d84:	f105 0914 	add.w	r9, r5, #20
 8004d88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004d8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d90:	f100 0114 	add.w	r1, r0, #20
 8004d94:	f852 ab04 	ldr.w	sl, [r2], #4
 8004d98:	f859 5b04 	ldr.w	r5, [r9], #4
 8004d9c:	fa1f f38a 	uxth.w	r3, sl
 8004da0:	4473      	add	r3, lr
 8004da2:	b2ac      	uxth	r4, r5
 8004da4:	1b1b      	subs	r3, r3, r4
 8004da6:	0c2c      	lsrs	r4, r5, #16
 8004da8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004dac:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004db6:	45c8      	cmp	r8, r9
 8004db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004dbc:	4694      	mov	ip, r2
 8004dbe:	f841 4b04 	str.w	r4, [r1], #4
 8004dc2:	d8e7      	bhi.n	8004d94 <__mdiff+0x5c>
 8004dc4:	45bc      	cmp	ip, r7
 8004dc6:	d304      	bcc.n	8004dd2 <__mdiff+0x9a>
 8004dc8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004dcc:	b183      	cbz	r3, 8004df0 <__mdiff+0xb8>
 8004dce:	6106      	str	r6, [r0, #16]
 8004dd0:	e7c4      	b.n	8004d5c <__mdiff+0x24>
 8004dd2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004dd6:	b2a2      	uxth	r2, r4
 8004dd8:	4472      	add	r2, lr
 8004dda:	1413      	asrs	r3, r2, #16
 8004ddc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004de0:	b292      	uxth	r2, r2
 8004de2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004de6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004dea:	f841 2b04 	str.w	r2, [r1], #4
 8004dee:	e7e9      	b.n	8004dc4 <__mdiff+0x8c>
 8004df0:	3e01      	subs	r6, #1
 8004df2:	e7e9      	b.n	8004dc8 <__mdiff+0x90>

08004df4 <__d2b>:
 8004df4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004df8:	461c      	mov	r4, r3
 8004dfa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4690      	mov	r8, r2
 8004e02:	f7ff fd6a 	bl	80048da <_Balloc>
 8004e06:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004e0a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004e0e:	4607      	mov	r7, r0
 8004e10:	bb34      	cbnz	r4, 8004e60 <__d2b+0x6c>
 8004e12:	9201      	str	r2, [sp, #4]
 8004e14:	f1b8 0200 	subs.w	r2, r8, #0
 8004e18:	d027      	beq.n	8004e6a <__d2b+0x76>
 8004e1a:	a802      	add	r0, sp, #8
 8004e1c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004e20:	f7ff fe00 	bl	8004a24 <__lo0bits>
 8004e24:	9900      	ldr	r1, [sp, #0]
 8004e26:	b1f0      	cbz	r0, 8004e66 <__d2b+0x72>
 8004e28:	9a01      	ldr	r2, [sp, #4]
 8004e2a:	f1c0 0320 	rsb	r3, r0, #32
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	430b      	orrs	r3, r1
 8004e34:	40c2      	lsrs	r2, r0
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	9201      	str	r2, [sp, #4]
 8004e3a:	9b01      	ldr	r3, [sp, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2102      	movne	r1, #2
 8004e42:	2101      	moveq	r1, #1
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	6139      	str	r1, [r7, #16]
 8004e48:	b1c4      	cbz	r4, 8004e7c <__d2b+0x88>
 8004e4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004e4e:	4404      	add	r4, r0
 8004e50:	6034      	str	r4, [r6, #0]
 8004e52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e56:	6028      	str	r0, [r5, #0]
 8004e58:	4638      	mov	r0, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e64:	e7d5      	b.n	8004e12 <__d2b+0x1e>
 8004e66:	6179      	str	r1, [r7, #20]
 8004e68:	e7e7      	b.n	8004e3a <__d2b+0x46>
 8004e6a:	a801      	add	r0, sp, #4
 8004e6c:	f7ff fdda 	bl	8004a24 <__lo0bits>
 8004e70:	2101      	movs	r1, #1
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	6139      	str	r1, [r7, #16]
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	3020      	adds	r0, #32
 8004e7a:	e7e5      	b.n	8004e48 <__d2b+0x54>
 8004e7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e80:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	6918      	ldr	r0, [r3, #16]
 8004e88:	f7ff fdad 	bl	80049e6 <__hi0bits>
 8004e8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e90:	e7e1      	b.n	8004e56 <__d2b+0x62>

08004e92 <_calloc_r>:
 8004e92:	b538      	push	{r3, r4, r5, lr}
 8004e94:	fb02 f401 	mul.w	r4, r2, r1
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f000 f809 	bl	8004eb0 <_malloc_r>
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	b118      	cbz	r0, 8004eaa <_calloc_r+0x18>
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	f7fe fb6d 	bl	8003584 <memset>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	bd38      	pop	{r3, r4, r5, pc}
	...

08004eb0 <_malloc_r>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	1ccd      	adds	r5, r1, #3
 8004eb4:	f025 0503 	bic.w	r5, r5, #3
 8004eb8:	3508      	adds	r5, #8
 8004eba:	2d0c      	cmp	r5, #12
 8004ebc:	bf38      	it	cc
 8004ebe:	250c      	movcc	r5, #12
 8004ec0:	2d00      	cmp	r5, #0
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	db01      	blt.n	8004eca <_malloc_r+0x1a>
 8004ec6:	42a9      	cmp	r1, r5
 8004ec8:	d903      	bls.n	8004ed2 <_malloc_r+0x22>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	6033      	str	r3, [r6, #0]
 8004ece:	2000      	movs	r0, #0
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
 8004ed2:	f000 f869 	bl	8004fa8 <__malloc_lock>
 8004ed6:	4a21      	ldr	r2, [pc, #132]	; (8004f5c <_malloc_r+0xac>)
 8004ed8:	6814      	ldr	r4, [r2, #0]
 8004eda:	4621      	mov	r1, r4
 8004edc:	b991      	cbnz	r1, 8004f04 <_malloc_r+0x54>
 8004ede:	4c20      	ldr	r4, [pc, #128]	; (8004f60 <_malloc_r+0xb0>)
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	b91b      	cbnz	r3, 8004eec <_malloc_r+0x3c>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f83d 	bl	8004f64 <_sbrk_r>
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	4629      	mov	r1, r5
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f000 f838 	bl	8004f64 <_sbrk_r>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d124      	bne.n	8004f42 <_malloc_r+0x92>
 8004ef8:	230c      	movs	r3, #12
 8004efa:	4630      	mov	r0, r6
 8004efc:	6033      	str	r3, [r6, #0]
 8004efe:	f000 f854 	bl	8004faa <__malloc_unlock>
 8004f02:	e7e4      	b.n	8004ece <_malloc_r+0x1e>
 8004f04:	680b      	ldr	r3, [r1, #0]
 8004f06:	1b5b      	subs	r3, r3, r5
 8004f08:	d418      	bmi.n	8004f3c <_malloc_r+0x8c>
 8004f0a:	2b0b      	cmp	r3, #11
 8004f0c:	d90f      	bls.n	8004f2e <_malloc_r+0x7e>
 8004f0e:	600b      	str	r3, [r1, #0]
 8004f10:	18cc      	adds	r4, r1, r3
 8004f12:	50cd      	str	r5, [r1, r3]
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 f848 	bl	8004faa <__malloc_unlock>
 8004f1a:	f104 000b 	add.w	r0, r4, #11
 8004f1e:	1d23      	adds	r3, r4, #4
 8004f20:	f020 0007 	bic.w	r0, r0, #7
 8004f24:	1ac3      	subs	r3, r0, r3
 8004f26:	d0d3      	beq.n	8004ed0 <_malloc_r+0x20>
 8004f28:	425a      	negs	r2, r3
 8004f2a:	50e2      	str	r2, [r4, r3]
 8004f2c:	e7d0      	b.n	8004ed0 <_malloc_r+0x20>
 8004f2e:	684b      	ldr	r3, [r1, #4]
 8004f30:	428c      	cmp	r4, r1
 8004f32:	bf16      	itet	ne
 8004f34:	6063      	strne	r3, [r4, #4]
 8004f36:	6013      	streq	r3, [r2, #0]
 8004f38:	460c      	movne	r4, r1
 8004f3a:	e7eb      	b.n	8004f14 <_malloc_r+0x64>
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	6849      	ldr	r1, [r1, #4]
 8004f40:	e7cc      	b.n	8004edc <_malloc_r+0x2c>
 8004f42:	1cc4      	adds	r4, r0, #3
 8004f44:	f024 0403 	bic.w	r4, r4, #3
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d005      	beq.n	8004f58 <_malloc_r+0xa8>
 8004f4c:	1a21      	subs	r1, r4, r0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f000 f808 	bl	8004f64 <_sbrk_r>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d0cf      	beq.n	8004ef8 <_malloc_r+0x48>
 8004f58:	6025      	str	r5, [r4, #0]
 8004f5a:	e7db      	b.n	8004f14 <_malloc_r+0x64>
 8004f5c:	200001fc 	.word	0x200001fc
 8004f60:	20000200 	.word	0x20000200

08004f64 <_sbrk_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	2300      	movs	r3, #0
 8004f68:	4c05      	ldr	r4, [pc, #20]	; (8004f80 <_sbrk_r+0x1c>)
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	f7fc f858 	bl	8001024 <_sbrk>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_sbrk_r+0x1a>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_sbrk_r+0x1a>
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	2000029c 	.word	0x2000029c

08004f84 <__ascii_mbtowc>:
 8004f84:	b082      	sub	sp, #8
 8004f86:	b901      	cbnz	r1, 8004f8a <__ascii_mbtowc+0x6>
 8004f88:	a901      	add	r1, sp, #4
 8004f8a:	b142      	cbz	r2, 8004f9e <__ascii_mbtowc+0x1a>
 8004f8c:	b14b      	cbz	r3, 8004fa2 <__ascii_mbtowc+0x1e>
 8004f8e:	7813      	ldrb	r3, [r2, #0]
 8004f90:	600b      	str	r3, [r1, #0]
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	1c10      	adds	r0, r2, #0
 8004f96:	bf18      	it	ne
 8004f98:	2001      	movne	r0, #1
 8004f9a:	b002      	add	sp, #8
 8004f9c:	4770      	bx	lr
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	e7fb      	b.n	8004f9a <__ascii_mbtowc+0x16>
 8004fa2:	f06f 0001 	mvn.w	r0, #1
 8004fa6:	e7f8      	b.n	8004f9a <__ascii_mbtowc+0x16>

08004fa8 <__malloc_lock>:
 8004fa8:	4770      	bx	lr

08004faa <__malloc_unlock>:
 8004faa:	4770      	bx	lr

08004fac <__ascii_wctomb>:
 8004fac:	b149      	cbz	r1, 8004fc2 <__ascii_wctomb+0x16>
 8004fae:	2aff      	cmp	r2, #255	; 0xff
 8004fb0:	bf8b      	itete	hi
 8004fb2:	238a      	movhi	r3, #138	; 0x8a
 8004fb4:	700a      	strbls	r2, [r1, #0]
 8004fb6:	6003      	strhi	r3, [r0, #0]
 8004fb8:	2001      	movls	r0, #1
 8004fba:	bf88      	it	hi
 8004fbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8004fc0:	4770      	bx	lr
 8004fc2:	4608      	mov	r0, r1
 8004fc4:	4770      	bx	lr
	...

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
