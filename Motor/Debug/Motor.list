
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08005fb8  08005fb8  00015fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c8  080062c8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080062c8  080062c8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062c8  080062c8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080062d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  080064ac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080064ac  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd71  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021d9  00000000  00000000  0002cf76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  0002ff38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e03  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a723  00000000  00000000  000469fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074f66  00000000  00000000  0005111e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a0  00000000  00000000  000c6100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f9c 	.word	0x08005f9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005f9c 	.word	0x08005f9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <encoder_init>:
#define MAX_COUNT_ENCODER_HEX 0x60
volatile float angle;



void encoder_init(){
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPBEN;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <encoder_init+0x60>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <encoder_init+0x60>)
 8000a92:	f043 0309 	orr.w	r3, r3, #9
 8000a96:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; //AFIO might not even be needed?
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <encoder_init+0x60>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <encoder_init+0x60>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	61d3      	str	r3, [r2, #28]

	// value to count up to : 16 bit so max is 0xFFFF = 65535
	TIM4->ARR = MAX_COUNT_ENCODER_HEX;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <encoder_init+0x64>)
 8000aa6:	2260      	movs	r2, #96	; 0x60
 8000aa8:	62da      	str	r2, [r3, #44]	; 0x2c

	//per datasheet instructions
	TIM4->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0 );  //step 1 and 2
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <encoder_init+0x64>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <encoder_init+0x64>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);  // step 3 and 4
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <encoder_init+0x64>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <encoder_init+0x64>)
 8000ac0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ac4:	6213      	str	r3, [r2, #32]
	TIM4->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;   //step 5
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <encoder_init+0x64>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <encoder_init+0x64>)
 8000acc:	f043 0303 	orr.w	r3, r3, #3
 8000ad0:	6093      	str	r3, [r2, #8]
	TIM4->CR1 |= TIM_CR1_CEN ;     //step 6
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <encoder_init+0x64>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <encoder_init+0x64>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6013      	str	r3, [r2, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40000800 	.word	0x40000800

08000af0 <encoder_get_count>:

uint16_t encoder_get_count(){
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	return TIM4->CNT;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <encoder_get_count+0x14>)
 8000af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40000800 	.word	0x40000800

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f000 fbd4 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f820 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f000 f964 	bl	8000de0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b18:	f000 f870 	bl	8000bfc <MX_RTC_Init>
  MX_TIM2_Init();
 8000b1c:	f000 f8b8 	bl	8000c90 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b20:	f000 f934 	bl	8000d8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000b24:	2100      	movs	r1, #0
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <main+0x44>)
 8000b28:	f002 f840 	bl	8002bac <HAL_TIM_PWM_Start>
  encoder_init();
 8000b2c:	f7ff ffac 	bl	8000a88 <encoder_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_blink();
 8000b30:	f000 f9ae 	bl	8000e90 <test_blink>
	  printf("count: %d\n\r",encoder_get_count());
 8000b34:	f7ff ffdc 	bl	8000af0 <encoder_get_count>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <main+0x48>)
 8000b3e:	f003 fb59 	bl	80041f4 <iprintf>
	  HAL_Delay(100);
 8000b42:	2064      	movs	r0, #100	; 0x64
 8000b44:	f000 fc1a 	bl	800137c <HAL_Delay>
  {
 8000b48:	e7f2      	b.n	8000b30 <main+0x28>
 8000b4a:	bf00      	nop
 8000b4c:	20000218 	.word	0x20000218
 8000b50:	08005fb8 	.word	0x08005fb8

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	2228      	movs	r2, #40	; 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 feee 	bl	8003944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b84:	230a      	movs	r3, #10
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fe89 	bl	80018b4 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f96c 	bl	8000e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	230f      	movs	r3, #15
 8000bae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f8f4 	bl	8001db4 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bd2:	f000 f957 	bl	8000e84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fa82 	bl	80020ec <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bee:	f000 f949 	bl	8000e84 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3750      	adds	r7, #80	; 0x50
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2100      	movs	r1, #0
 8000c06:	460a      	mov	r2, r1
 8000c08:	801a      	strh	r2, [r3, #0]
 8000c0a:	460a      	mov	r2, r1
 8000c0c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_RTC_Init+0x8c>)
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <MX_RTC_Init+0x90>)
 8000c16:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_RTC_Init+0x8c>)
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_RTC_Init+0x8c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_RTC_Init+0x8c>)
 8000c28:	f001 fbd2 	bl	80023d0 <HAL_RTC_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000c32:	f000 f927 	bl	8000e84 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2201      	movs	r2, #1
 8000c46:	4619      	mov	r1, r3
 8000c48:	480f      	ldr	r0, [pc, #60]	; (8000c88 <MX_RTC_Init+0x8c>)
 8000c4a:	f001 fc57 	bl	80024fc <HAL_RTC_SetTime>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 f916 	bl	8000e84 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_RTC_Init+0x8c>)
 8000c70:	f001 fcdc 	bl	800262c <HAL_RTC_SetDate>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000c7a:	f000 f903 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000204 	.word	0x20000204
 8000c8c:	40002800 	.word	0x40002800

08000c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000cca:	224f      	movs	r2, #79	; 0x4f
 8000ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2019;
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000cd6:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8000cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce8:	4827      	ldr	r0, [pc, #156]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000cea:	f001 feff 	bl	8002aec <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cf4:	f000 f8c6 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4820      	ldr	r0, [pc, #128]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000d06:	f002 f849 	bl	8002d9c <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d10:	f000 f8b8 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d14:	481c      	ldr	r0, [pc, #112]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000d16:	f001 ff14 	bl	8002b42 <HAL_TIM_PWM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d20:	f000 f8b0 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4619      	mov	r1, r3
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000d34:	f002 fb8e 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d3e:	f000 f8a1 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	; 0x60
 8000d44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000d5a:	f001 ff59 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d64:	f000 f88e 	bl	8000e84 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	699a      	ldr	r2, [r3, #24]
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0208 	bic.w	r2, r2, #8
 8000d76:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <MX_TIM2_Init+0xf8>)
 8000d7a:	f000 f909 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000218 	.word	0x20000218

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART2_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f002 fb8a 	bl	80034dc <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 f859 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000258 	.word	0x20000258
 8000ddc:	40004400 	.word	0x40004400

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_GPIO_Init+0x7c>)
 8000e2c:	f000 fd06 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_GPIO_Init+0x7c>)
 8000e4a:	f000 fb9d 	bl	8001588 <HAL_GPIO_Init>

}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40011000 	.word	0x40011000

08000e60 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e68:	1d39      	adds	r1, r7, #4
 8000e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <__io_putchar+0x20>)
 8000e72:	f002 fb80 	bl	8003576 <HAL_UART_Transmit>

  return ch;
 8000e76:	687b      	ldr	r3, [r7, #4]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000258 	.word	0x20000258

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <test_blink>:


#define A 	1
#define B  	0

void test_blink(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <test_blink+0x18>)
 8000e9a:	f000 fce7 	bl	800186c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f000 fa6c 	bl	800137c <HAL_Delay>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40011000 	.word	0x40011000

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_MspInit+0x60>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_MspInit+0x60>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000

08000f10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_RTC_MspInit+0x3c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d110      	bne.n	8000f44 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000f22:	f000 fcbb 	bl	800189c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_RTC_MspInit+0x40>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_RTC_MspInit+0x40>)
 8000f2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_RTC_MspInit+0x40>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_RTC_MspInit+0x44>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40002800 	.word	0x40002800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	4242043c 	.word	0x4242043c

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f68:	d10b      	bne.n	8000f82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_TIM_Base_MspInit+0x34>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_TIM_Base_MspInit+0x34>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_TIM_Base_MspInit+0x34>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fae:	d117      	bne.n	8000fe0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_TIM_MspPostInit+0x58>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_TIM_MspPostInit+0x58>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_TIM_MspPostInit+0x58>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <HAL_TIM_MspPostInit+0x5c>)
 8000fdc:	f000 fad4 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800

08000ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_UART_MspInit+0x88>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d12f      	bne.n	8001070 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_UART_MspInit+0x8c>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0x8c>)
 8001016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101a:	61d3      	str	r3, [r2, #28]
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0x8c>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0x8c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_UART_MspInit+0x8c>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x8c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001040:	2304      	movs	r3, #4
 8001042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <HAL_UART_MspInit+0x90>)
 8001054:	f000 fa98 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001058:	2308      	movs	r3, #8
 800105a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_UART_MspInit+0x90>)
 800106c:	f000 fa8c 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000
 8001080:	40010800 	.word	0x40010800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <HardFault_Handler+0x4>

08001096 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <BusFault_Handler+0x4>

080010a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f938 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_read>:
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e00a      	b.n	8001100 <_read+0x28>
 80010ea:	f3af 8000 	nop.w
 80010ee:	4601      	mov	r1, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	b2ca      	uxtb	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf0      	blt.n	80010ea <_read+0x12>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_write>:
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e009      	b.n	8001138 <_write+0x26>
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60ba      	str	r2, [r7, #8]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe97 	bl	8000e60 <__io_putchar>
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	dbf1      	blt.n	8001124 <_write+0x12>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_close>:
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <_fstat>:
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	2300      	movs	r3, #0
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <_isatty>:
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	2301      	movs	r3, #1
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <_lseek>:
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	2300      	movs	r3, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <_sbrk>:
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x50>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x16>
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <_sbrk+0x50>)
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <_sbrk+0x54>)
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <_sbrk+0x50>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <_sbrk+0x50>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	466a      	mov	r2, sp
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d907      	bls.n	80011e6 <_sbrk+0x3a>
 80011d6:	f002 fb8b 	bl	80038f0 <__errno>
 80011da:	4602      	mov	r2, r0
 80011dc:	230c      	movs	r3, #12
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	e006      	b.n	80011f4 <_sbrk+0x48>
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <_sbrk+0x50>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a03      	ldr	r2, [pc, #12]	; (80011fc <_sbrk+0x50>)
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200001f8 	.word	0x200001f8
 8001200:	200002a0 	.word	0x200002a0

08001204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <SystemInit+0x5c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <SystemInit+0x5c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <SystemInit+0x5c>)
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4911      	ldr	r1, [pc, #68]	; (8001260 <SystemInit+0x5c>)
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <SystemInit+0x60>)
 800121c:	4013      	ands	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <SystemInit+0x5c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <SystemInit+0x5c>)
 8001226:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <SystemInit+0x5c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SystemInit+0x5c>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <SystemInit+0x5c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <SystemInit+0x5c>)
 8001242:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001246:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SystemInit+0x5c>)
 800124a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800124e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SystemInit+0x64>)
 8001252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001256:	609a      	str	r2, [r3, #8]
#endif 
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	f8ff0000 	.word	0xf8ff0000
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:
 800126c:	2100      	movs	r1, #0
 800126e:	e003      	b.n	8001278 <LoopCopyDataInit>

08001270 <CopyDataInit>:
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <LoopFillZerobss+0x14>)
 8001272:	585b      	ldr	r3, [r3, r1]
 8001274:	5043      	str	r3, [r0, r1]
 8001276:	3104      	adds	r1, #4

08001278 <LoopCopyDataInit>:
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <LoopFillZerobss+0x18>)
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <LoopFillZerobss+0x1c>)
 800127c:	1842      	adds	r2, r0, r1
 800127e:	429a      	cmp	r2, r3
 8001280:	d3f6      	bcc.n	8001270 <CopyDataInit>
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopFillZerobss+0x20>)
 8001284:	e002      	b.n	800128c <LoopFillZerobss>

08001286 <FillZerobss>:
 8001286:	2300      	movs	r3, #0
 8001288:	f842 3b04 	str.w	r3, [r2], #4

0800128c <LoopFillZerobss>:
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <LoopFillZerobss+0x24>)
 800128e:	429a      	cmp	r2, r3
 8001290:	d3f9      	bcc.n	8001286 <FillZerobss>
 8001292:	f7ff ffb7 	bl	8001204 <SystemInit>
 8001296:	f002 fb31 	bl	80038fc <__libc_init_array>
 800129a:	f7ff fc35 	bl	8000b08 <main>
 800129e:	4770      	bx	lr
 80012a0:	080062d0 	.word	0x080062d0
 80012a4:	20000000 	.word	0x20000000
 80012a8:	200001dc 	.word	0x200001dc
 80012ac:	200001dc 	.word	0x200001dc
 80012b0:	200002a0 	.word	0x200002a0

080012b4 <ADC1_2_IRQHandler>:
 80012b4:	e7fe      	b.n	80012b4 <ADC1_2_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x28>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x28>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f929 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fdea 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f933 	bl	800156e <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f909 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_IncTick+0x1c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x20>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a03      	ldr	r2, [pc, #12]	; (8001364 <HAL_IncTick+0x20>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000008 	.word	0x20000008
 8001364:	20000298 	.word	0x20000298

08001368 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b02      	ldr	r3, [pc, #8]	; (8001378 <HAL_GetTick+0x10>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000298 	.word	0x20000298

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff fff0 	bl	8001368 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_Delay+0x40>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffe0 	bl	8001368 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000008 	.word	0x20000008

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff90 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff49 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff5e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffb0 	bl	80014dc <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b08b      	sub	sp, #44	; 0x2c
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	e127      	b.n	80017ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800159c:	2201      	movs	r2, #1
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 8116 	bne.w	80017e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d034      	beq.n	800162c <HAL_GPIO_Init+0xa4>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d80d      	bhi.n	80015e2 <HAL_GPIO_Init+0x5a>
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d02b      	beq.n	8001622 <HAL_GPIO_Init+0x9a>
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d804      	bhi.n	80015d8 <HAL_GPIO_Init+0x50>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d031      	beq.n	8001636 <HAL_GPIO_Init+0xae>
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d01c      	beq.n	8001610 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015d6:	e048      	b.n	800166a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d043      	beq.n	8001664 <HAL_GPIO_Init+0xdc>
 80015dc:	2b11      	cmp	r3, #17
 80015de:	d01b      	beq.n	8001618 <HAL_GPIO_Init+0x90>
          break;
 80015e0:	e043      	b.n	800166a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015e2:	4a89      	ldr	r2, [pc, #548]	; (8001808 <HAL_GPIO_Init+0x280>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d026      	beq.n	8001636 <HAL_GPIO_Init+0xae>
 80015e8:	4a87      	ldr	r2, [pc, #540]	; (8001808 <HAL_GPIO_Init+0x280>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d806      	bhi.n	80015fc <HAL_GPIO_Init+0x74>
 80015ee:	4a87      	ldr	r2, [pc, #540]	; (800180c <HAL_GPIO_Init+0x284>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d020      	beq.n	8001636 <HAL_GPIO_Init+0xae>
 80015f4:	4a86      	ldr	r2, [pc, #536]	; (8001810 <HAL_GPIO_Init+0x288>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01d      	beq.n	8001636 <HAL_GPIO_Init+0xae>
          break;
 80015fa:	e036      	b.n	800166a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015fc:	4a85      	ldr	r2, [pc, #532]	; (8001814 <HAL_GPIO_Init+0x28c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0xae>
 8001602:	4a85      	ldr	r2, [pc, #532]	; (8001818 <HAL_GPIO_Init+0x290>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d016      	beq.n	8001636 <HAL_GPIO_Init+0xae>
 8001608:	4a84      	ldr	r2, [pc, #528]	; (800181c <HAL_GPIO_Init+0x294>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0xae>
          break;
 800160e:	e02c      	b.n	800166a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e028      	b.n	800166a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e023      	b.n	800166a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	3308      	adds	r3, #8
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e01e      	b.n	800166a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	330c      	adds	r3, #12
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e019      	b.n	800166a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163e:	2304      	movs	r3, #4
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e012      	b.n	800166a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	611a      	str	r2, [r3, #16]
          break;
 8001656:	e008      	b.n	800166a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	615a      	str	r2, [r3, #20]
          break;
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2bff      	cmp	r3, #255	; 0xff
 800166e:	d801      	bhi.n	8001674 <HAL_GPIO_Init+0xec>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	e001      	b.n	8001678 <HAL_GPIO_Init+0xf0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3304      	adds	r3, #4
 8001678:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2bff      	cmp	r3, #255	; 0xff
 800167e:	d802      	bhi.n	8001686 <HAL_GPIO_Init+0xfe>
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	e002      	b.n	800168c <HAL_GPIO_Init+0x104>
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	3b08      	subs	r3, #8
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	210f      	movs	r1, #15
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	401a      	ands	r2, r3
 800169e:	6a39      	ldr	r1, [r7, #32]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	431a      	orrs	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8096 	beq.w	80017e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_GPIO_Init+0x298>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a58      	ldr	r2, [pc, #352]	; (8001820 <HAL_GPIO_Init+0x298>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b56      	ldr	r3, [pc, #344]	; (8001820 <HAL_GPIO_Init+0x298>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d2:	4a54      	ldr	r2, [pc, #336]	; (8001824 <HAL_GPIO_Init+0x29c>)
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	; (8001828 <HAL_GPIO_Init+0x2a0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x19e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4a      	ldr	r2, [pc, #296]	; (800182c <HAL_GPIO_Init+0x2a4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x19a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a49      	ldr	r2, [pc, #292]	; (8001830 <HAL_GPIO_Init+0x2a8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x196>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a48      	ldr	r2, [pc, #288]	; (8001834 <HAL_GPIO_Init+0x2ac>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x192>
 8001716:	2303      	movs	r3, #3
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x1a0>
 800171a:	2304      	movs	r3, #4
 800171c:	e004      	b.n	8001728 <HAL_GPIO_Init+0x1a0>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_Init+0x1a0>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x1a0>
 8001726:	2300      	movs	r3, #0
 8001728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172a:	f002 0203 	and.w	r2, r2, #3
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4093      	lsls	r3, r2
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001738:	493a      	ldr	r1, [pc, #232]	; (8001824 <HAL_GPIO_Init+0x29c>)
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4938      	ldr	r1, [pc, #224]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	43db      	mvns	r3, r3
 8001768:	4933      	ldr	r1, [pc, #204]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 800176a:	4013      	ands	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	492e      	ldr	r1, [pc, #184]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	43db      	mvns	r3, r3
 8001790:	4929      	ldr	r1, [pc, #164]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 8001792:	4013      	ands	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	4924      	ldr	r1, [pc, #144]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	491f      	ldr	r1, [pc, #124]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	491a      	ldr	r1, [pc, #104]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4915      	ldr	r1, [pc, #84]	; (8001838 <HAL_GPIO_Init+0x2b0>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	3301      	adds	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f47f aed0 	bne.w	800159c <HAL_GPIO_Init+0x14>
  }
}
 80017fc:	bf00      	nop
 80017fe:	372c      	adds	r7, #44	; 0x2c
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	10210000 	.word	0x10210000
 800180c:	10110000 	.word	0x10110000
 8001810:	10120000 	.word	0x10120000
 8001814:	10310000 	.word	0x10310000
 8001818:	10320000 	.word	0x10320000
 800181c:	10220000 	.word	0x10220000
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	40010800 	.word	0x40010800
 800182c:	40010c00 	.word	0x40010c00
 8001830:	40011000 	.word	0x40011000
 8001834:	40011400 	.word	0x40011400
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800188a:	e002      	b.n	8001892 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	420e0020 	.word	0x420e0020

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e26c      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8087 	beq.w	80019e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x12c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d168      	bne.n	80019e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e246      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x76>
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02e      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc>
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a67      	ldr	r2, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fcea 	bl	8001368 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fce6 	bl	8001368 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1fa      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xe4>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcd6 	bl	8001368 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcd2 	bl	8001368 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1e6      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x10c>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1ba      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fc8b 	bl	8001368 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fc87 	bl	8001368 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e19b      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc6a 	bl	8001368 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc66 	bl	8001368 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e17a      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fc4a 	bl	8001368 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc46 	bl	8001368 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e15a      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fada 	bl	80020b0 <RCC_Delay>
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fc30 	bl	8001368 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc2c 	bl	8001368 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e140      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42420000 	.word	0x42420000
 8001b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b9e      	ldr	r3, [pc, #632]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a6 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b94      	ldr	r3, [pc, #592]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a93      	ldr	r2, [pc, #588]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b8e      	ldr	r3, [pc, #568]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a8a      	ldr	r2, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fbed 	bl	8001368 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff fbe9 	bl	8001368 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0fd      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x356>
 8001bf0:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a6c      	ldr	r2, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a69      	ldr	r2, [pc, #420]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a66      	ldr	r2, [pc, #408]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a63      	ldr	r2, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb9d 	bl	8001368 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fb99 	bl	8001368 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0ab      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x37e>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb87 	bl	8001368 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb83 	bl	8001368 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e095      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8081 	beq.w	8001d9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d061      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb57 	bl	8001368 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fb53 	bl	8001368 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e067      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	492d      	ldr	r1, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb27 	bl	8001368 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb23 	bl	8001368 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e037      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x46a>
 8001d3c:	e02f      	b.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fb10 	bl	8001368 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff fb0c 	bl	8001368 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e020      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x498>
 8001d6a:	e018      	b.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e013      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40007000 	.word	0x40007000
 8001db0:	42420060 	.word	0x42420060

08001db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d0      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4965      	ldr	r1, [pc, #404]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d040      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d115      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e073      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e06b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4936      	ldr	r1, [pc, #216]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff fa60 	bl	8001368 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7ff fa5c 	bl	8001368 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e053      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d210      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f821 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f46:	4601      	mov	r1, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	fa21 f303 	lsr.w	r3, r1, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1cc>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1d0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f9be 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08005fec 	.word	0x08005fec
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	b490      	push	{r4, r7}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f90:	1d3c      	adds	r4, r7, #4
 8001f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x46>
 8001fc6:	e02d      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fca:	623b      	str	r3, [r7, #32]
      break;
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fda:	4413      	add	r3, r2
 8001fdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0c5b      	lsrs	r3, r3, #17
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002000:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002006:	fb02 f203 	mul.w	r2, r2, r3
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e004      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	623b      	str	r3, [r7, #32]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	6a3b      	ldr	r3, [r7, #32]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc90      	pop	{r4, r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	08005fc4 	.word	0x08005fc4
 800203c:	08005fd4 	.word	0x08005fd4
 8002040:	40021000 	.word	0x40021000
 8002044:	007a1200 	.word	0x007a1200
 8002048:	003d0900 	.word	0x003d0900

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_RCC_GetHCLKFreq+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff2 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002068:	4601      	mov	r1, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08005ffc 	.word	0x08005ffc

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffde 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002090:	4601      	mov	r1, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4a03      	ldr	r2, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08005ffc 	.word	0x08005ffc

080020b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <RCC_Delay+0x34>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <RCC_Delay+0x38>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020cc:	bf00      	nop
  }
  while (Delay --);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	60fa      	str	r2, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f9      	bne.n	80020cc <RCC_Delay+0x1c>
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d07d      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10d      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	61d3      	str	r3, [r2, #28]
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002130:	2301      	movs	r3, #1
 8002132:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d118      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a42      	ldr	r2, [pc, #264]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214c:	f7ff f90c 	bl	8001368 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	e008      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002154:	f7ff f908 	bl	8001368 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e06d      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d02e      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d027      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002198:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021a0:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021a6:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d014      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff f8d7 	bl	8001368 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff f8d3 	bl	8001368 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e036      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ee      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4917      	ldr	r1, [pc, #92]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a13      	ldr	r2, [pc, #76]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	490b      	ldr	r1, [pc, #44]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4904      	ldr	r1, [pc, #16]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	42420440 	.word	0x42420440

08002258 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b08d      	sub	sp, #52	; 0x34
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002262:	f107 040c 	add.w	r4, r7, #12
 8002266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d07f      	beq.n	800238c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800228c:	2b10      	cmp	r3, #16
 800228e:	d002      	beq.n	8002296 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002290:	2b01      	cmp	r3, #1
 8002292:	d048      	beq.n	8002326 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002294:	e08b      	b.n	80023ae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002296:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800229c:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d07f      	beq.n	80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	0c9b      	lsrs	r3, r3, #18
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022b4:	4413      	add	r3, r2
 80022b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ba:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d018      	beq.n	80022f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022d4:	4413      	add	r3, r2
 80022d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80022e6:	4a37      	ldr	r2, [pc, #220]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	e004      	b.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800230e:	d102      	bne.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002314:	e048      	b.n	80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4a2c      	ldr	r2, [pc, #176]	; (80023cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002324:	e040      	b.n	80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002336:	d108      	bne.n	800234a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
 8002348:	e01f      	b.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002354:	d109      	bne.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002362:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
 8002368:	e00f      	b.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002374:	d11a      	bne.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d014      	beq.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002382:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002388:	e010      	b.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800238a:	e00f      	b.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800238c:	f7ff fe7c 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0b9b      	lsrs	r3, r3, #14
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	3301      	adds	r3, #1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80023a8:	bf00      	nop
 80023aa:	e000      	b.n	80023ae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80023ac:	bf00      	nop
    }
  }
  return (frequency);
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3734      	adds	r7, #52	; 0x34
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	08005fd8 	.word	0x08005fd8
 80023bc:	08005fe8 	.word	0x08005fe8
 80023c0:	40021000 	.word	0x40021000
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	003d0900 	.word	0x003d0900
 80023cc:	aaaaaaab 	.word	0xaaaaaaab

080023d0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e084      	b.n	80024f0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7c5b      	ldrb	r3, [r3, #17]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fd8a 	bl	8000f10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f9c8 	bl	8002798 <HAL_RTC_WaitForSynchro>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d004      	beq.n	8002418 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e06b      	b.n	80024f0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fa81 	bl	8002920 <RTC_EnterInitMode>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e060      	b.n	80024f0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0207 	bic.w	r2, r2, #7
 800243c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <HAL_RTC_Init+0x128>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_RTC_Init+0x128>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_RTC_Init+0x128>)
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4926      	ldr	r1, [pc, #152]	; (80024f8 <HAL_RTC_Init+0x128>)
 8002460:	4313      	orrs	r3, r2
 8002462:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d003      	beq.n	8002476 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e00e      	b.n	8002494 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff feee 	bl	8002258 <HAL_RCCEx_GetPeriphCLKFreq>
 800247c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d104      	bne.n	800248e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e030      	b.n	80024f0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 010f 	bic.w	r1, r3, #15
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	0c1a      	lsrs	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	b291      	uxth	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa55 	bl	8002970 <RTC_ExitInitMode>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00c      	b.n	80024f0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80024ee:	2300      	movs	r3, #0
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40006c00 	.word	0x40006c00

080024fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_RTC_SetTime+0x20>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e080      	b.n	8002622 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	7c1b      	ldrb	r3, [r3, #16]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_RTC_SetTime+0x30>
 8002528:	2302      	movs	r3, #2
 800252a:	e07a      	b.n	8002622 <HAL_RTC_SetTime+0x126>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2202      	movs	r2, #2
 8002536:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d113      	bne.n	8002566 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002548:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	4619      	mov	r1, r3
 8002552:	460b      	mov	r3, r1
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a5b      	subs	r3, r3, r1
 8002558:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800255a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002560:	4413      	add	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e01e      	b.n	80025a4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa28 	bl	80029c0 <RTC_Bcd2ToByte>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002578:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fa1d 	bl	80029c0 <RTC_Bcd2ToByte>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002592:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	789b      	ldrb	r3, [r3, #2]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa11 	bl	80029c0 <RTC_Bcd2ToByte>
 800259e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80025a0:	4423      	add	r3, r4
 80025a2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80025a4:	6979      	ldr	r1, [r7, #20]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f953 	bl	8002852 <RTC_WriteTimeCounter>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2204      	movs	r2, #4
 80025b6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e02f      	b.n	8002622 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0205 	bic.w	r2, r2, #5
 80025d0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f964 	bl	80028a0 <RTC_ReadAlarmCounter>
 80025d8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d018      	beq.n	8002614 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d214      	bcs.n	8002614 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80025f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025f4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80025f6:	6939      	ldr	r1, [r7, #16]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f96a 	bl	80028d2 <RTC_WriteAlarmCounter>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2204      	movs	r2, #4
 8002608:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e006      	b.n	8002622 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd90      	pop	{r4, r7, pc}
	...

0800262c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_RTC_SetDate+0x24>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e097      	b.n	8002784 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	7c1b      	ldrb	r3, [r3, #16]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_RTC_SetDate+0x34>
 800265c:	2302      	movs	r3, #2
 800265e:	e091      	b.n	8002784 <HAL_RTC_SetDate+0x158>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2202      	movs	r2, #2
 800266a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	78da      	ldrb	r2, [r3, #3]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	785a      	ldrb	r2, [r3, #1]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	789a      	ldrb	r2, [r3, #2]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	739a      	strb	r2, [r3, #14]
 800268a:	e01a      	b.n	80026c2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	78db      	ldrb	r3, [r3, #3]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f995 	bl	80029c0 <RTC_Bcd2ToByte>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f98c 	bl	80029c0 <RTC_Bcd2ToByte>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	789b      	ldrb	r3, [r3, #2]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f983 	bl	80029c0 <RTC_Bcd2ToByte>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461a      	mov	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	7bdb      	ldrb	r3, [r3, #15]
 80026c6:	4618      	mov	r0, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	7b59      	ldrb	r1, [r3, #13]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	7b9b      	ldrb	r3, [r3, #14]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f000 f993 	bl	80029fc <RTC_WeekDayNum>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	7b1a      	ldrb	r2, [r3, #12]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f883 	bl	80027f2 <RTC_ReadTimeCounter>
 80026ec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4a26      	ldr	r2, [pc, #152]	; (800278c <HAL_RTC_SetDate+0x160>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b18      	cmp	r3, #24
 80026fe:	d93a      	bls.n	8002776 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	4a23      	ldr	r2, [pc, #140]	; (8002790 <HAL_RTC_SetDate+0x164>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_RTC_SetDate+0x168>)
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002716:	69f9      	ldr	r1, [r7, #28]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f89a 	bl	8002852 <RTC_WriteTimeCounter>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2204      	movs	r2, #4
 8002728:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e027      	b.n	8002784 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f8b3 	bl	80028a0 <RTC_ReadAlarmCounter>
 800273a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d018      	beq.n	8002776 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	429a      	cmp	r2, r3
 800274a:	d214      	bcs.n	8002776 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002752:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002756:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002758:	69b9      	ldr	r1, [r7, #24]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f8b9 	bl	80028d2 <RTC_WriteAlarmCounter>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2204      	movs	r2, #4
 800276a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e006      	b.n	8002784 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	91a2b3c5 	.word	0x91a2b3c5
 8002790:	aaaaaaab 	.word	0xaaaaaaab
 8002794:	00015180 	.word	0x00015180

08002798 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e01d      	b.n	80027ea <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80027be:	f7fe fdd3 	bl	8001368 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80027c4:	e009      	b.n	80027da <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027c6:	f7fe fdcf 	bl	8001368 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d4:	d901      	bls.n	80027da <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e007      	b.n	80027ea <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ee      	beq.n	80027c6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	827b      	strh	r3, [r7, #18]
 80027fe:	2300      	movs	r3, #0
 8002800:	823b      	strh	r3, [r7, #16]
 8002802:	2300      	movs	r3, #0
 8002804:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002822:	8a7a      	ldrh	r2, [r7, #18]
 8002824:	8a3b      	ldrh	r3, [r7, #16]
 8002826:	429a      	cmp	r2, r3
 8002828:	d008      	beq.n	800283c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800282a:	8a3b      	ldrh	r3, [r7, #16]
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	b29b      	uxth	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e004      	b.n	8002846 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800283c:	8a7b      	ldrh	r3, [r7, #18]
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	89fb      	ldrh	r3, [r7, #14]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002846:	697b      	ldr	r3, [r7, #20]
}
 8002848:	4618      	mov	r0, r3
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f85d 	bl	8002920 <RTC_EnterInitMode>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e011      	b.n	8002896 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	0c12      	lsrs	r2, r2, #16
 800287a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	b292      	uxth	r2, r2
 8002884:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f872 	bl	8002970 <RTC_ExitInitMode>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	81fb      	strh	r3, [r7, #14]
 80028ac:	2300      	movs	r3, #0
 80028ae:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	041a      	lsls	r2, r3, #16
 80028c4:	89bb      	ldrh	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f81d 	bl	8002920 <RTC_EnterInitMode>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e011      	b.n	8002916 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	0c12      	lsrs	r2, r2, #16
 80028fa:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b292      	uxth	r2, r2
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f832 	bl	8002970 <RTC_ExitInitMode>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800292c:	f7fe fd1c 	bl	8001368 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002932:	e009      	b.n	8002948 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002934:	f7fe fd18 	bl	8001368 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002942:	d901      	bls.n	8002948 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e00f      	b.n	8002968 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0210 	orr.w	r2, r2, #16
 8002964:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0210 	bic.w	r2, r2, #16
 800298a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800298c:	f7fe fcec 	bl	8001368 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002992:	e009      	b.n	80029a8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002994:	f7fe fce8 	bl	8001368 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e007      	b.n	80029b8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0ee      	beq.n	8002994 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
	...

080029fc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a1a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d82d      	bhi.n	8002a7e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <RTC_WeekDayNum+0xe4>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	085a      	lsrs	r2, r3, #1
 8002a36:	78bb      	ldrb	r3, [r7, #2]
 8002a38:	441a      	add	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	441a      	add	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	4926      	ldr	r1, [pc, #152]	; (8002ae4 <RTC_WeekDayNum+0xe8>)
 8002a4c:	fba1 1303 	umull	r1, r3, r1, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	1ad2      	subs	r2, r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	4922      	ldr	r1, [pc, #136]	; (8002ae4 <RTC_WeekDayNum+0xe8>)
 8002a5a:	fba1 1303 	umull	r1, r3, r1, r3
 8002a5e:	09db      	lsrs	r3, r3, #7
 8002a60:	4413      	add	r3, r2
 8002a62:	1d1a      	adds	r2, r3, #4
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <RTC_WeekDayNum+0xec>)
 8002a66:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6a:	1ad1      	subs	r1, r2, r3
 8002a6c:	0849      	lsrs	r1, r1, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	0899      	lsrs	r1, r3, #2
 8002a72:	460b      	mov	r3, r1
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	1a5b      	subs	r3, r3, r1
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e029      	b.n	8002ad2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <RTC_WeekDayNum+0xe4>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	085a      	lsrs	r2, r3, #1
 8002a92:	78bb      	ldrb	r3, [r7, #2]
 8002a94:	441a      	add	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	441a      	add	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4910      	ldr	r1, [pc, #64]	; (8002ae4 <RTC_WeekDayNum+0xe8>)
 8002aa4:	fba1 1303 	umull	r1, r3, r1, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	490d      	ldr	r1, [pc, #52]	; (8002ae4 <RTC_WeekDayNum+0xe8>)
 8002ab0:	fba1 1303 	umull	r1, r3, r1, r3
 8002ab4:	09db      	lsrs	r3, r3, #7
 8002ab6:	4413      	add	r3, r2
 8002ab8:	1c9a      	adds	r2, r3, #2
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <RTC_WeekDayNum+0xec>)
 8002abc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac0:	1ad1      	subs	r1, r2, r3
 8002ac2:	0849      	lsrs	r1, r1, #1
 8002ac4:	440b      	add	r3, r1
 8002ac6:	0899      	lsrs	r1, r3, #2
 8002ac8:	460b      	mov	r3, r1
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a5b      	subs	r3, r3, r1
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	b2db      	uxtb	r3, r3
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	38e38e39 	.word	0x38e38e39
 8002ae4:	51eb851f 	.word	0x51eb851f
 8002ae8:	24924925 	.word	0x24924925

08002aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e01d      	b.n	8002b3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe fa20 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f000 f9ee 	bl	8002f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e01d      	b.n	8002b90 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f815 	bl	8002b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 f9c3 	bl	8002f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fc24 	bl	800340c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_TIM_PWM_Start+0x60>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d007      	beq.n	8002c00 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00

08002c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e0b4      	b.n	8002d94 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	f200 809f 	bhi.w	8002d80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c7d 	.word	0x08002c7d
 8002c4c:	08002d81 	.word	0x08002d81
 8002c50:	08002d81 	.word	0x08002d81
 8002c54:	08002d81 	.word	0x08002d81
 8002c58:	08002cbd 	.word	0x08002cbd
 8002c5c:	08002d81 	.word	0x08002d81
 8002c60:	08002d81 	.word	0x08002d81
 8002c64:	08002d81 	.word	0x08002d81
 8002c68:	08002cff 	.word	0x08002cff
 8002c6c:	08002d81 	.word	0x08002d81
 8002c70:	08002d81 	.word	0x08002d81
 8002c74:	08002d81 	.word	0x08002d81
 8002c78:	08002d3f 	.word	0x08002d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f9a4 	bl	8002fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0208 	orr.w	r2, r2, #8
 8002c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0204 	bic.w	r2, r2, #4
 8002ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6999      	ldr	r1, [r3, #24]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	619a      	str	r2, [r3, #24]
      break;
 8002cba:	e062      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f9ea 	bl	800309c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6999      	ldr	r1, [r3, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	021a      	lsls	r2, r3, #8
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]
      break;
 8002cfc:	e041      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fa33 	bl	8003170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0208 	orr.w	r2, r2, #8
 8002d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0204 	bic.w	r2, r2, #4
 8002d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69d9      	ldr	r1, [r3, #28]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	61da      	str	r2, [r3, #28]
      break;
 8002d3c:	e021      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fa7d 	bl	8003244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	021a      	lsls	r2, r3, #8
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	61da      	str	r2, [r3, #28]
      break;
 8002d7e:	e000      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002d80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0a6      	b.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d067      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0x120>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d80b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x6c>
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d073      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x140>
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d802      	bhi.n	8002dfe <HAL_TIM_ConfigClockSource+0x62>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d06f      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002dfc:	e078      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d06c      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x140>
 8002e02:	2b30      	cmp	r3, #48	; 0x30
 8002e04:	d06a      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e06:	e073      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d00d      	beq.n	8002e28 <HAL_TIM_ConfigClockSource+0x8c>
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d804      	bhi.n	8002e1a <HAL_TIM_ConfigClockSource+0x7e>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d033      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0xe0>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d041      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e18:	e06a      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	d066      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x152>
 8002e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e24:	d017      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e26:	e063      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f000 fac9 	bl	80033ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]
      break;
 8002e54:	e04c      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f000 fab2 	bl	80033ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e78:	609a      	str	r2, [r3, #8]
      break;
 8002e7a:	e039      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f000 fa29 	bl	80032e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2150      	movs	r1, #80	; 0x50
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fa80 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002e9a:	e029      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f000 fa47 	bl	800333c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2160      	movs	r1, #96	; 0x60
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fa70 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002eba:	e019      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f000 fa09 	bl	80032e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2140      	movs	r1, #64	; 0x40
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fa60 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002eda:	e009      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f000 fa57 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002eec:	e000      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <TIM_Base_SetConfig+0xb8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <TIM_Base_SetConfig+0x30>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d007      	beq.n	8002f3c <TIM_Base_SetConfig+0x30>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <TIM_Base_SetConfig+0xbc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d003      	beq.n	8002f3c <TIM_Base_SetConfig+0x30>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <TIM_Base_SetConfig+0xc0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d108      	bne.n	8002f4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <TIM_Base_SetConfig+0xb8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <TIM_Base_SetConfig+0x62>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5c:	d007      	beq.n	8002f6e <TIM_Base_SetConfig+0x62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <TIM_Base_SetConfig+0xbc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_Base_SetConfig+0x62>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <TIM_Base_SetConfig+0xc0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d108      	bne.n	8002f80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <TIM_Base_SetConfig+0xb8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d103      	bne.n	8002fb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800

08002fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0302 	bic.w	r3, r3, #2
 8003018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <TIM_OC1_SetConfig+0xc8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10c      	bne.n	8003046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0308 	bic.w	r3, r3, #8
 8003032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a13      	ldr	r2, [pc, #76]	; (8003098 <TIM_OC1_SetConfig+0xc8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d111      	bne.n	8003072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800305c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40012c00 	.word	0x40012c00

0800309c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0210 	bic.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1d      	ldr	r2, [pc, #116]	; (800316c <TIM_OC2_SetConfig+0xd0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10d      	bne.n	8003118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a14      	ldr	r2, [pc, #80]	; (800316c <TIM_OC2_SetConfig+0xd0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d113      	bne.n	8003148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800312e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00

08003170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <TIM_OC3_SetConfig+0xd0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10d      	bne.n	80031ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <TIM_OC3_SetConfig+0xd0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d113      	bne.n	800321a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40012c00 	.word	0x40012c00

08003244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800328e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	031b      	lsls	r3, r3, #12
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <TIM_OC4_SetConfig+0x98>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d109      	bne.n	80032b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00

080032e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f023 0201 	bic.w	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800330a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 030a 	bic.w	r3, r3, #10
 800331c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 0210 	bic.w	r2, r3, #16
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003366:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	031b      	lsls	r3, r3, #12
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003378:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	621a      	str	r2, [r3, #32]
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f043 0307 	orr.w	r3, r3, #7
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	021a      	lsls	r2, r3, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2201      	movs	r2, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	43db      	mvns	r3, r3
 800342e:	401a      	ands	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003468:	2302      	movs	r3, #2
 800346a:	e032      	b.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e03f      	b.n	800356e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fd74 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800351e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f90b 	bl	800373c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b088      	sub	sp, #32
 800357a:	af02      	add	r7, sp, #8
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 8083 	bne.w	800369e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Transmit+0x2e>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e07b      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Transmit+0x40>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e074      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	; 0x21
 80035c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035cc:	f7fd fecc 	bl	8001368 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035de:	e042      	b.n	8003666 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f6:	d122      	bne.n	800363e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2200      	movs	r2, #0
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f850 	bl	80036a8 <UART_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e046      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003624:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3302      	adds	r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	e017      	b.n	8003666 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	e013      	b.n	8003666 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f82d 	bl	80036a8 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e023      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	60ba      	str	r2, [r7, #8]
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1b7      	bne.n	80035e0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2200      	movs	r2, #0
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f814 	bl	80036a8 <UART_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e00a      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b8:	e02c      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d028      	beq.n	8003714 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036c8:	f7fd fe4e 	bl	8001368 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d21d      	bcs.n	8003714 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e00f      	b.n	8003734 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	429a      	cmp	r2, r3
 8003730:	d0c3      	beq.n	80036ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003776:	f023 030c 	bic.w	r3, r3, #12
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	430b      	orrs	r3, r1
 8003782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <UART_SetConfig+0x1ac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d14e      	bne.n	8003842 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037a4:	f7fe fc70 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 80037a8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	4a4a      	ldr	r2, [pc, #296]	; (80038ec <UART_SetConfig+0x1b0>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	0119      	lsls	r1, r3, #4
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e0:	4b42      	ldr	r3, [pc, #264]	; (80038ec <UART_SetConfig+0x1b0>)
 80037e2:	fba3 0302 	umull	r0, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2064      	movs	r0, #100	; 0x64
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	3332      	adds	r3, #50	; 0x32
 80037f4:	4a3d      	ldr	r2, [pc, #244]	; (80038ec <UART_SetConfig+0x1b0>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003800:	4419      	add	r1, r3
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009a      	lsls	r2, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	fbb2 f2f3 	udiv	r2, r2, r3
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <UART_SetConfig+0x1b0>)
 800381a:	fba3 0302 	umull	r0, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2064      	movs	r0, #100	; 0x64
 8003822:	fb00 f303 	mul.w	r3, r0, r3
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	3332      	adds	r3, #50	; 0x32
 800382c:	4a2f      	ldr	r2, [pc, #188]	; (80038ec <UART_SetConfig+0x1b0>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	f003 020f 	and.w	r2, r3, #15
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	440a      	add	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003840:	e04d      	b.n	80038de <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003842:	f7fe fc0d 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8003846:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	4a23      	ldr	r2, [pc, #140]	; (80038ec <UART_SetConfig+0x1b0>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	0119      	lsls	r1, r3, #4
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009a      	lsls	r2, r3, #2
 8003872:	441a      	add	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	fbb2 f2f3 	udiv	r2, r2, r3
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <UART_SetConfig+0x1b0>)
 8003880:	fba3 0302 	umull	r0, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	2064      	movs	r0, #100	; 0x64
 8003888:	fb00 f303 	mul.w	r3, r0, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	3332      	adds	r3, #50	; 0x32
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <UART_SetConfig+0x1b0>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389e:	4419      	add	r1, r3
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <UART_SetConfig+0x1b0>)
 80038b8:	fba3 0302 	umull	r0, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	2064      	movs	r0, #100	; 0x64
 80038c0:	fb00 f303 	mul.w	r3, r0, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	3332      	adds	r3, #50	; 0x32
 80038ca:	4a08      	ldr	r2, [pc, #32]	; (80038ec <UART_SetConfig+0x1b0>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	f003 020f 	and.w	r2, r3, #15
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	440a      	add	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40013800 	.word	0x40013800
 80038ec:	51eb851f 	.word	0x51eb851f

080038f0 <__errno>:
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <__errno+0x8>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	2000000c 	.word	0x2000000c

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	2500      	movs	r5, #0
 8003900:	4e0c      	ldr	r6, [pc, #48]	; (8003934 <__libc_init_array+0x38>)
 8003902:	4c0d      	ldr	r4, [pc, #52]	; (8003938 <__libc_init_array+0x3c>)
 8003904:	1ba4      	subs	r4, r4, r6
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	42a5      	cmp	r5, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	f002 fb46 	bl	8005f9c <_init>
 8003910:	2500      	movs	r5, #0
 8003912:	4e0a      	ldr	r6, [pc, #40]	; (800393c <__libc_init_array+0x40>)
 8003914:	4c0a      	ldr	r4, [pc, #40]	; (8003940 <__libc_init_array+0x44>)
 8003916:	1ba4      	subs	r4, r4, r6
 8003918:	10a4      	asrs	r4, r4, #2
 800391a:	42a5      	cmp	r5, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003924:	4798      	blx	r3
 8003926:	3501      	adds	r5, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800392e:	4798      	blx	r3
 8003930:	3501      	adds	r5, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	080062c8 	.word	0x080062c8
 8003938:	080062c8 	.word	0x080062c8
 800393c:	080062c8 	.word	0x080062c8
 8003940:	080062cc 	.word	0x080062cc

08003944 <memset>:
 8003944:	4603      	mov	r3, r0
 8003946:	4402      	add	r2, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <__cvt>:
 8003954:	2b00      	cmp	r3, #0
 8003956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800395a:	461e      	mov	r6, r3
 800395c:	bfbb      	ittet	lt
 800395e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003962:	461e      	movlt	r6, r3
 8003964:	2300      	movge	r3, #0
 8003966:	232d      	movlt	r3, #45	; 0x2d
 8003968:	b088      	sub	sp, #32
 800396a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800396c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003970:	f027 0720 	bic.w	r7, r7, #32
 8003974:	2f46      	cmp	r7, #70	; 0x46
 8003976:	4614      	mov	r4, r2
 8003978:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800397a:	700b      	strb	r3, [r1, #0]
 800397c:	d004      	beq.n	8003988 <__cvt+0x34>
 800397e:	2f45      	cmp	r7, #69	; 0x45
 8003980:	d100      	bne.n	8003984 <__cvt+0x30>
 8003982:	3501      	adds	r5, #1
 8003984:	2302      	movs	r3, #2
 8003986:	e000      	b.n	800398a <__cvt+0x36>
 8003988:	2303      	movs	r3, #3
 800398a:	aa07      	add	r2, sp, #28
 800398c:	9204      	str	r2, [sp, #16]
 800398e:	aa06      	add	r2, sp, #24
 8003990:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003994:	e9cd 3500 	strd	r3, r5, [sp]
 8003998:	4622      	mov	r2, r4
 800399a:	4633      	mov	r3, r6
 800399c:	f000 fcd0 	bl	8004340 <_dtoa_r>
 80039a0:	2f47      	cmp	r7, #71	; 0x47
 80039a2:	4680      	mov	r8, r0
 80039a4:	d102      	bne.n	80039ac <__cvt+0x58>
 80039a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039a8:	07db      	lsls	r3, r3, #31
 80039aa:	d526      	bpl.n	80039fa <__cvt+0xa6>
 80039ac:	2f46      	cmp	r7, #70	; 0x46
 80039ae:	eb08 0905 	add.w	r9, r8, r5
 80039b2:	d111      	bne.n	80039d8 <__cvt+0x84>
 80039b4:	f898 3000 	ldrb.w	r3, [r8]
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d10a      	bne.n	80039d2 <__cvt+0x7e>
 80039bc:	2200      	movs	r2, #0
 80039be:	2300      	movs	r3, #0
 80039c0:	4620      	mov	r0, r4
 80039c2:	4631      	mov	r1, r6
 80039c4:	f7fc fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80039c8:	b918      	cbnz	r0, 80039d2 <__cvt+0x7e>
 80039ca:	f1c5 0501 	rsb	r5, r5, #1
 80039ce:	f8ca 5000 	str.w	r5, [sl]
 80039d2:	f8da 3000 	ldr.w	r3, [sl]
 80039d6:	4499      	add	r9, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	2300      	movs	r3, #0
 80039dc:	4620      	mov	r0, r4
 80039de:	4631      	mov	r1, r6
 80039e0:	f7fc ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 80039e4:	b938      	cbnz	r0, 80039f6 <__cvt+0xa2>
 80039e6:	2230      	movs	r2, #48	; 0x30
 80039e8:	9b07      	ldr	r3, [sp, #28]
 80039ea:	454b      	cmp	r3, r9
 80039ec:	d205      	bcs.n	80039fa <__cvt+0xa6>
 80039ee:	1c59      	adds	r1, r3, #1
 80039f0:	9107      	str	r1, [sp, #28]
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e7f8      	b.n	80039e8 <__cvt+0x94>
 80039f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80039fa:	4640      	mov	r0, r8
 80039fc:	9b07      	ldr	r3, [sp, #28]
 80039fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a00:	eba3 0308 	sub.w	r3, r3, r8
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	b008      	add	sp, #32
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a0c <__exponent>:
 8003a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a0e:	2900      	cmp	r1, #0
 8003a10:	bfb4      	ite	lt
 8003a12:	232d      	movlt	r3, #45	; 0x2d
 8003a14:	232b      	movge	r3, #43	; 0x2b
 8003a16:	4604      	mov	r4, r0
 8003a18:	bfb8      	it	lt
 8003a1a:	4249      	neglt	r1, r1
 8003a1c:	2909      	cmp	r1, #9
 8003a1e:	f804 2b02 	strb.w	r2, [r4], #2
 8003a22:	7043      	strb	r3, [r0, #1]
 8003a24:	dd21      	ble.n	8003a6a <__exponent+0x5e>
 8003a26:	f10d 0307 	add.w	r3, sp, #7
 8003a2a:	461f      	mov	r7, r3
 8003a2c:	260a      	movs	r6, #10
 8003a2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003a32:	fb06 1115 	mls	r1, r6, r5, r1
 8003a36:	2d09      	cmp	r5, #9
 8003a38:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003a3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a40:	f103 32ff 	add.w	r2, r3, #4294967295
 8003a44:	4629      	mov	r1, r5
 8003a46:	dc09      	bgt.n	8003a5c <__exponent+0x50>
 8003a48:	3130      	adds	r1, #48	; 0x30
 8003a4a:	3b02      	subs	r3, #2
 8003a4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a50:	42bb      	cmp	r3, r7
 8003a52:	4622      	mov	r2, r4
 8003a54:	d304      	bcc.n	8003a60 <__exponent+0x54>
 8003a56:	1a10      	subs	r0, r2, r0
 8003a58:	b003      	add	sp, #12
 8003a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	e7e6      	b.n	8003a2e <__exponent+0x22>
 8003a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a64:	f804 2b01 	strb.w	r2, [r4], #1
 8003a68:	e7f2      	b.n	8003a50 <__exponent+0x44>
 8003a6a:	2330      	movs	r3, #48	; 0x30
 8003a6c:	4419      	add	r1, r3
 8003a6e:	7083      	strb	r3, [r0, #2]
 8003a70:	1d02      	adds	r2, r0, #4
 8003a72:	70c1      	strb	r1, [r0, #3]
 8003a74:	e7ef      	b.n	8003a56 <__exponent+0x4a>
	...

08003a78 <_printf_float>:
 8003a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a7c:	b091      	sub	sp, #68	; 0x44
 8003a7e:	460c      	mov	r4, r1
 8003a80:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003a82:	4693      	mov	fp, r2
 8003a84:	461e      	mov	r6, r3
 8003a86:	4605      	mov	r5, r0
 8003a88:	f001 fad8 	bl	800503c <_localeconv_r>
 8003a8c:	6803      	ldr	r3, [r0, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	9309      	str	r3, [sp, #36]	; 0x24
 8003a92:	f7fc fb5d 	bl	8000150 <strlen>
 8003a96:	2300      	movs	r3, #0
 8003a98:	930e      	str	r3, [sp, #56]	; 0x38
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	900a      	str	r0, [sp, #40]	; 0x28
 8003a9e:	3307      	adds	r3, #7
 8003aa0:	f023 0307 	bic.w	r3, r3, #7
 8003aa4:	f103 0208 	add.w	r2, r3, #8
 8003aa8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003aac:	f8d4 a000 	ldr.w	sl, [r4]
 8003ab0:	603a      	str	r2, [r7, #0]
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003aba:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003abe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	4ba6      	ldr	r3, [pc, #664]	; (8003d64 <_printf_float+0x2ec>)
 8003aca:	4638      	mov	r0, r7
 8003acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ace:	f7fc ff9d 	bl	8000a0c <__aeabi_dcmpun>
 8003ad2:	bb68      	cbnz	r0, 8003b30 <_printf_float+0xb8>
 8003ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad8:	4ba2      	ldr	r3, [pc, #648]	; (8003d64 <_printf_float+0x2ec>)
 8003ada:	4638      	mov	r0, r7
 8003adc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ade:	f7fc ff77 	bl	80009d0 <__aeabi_dcmple>
 8003ae2:	bb28      	cbnz	r0, 8003b30 <_printf_float+0xb8>
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4638      	mov	r0, r7
 8003aea:	4649      	mov	r1, r9
 8003aec:	f7fc ff66 	bl	80009bc <__aeabi_dcmplt>
 8003af0:	b110      	cbz	r0, 8003af8 <_printf_float+0x80>
 8003af2:	232d      	movs	r3, #45	; 0x2d
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af8:	4f9b      	ldr	r7, [pc, #620]	; (8003d68 <_printf_float+0x2f0>)
 8003afa:	4b9c      	ldr	r3, [pc, #624]	; (8003d6c <_printf_float+0x2f4>)
 8003afc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b00:	bf98      	it	ls
 8003b02:	461f      	movls	r7, r3
 8003b04:	2303      	movs	r3, #3
 8003b06:	f04f 0900 	mov.w	r9, #0
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	f02a 0304 	bic.w	r3, sl, #4
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	9600      	str	r6, [sp, #0]
 8003b14:	465b      	mov	r3, fp
 8003b16:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f000 f9e2 	bl	8003ee4 <_printf_common>
 8003b20:	3001      	adds	r0, #1
 8003b22:	f040 8090 	bne.w	8003c46 <_printf_float+0x1ce>
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2a:	b011      	add	sp, #68	; 0x44
 8003b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b30:	463a      	mov	r2, r7
 8003b32:	464b      	mov	r3, r9
 8003b34:	4638      	mov	r0, r7
 8003b36:	4649      	mov	r1, r9
 8003b38:	f7fc ff68 	bl	8000a0c <__aeabi_dcmpun>
 8003b3c:	b110      	cbz	r0, 8003b44 <_printf_float+0xcc>
 8003b3e:	4f8c      	ldr	r7, [pc, #560]	; (8003d70 <_printf_float+0x2f8>)
 8003b40:	4b8c      	ldr	r3, [pc, #560]	; (8003d74 <_printf_float+0x2fc>)
 8003b42:	e7db      	b.n	8003afc <_printf_float+0x84>
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	a80d      	add	r0, sp, #52	; 0x34
 8003b4e:	a90e      	add	r1, sp, #56	; 0x38
 8003b50:	d140      	bne.n	8003bd4 <_printf_float+0x15c>
 8003b52:	2306      	movs	r3, #6
 8003b54:	6063      	str	r3, [r4, #4]
 8003b56:	f04f 0c00 	mov.w	ip, #0
 8003b5a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003b5e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	6022      	str	r2, [r4, #0]
 8003b66:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	463a      	mov	r2, r7
 8003b6e:	464b      	mov	r3, r9
 8003b70:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003b74:	4628      	mov	r0, r5
 8003b76:	f7ff feed 	bl	8003954 <__cvt>
 8003b7a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003b7e:	2b47      	cmp	r3, #71	; 0x47
 8003b80:	4607      	mov	r7, r0
 8003b82:	d109      	bne.n	8003b98 <_printf_float+0x120>
 8003b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b86:	1cd8      	adds	r0, r3, #3
 8003b88:	db02      	blt.n	8003b90 <_printf_float+0x118>
 8003b8a:	6862      	ldr	r2, [r4, #4]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	dd47      	ble.n	8003c20 <_printf_float+0x1a8>
 8003b90:	f1a8 0802 	sub.w	r8, r8, #2
 8003b94:	fa5f f888 	uxtb.w	r8, r8
 8003b98:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003b9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b9e:	d824      	bhi.n	8003bea <_printf_float+0x172>
 8003ba0:	3901      	subs	r1, #1
 8003ba2:	4642      	mov	r2, r8
 8003ba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ba8:	910d      	str	r1, [sp, #52]	; 0x34
 8003baa:	f7ff ff2f 	bl	8003a0c <__exponent>
 8003bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bb0:	4681      	mov	r9, r0
 8003bb2:	1813      	adds	r3, r2, r0
 8003bb4:	2a01      	cmp	r2, #1
 8003bb6:	6123      	str	r3, [r4, #16]
 8003bb8:	dc02      	bgt.n	8003bc0 <_printf_float+0x148>
 8003bba:	6822      	ldr	r2, [r4, #0]
 8003bbc:	07d1      	lsls	r1, r2, #31
 8003bbe:	d501      	bpl.n	8003bc4 <_printf_float+0x14c>
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	6123      	str	r3, [r4, #16]
 8003bc4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0a2      	beq.n	8003b12 <_printf_float+0x9a>
 8003bcc:	232d      	movs	r3, #45	; 0x2d
 8003bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd2:	e79e      	b.n	8003b12 <_printf_float+0x9a>
 8003bd4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003bd8:	f000 816e 	beq.w	8003eb8 <_printf_float+0x440>
 8003bdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003be0:	d1b9      	bne.n	8003b56 <_printf_float+0xde>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1b7      	bne.n	8003b56 <_printf_float+0xde>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e7b4      	b.n	8003b54 <_printf_float+0xdc>
 8003bea:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003bee:	d119      	bne.n	8003c24 <_printf_float+0x1ac>
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	dd0c      	ble.n	8003c10 <_printf_float+0x198>
 8003bf6:	6121      	str	r1, [r4, #16]
 8003bf8:	b913      	cbnz	r3, 8003c00 <_printf_float+0x188>
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	07d2      	lsls	r2, r2, #31
 8003bfe:	d502      	bpl.n	8003c06 <_printf_float+0x18e>
 8003c00:	3301      	adds	r3, #1
 8003c02:	440b      	add	r3, r1
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c08:	f04f 0900 	mov.w	r9, #0
 8003c0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c0e:	e7d9      	b.n	8003bc4 <_printf_float+0x14c>
 8003c10:	b913      	cbnz	r3, 8003c18 <_printf_float+0x1a0>
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	07d0      	lsls	r0, r2, #31
 8003c16:	d501      	bpl.n	8003c1c <_printf_float+0x1a4>
 8003c18:	3302      	adds	r3, #2
 8003c1a:	e7f3      	b.n	8003c04 <_printf_float+0x18c>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e7f1      	b.n	8003c04 <_printf_float+0x18c>
 8003c20:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003c24:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	db05      	blt.n	8003c38 <_printf_float+0x1c0>
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	6123      	str	r3, [r4, #16]
 8003c30:	07d1      	lsls	r1, r2, #31
 8003c32:	d5e8      	bpl.n	8003c06 <_printf_float+0x18e>
 8003c34:	3301      	adds	r3, #1
 8003c36:	e7e5      	b.n	8003c04 <_printf_float+0x18c>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bfcc      	ite	gt
 8003c3c:	2301      	movgt	r3, #1
 8003c3e:	f1c3 0302 	rsble	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	e7de      	b.n	8003c04 <_printf_float+0x18c>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	055a      	lsls	r2, r3, #21
 8003c4a:	d407      	bmi.n	8003c5c <_printf_float+0x1e4>
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	463a      	mov	r2, r7
 8003c50:	4659      	mov	r1, fp
 8003c52:	4628      	mov	r0, r5
 8003c54:	47b0      	blx	r6
 8003c56:	3001      	adds	r0, #1
 8003c58:	d129      	bne.n	8003cae <_printf_float+0x236>
 8003c5a:	e764      	b.n	8003b26 <_printf_float+0xae>
 8003c5c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003c60:	f240 80d7 	bls.w	8003e12 <_printf_float+0x39a>
 8003c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f7fc fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8003c70:	b388      	cbz	r0, 8003cd6 <_printf_float+0x25e>
 8003c72:	2301      	movs	r3, #1
 8003c74:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <_printf_float+0x300>)
 8003c76:	4659      	mov	r1, fp
 8003c78:	4628      	mov	r0, r5
 8003c7a:	47b0      	blx	r6
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	f43f af52 	beq.w	8003b26 <_printf_float+0xae>
 8003c82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c86:	429a      	cmp	r2, r3
 8003c88:	db02      	blt.n	8003c90 <_printf_float+0x218>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	07d8      	lsls	r0, r3, #31
 8003c8e:	d50e      	bpl.n	8003cae <_printf_float+0x236>
 8003c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c94:	4659      	mov	r1, fp
 8003c96:	4628      	mov	r0, r5
 8003c98:	47b0      	blx	r6
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	f43f af43 	beq.w	8003b26 <_printf_float+0xae>
 8003ca0:	2700      	movs	r7, #0
 8003ca2:	f104 081a 	add.w	r8, r4, #26
 8003ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	42bb      	cmp	r3, r7
 8003cac:	dc09      	bgt.n	8003cc2 <_printf_float+0x24a>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	079f      	lsls	r7, r3, #30
 8003cb2:	f100 80fd 	bmi.w	8003eb0 <_printf_float+0x438>
 8003cb6:	68e0      	ldr	r0, [r4, #12]
 8003cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cba:	4298      	cmp	r0, r3
 8003cbc:	bfb8      	it	lt
 8003cbe:	4618      	movlt	r0, r3
 8003cc0:	e733      	b.n	8003b2a <_printf_float+0xb2>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	4659      	mov	r1, fp
 8003cc8:	4628      	mov	r0, r5
 8003cca:	47b0      	blx	r6
 8003ccc:	3001      	adds	r0, #1
 8003cce:	f43f af2a 	beq.w	8003b26 <_printf_float+0xae>
 8003cd2:	3701      	adds	r7, #1
 8003cd4:	e7e7      	b.n	8003ca6 <_printf_float+0x22e>
 8003cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	dc2b      	bgt.n	8003d34 <_printf_float+0x2bc>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	4a26      	ldr	r2, [pc, #152]	; (8003d78 <_printf_float+0x300>)
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	47b0      	blx	r6
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	f43f af1d 	beq.w	8003b26 <_printf_float+0xae>
 8003cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cee:	b923      	cbnz	r3, 8003cfa <_printf_float+0x282>
 8003cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cf2:	b913      	cbnz	r3, 8003cfa <_printf_float+0x282>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	07d9      	lsls	r1, r3, #31
 8003cf8:	d5d9      	bpl.n	8003cae <_printf_float+0x236>
 8003cfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cfe:	4659      	mov	r1, fp
 8003d00:	4628      	mov	r0, r5
 8003d02:	47b0      	blx	r6
 8003d04:	3001      	adds	r0, #1
 8003d06:	f43f af0e 	beq.w	8003b26 <_printf_float+0xae>
 8003d0a:	f04f 0800 	mov.w	r8, #0
 8003d0e:	f104 091a 	add.w	r9, r4, #26
 8003d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d14:	425b      	negs	r3, r3
 8003d16:	4543      	cmp	r3, r8
 8003d18:	dc01      	bgt.n	8003d1e <_printf_float+0x2a6>
 8003d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d1c:	e797      	b.n	8003c4e <_printf_float+0x1d6>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	464a      	mov	r2, r9
 8003d22:	4659      	mov	r1, fp
 8003d24:	4628      	mov	r0, r5
 8003d26:	47b0      	blx	r6
 8003d28:	3001      	adds	r0, #1
 8003d2a:	f43f aefc 	beq.w	8003b26 <_printf_float+0xae>
 8003d2e:	f108 0801 	add.w	r8, r8, #1
 8003d32:	e7ee      	b.n	8003d12 <_printf_float+0x29a>
 8003d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bfa8      	it	ge
 8003d3c:	461a      	movge	r2, r3
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	4690      	mov	r8, r2
 8003d42:	dd07      	ble.n	8003d54 <_printf_float+0x2dc>
 8003d44:	4613      	mov	r3, r2
 8003d46:	4659      	mov	r1, fp
 8003d48:	463a      	mov	r2, r7
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	47b0      	blx	r6
 8003d4e:	3001      	adds	r0, #1
 8003d50:	f43f aee9 	beq.w	8003b26 <_printf_float+0xae>
 8003d54:	f104 031a 	add.w	r3, r4, #26
 8003d58:	f04f 0a00 	mov.w	sl, #0
 8003d5c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003d60:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d62:	e015      	b.n	8003d90 <_printf_float+0x318>
 8003d64:	7fefffff 	.word	0x7fefffff
 8003d68:	0800600c 	.word	0x0800600c
 8003d6c:	08006008 	.word	0x08006008
 8003d70:	08006014 	.word	0x08006014
 8003d74:	08006010 	.word	0x08006010
 8003d78:	08006018 	.word	0x08006018
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d80:	4659      	mov	r1, fp
 8003d82:	4628      	mov	r0, r5
 8003d84:	47b0      	blx	r6
 8003d86:	3001      	adds	r0, #1
 8003d88:	f43f aecd 	beq.w	8003b26 <_printf_float+0xae>
 8003d8c:	f10a 0a01 	add.w	sl, sl, #1
 8003d90:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003d94:	eba9 0308 	sub.w	r3, r9, r8
 8003d98:	4553      	cmp	r3, sl
 8003d9a:	dcef      	bgt.n	8003d7c <_printf_float+0x304>
 8003d9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003da0:	429a      	cmp	r2, r3
 8003da2:	444f      	add	r7, r9
 8003da4:	db14      	blt.n	8003dd0 <_printf_float+0x358>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	07da      	lsls	r2, r3, #31
 8003daa:	d411      	bmi.n	8003dd0 <_printf_float+0x358>
 8003dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003db0:	eba3 0209 	sub.w	r2, r3, r9
 8003db4:	eba3 0901 	sub.w	r9, r3, r1
 8003db8:	4591      	cmp	r9, r2
 8003dba:	bfa8      	it	ge
 8003dbc:	4691      	movge	r9, r2
 8003dbe:	f1b9 0f00 	cmp.w	r9, #0
 8003dc2:	dc0d      	bgt.n	8003de0 <_printf_float+0x368>
 8003dc4:	2700      	movs	r7, #0
 8003dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dca:	f104 081a 	add.w	r8, r4, #26
 8003dce:	e018      	b.n	8003e02 <_printf_float+0x38a>
 8003dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	47b0      	blx	r6
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d1e6      	bne.n	8003dac <_printf_float+0x334>
 8003dde:	e6a2      	b.n	8003b26 <_printf_float+0xae>
 8003de0:	464b      	mov	r3, r9
 8003de2:	463a      	mov	r2, r7
 8003de4:	4659      	mov	r1, fp
 8003de6:	4628      	mov	r0, r5
 8003de8:	47b0      	blx	r6
 8003dea:	3001      	adds	r0, #1
 8003dec:	d1ea      	bne.n	8003dc4 <_printf_float+0x34c>
 8003dee:	e69a      	b.n	8003b26 <_printf_float+0xae>
 8003df0:	2301      	movs	r3, #1
 8003df2:	4642      	mov	r2, r8
 8003df4:	4659      	mov	r1, fp
 8003df6:	4628      	mov	r0, r5
 8003df8:	47b0      	blx	r6
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	f43f ae93 	beq.w	8003b26 <_printf_float+0xae>
 8003e00:	3701      	adds	r7, #1
 8003e02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	eba3 0309 	sub.w	r3, r3, r9
 8003e0c:	42bb      	cmp	r3, r7
 8003e0e:	dcef      	bgt.n	8003df0 <_printf_float+0x378>
 8003e10:	e74d      	b.n	8003cae <_printf_float+0x236>
 8003e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e14:	2a01      	cmp	r2, #1
 8003e16:	dc01      	bgt.n	8003e1c <_printf_float+0x3a4>
 8003e18:	07db      	lsls	r3, r3, #31
 8003e1a:	d538      	bpl.n	8003e8e <_printf_float+0x416>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	463a      	mov	r2, r7
 8003e20:	4659      	mov	r1, fp
 8003e22:	4628      	mov	r0, r5
 8003e24:	47b0      	blx	r6
 8003e26:	3001      	adds	r0, #1
 8003e28:	f43f ae7d 	beq.w	8003b26 <_printf_float+0xae>
 8003e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e30:	4659      	mov	r1, fp
 8003e32:	4628      	mov	r0, r5
 8003e34:	47b0      	blx	r6
 8003e36:	3001      	adds	r0, #1
 8003e38:	f107 0701 	add.w	r7, r7, #1
 8003e3c:	f43f ae73 	beq.w	8003b26 <_printf_float+0xae>
 8003e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e46:	2200      	movs	r2, #0
 8003e48:	f103 38ff 	add.w	r8, r3, #4294967295
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f7fc fdab 	bl	80009a8 <__aeabi_dcmpeq>
 8003e52:	b9c0      	cbnz	r0, 8003e86 <_printf_float+0x40e>
 8003e54:	4643      	mov	r3, r8
 8003e56:	463a      	mov	r2, r7
 8003e58:	4659      	mov	r1, fp
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b0      	blx	r6
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d10d      	bne.n	8003e7e <_printf_float+0x406>
 8003e62:	e660      	b.n	8003b26 <_printf_float+0xae>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4642      	mov	r2, r8
 8003e68:	4659      	mov	r1, fp
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b0      	blx	r6
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f ae59 	beq.w	8003b26 <_printf_float+0xae>
 8003e74:	3701      	adds	r7, #1
 8003e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	42bb      	cmp	r3, r7
 8003e7c:	dcf2      	bgt.n	8003e64 <_printf_float+0x3ec>
 8003e7e:	464b      	mov	r3, r9
 8003e80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e84:	e6e4      	b.n	8003c50 <_printf_float+0x1d8>
 8003e86:	2700      	movs	r7, #0
 8003e88:	f104 081a 	add.w	r8, r4, #26
 8003e8c:	e7f3      	b.n	8003e76 <_printf_float+0x3fe>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e7e1      	b.n	8003e56 <_printf_float+0x3de>
 8003e92:	2301      	movs	r3, #1
 8003e94:	4642      	mov	r2, r8
 8003e96:	4659      	mov	r1, fp
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b0      	blx	r6
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f43f ae42 	beq.w	8003b26 <_printf_float+0xae>
 8003ea2:	3701      	adds	r7, #1
 8003ea4:	68e3      	ldr	r3, [r4, #12]
 8003ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	42bb      	cmp	r3, r7
 8003eac:	dcf1      	bgt.n	8003e92 <_printf_float+0x41a>
 8003eae:	e702      	b.n	8003cb6 <_printf_float+0x23e>
 8003eb0:	2700      	movs	r7, #0
 8003eb2:	f104 0819 	add.w	r8, r4, #25
 8003eb6:	e7f5      	b.n	8003ea4 <_printf_float+0x42c>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f43f ae94 	beq.w	8003be6 <_printf_float+0x16e>
 8003ebe:	f04f 0c00 	mov.w	ip, #0
 8003ec2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003ec6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003eca:	6022      	str	r2, [r4, #0]
 8003ecc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003ed0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	463a      	mov	r2, r7
 8003ed8:	464b      	mov	r3, r9
 8003eda:	4628      	mov	r0, r5
 8003edc:	f7ff fd3a 	bl	8003954 <__cvt>
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	e64f      	b.n	8003b84 <_printf_float+0x10c>

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4691      	mov	r9, r2
 8003eea:	461f      	mov	r7, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bfb8      	it	lt
 8003ef6:	4613      	movlt	r3, r2
 8003ef8:	f8c9 3000 	str.w	r3, [r9]
 8003efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f00:	460c      	mov	r4, r1
 8003f02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f06:	b112      	cbz	r2, 8003f0e <_printf_common+0x2a>
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f8c9 3000 	str.w	r3, [r9]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	0699      	lsls	r1, r3, #26
 8003f12:	bf42      	ittt	mi
 8003f14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f18:	3302      	addmi	r3, #2
 8003f1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003f1e:	6825      	ldr	r5, [r4, #0]
 8003f20:	f015 0506 	ands.w	r5, r5, #6
 8003f24:	d107      	bne.n	8003f36 <_printf_common+0x52>
 8003f26:	f104 0a19 	add.w	sl, r4, #25
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	42ab      	cmp	r3, r5
 8003f34:	dc29      	bgt.n	8003f8a <_printf_common+0xa6>
 8003f36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	3300      	adds	r3, #0
 8003f3e:	bf18      	it	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	0692      	lsls	r2, r2, #26
 8003f44:	d42e      	bmi.n	8003fa4 <_printf_common+0xc0>
 8003f46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f4a:	4639      	mov	r1, r7
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	47c0      	blx	r8
 8003f50:	3001      	adds	r0, #1
 8003f52:	d021      	beq.n	8003f98 <_printf_common+0xb4>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	68e5      	ldr	r5, [r4, #12]
 8003f58:	f003 0306 	and.w	r3, r3, #6
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	bf18      	it	ne
 8003f60:	2500      	movne	r5, #0
 8003f62:	f8d9 2000 	ldr.w	r2, [r9]
 8003f66:	f04f 0900 	mov.w	r9, #0
 8003f6a:	bf08      	it	eq
 8003f6c:	1aad      	subeq	r5, r5, r2
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	6922      	ldr	r2, [r4, #16]
 8003f72:	bf08      	it	eq
 8003f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	bfc4      	itt	gt
 8003f7c:	1a9b      	subgt	r3, r3, r2
 8003f7e:	18ed      	addgt	r5, r5, r3
 8003f80:	341a      	adds	r4, #26
 8003f82:	454d      	cmp	r5, r9
 8003f84:	d11a      	bne.n	8003fbc <_printf_common+0xd8>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e008      	b.n	8003f9c <_printf_common+0xb8>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	4639      	mov	r1, r7
 8003f90:	4630      	mov	r0, r6
 8003f92:	47c0      	blx	r8
 8003f94:	3001      	adds	r0, #1
 8003f96:	d103      	bne.n	8003fa0 <_printf_common+0xbc>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	e7c2      	b.n	8003f2a <_printf_common+0x46>
 8003fa4:	2030      	movs	r0, #48	; 0x30
 8003fa6:	18e1      	adds	r1, r4, r3
 8003fa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb2:	4422      	add	r2, r4
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fba:	e7c4      	b.n	8003f46 <_printf_common+0x62>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d0e6      	beq.n	8003f98 <_printf_common+0xb4>
 8003fca:	f109 0901 	add.w	r9, r9, #1
 8003fce:	e7d8      	b.n	8003f82 <_printf_common+0x9e>

08003fd0 <_printf_i>:
 8003fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003fd8:	460c      	mov	r4, r1
 8003fda:	7e09      	ldrb	r1, [r1, #24]
 8003fdc:	b085      	sub	sp, #20
 8003fde:	296e      	cmp	r1, #110	; 0x6e
 8003fe0:	4617      	mov	r7, r2
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	4698      	mov	r8, r3
 8003fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fe8:	f000 80b3 	beq.w	8004152 <_printf_i+0x182>
 8003fec:	d822      	bhi.n	8004034 <_printf_i+0x64>
 8003fee:	2963      	cmp	r1, #99	; 0x63
 8003ff0:	d036      	beq.n	8004060 <_printf_i+0x90>
 8003ff2:	d80a      	bhi.n	800400a <_printf_i+0x3a>
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	f000 80b9 	beq.w	800416c <_printf_i+0x19c>
 8003ffa:	2958      	cmp	r1, #88	; 0x58
 8003ffc:	f000 8083 	beq.w	8004106 <_printf_i+0x136>
 8004000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004004:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004008:	e032      	b.n	8004070 <_printf_i+0xa0>
 800400a:	2964      	cmp	r1, #100	; 0x64
 800400c:	d001      	beq.n	8004012 <_printf_i+0x42>
 800400e:	2969      	cmp	r1, #105	; 0x69
 8004010:	d1f6      	bne.n	8004000 <_printf_i+0x30>
 8004012:	6820      	ldr	r0, [r4, #0]
 8004014:	6813      	ldr	r3, [r2, #0]
 8004016:	0605      	lsls	r5, r0, #24
 8004018:	f103 0104 	add.w	r1, r3, #4
 800401c:	d52a      	bpl.n	8004074 <_printf_i+0xa4>
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	da03      	bge.n	800402e <_printf_i+0x5e>
 8004026:	222d      	movs	r2, #45	; 0x2d
 8004028:	425b      	negs	r3, r3
 800402a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800402e:	486f      	ldr	r0, [pc, #444]	; (80041ec <_printf_i+0x21c>)
 8004030:	220a      	movs	r2, #10
 8004032:	e039      	b.n	80040a8 <_printf_i+0xd8>
 8004034:	2973      	cmp	r1, #115	; 0x73
 8004036:	f000 809d 	beq.w	8004174 <_printf_i+0x1a4>
 800403a:	d808      	bhi.n	800404e <_printf_i+0x7e>
 800403c:	296f      	cmp	r1, #111	; 0x6f
 800403e:	d020      	beq.n	8004082 <_printf_i+0xb2>
 8004040:	2970      	cmp	r1, #112	; 0x70
 8004042:	d1dd      	bne.n	8004000 <_printf_i+0x30>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	f043 0320 	orr.w	r3, r3, #32
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	e003      	b.n	8004056 <_printf_i+0x86>
 800404e:	2975      	cmp	r1, #117	; 0x75
 8004050:	d017      	beq.n	8004082 <_printf_i+0xb2>
 8004052:	2978      	cmp	r1, #120	; 0x78
 8004054:	d1d4      	bne.n	8004000 <_printf_i+0x30>
 8004056:	2378      	movs	r3, #120	; 0x78
 8004058:	4865      	ldr	r0, [pc, #404]	; (80041f0 <_printf_i+0x220>)
 800405a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800405e:	e055      	b.n	800410c <_printf_i+0x13c>
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004066:	1d19      	adds	r1, r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6011      	str	r1, [r2, #0]
 800406c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004070:	2301      	movs	r3, #1
 8004072:	e08c      	b.n	800418e <_printf_i+0x1be>
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f010 0f40 	tst.w	r0, #64	; 0x40
 800407a:	6011      	str	r1, [r2, #0]
 800407c:	bf18      	it	ne
 800407e:	b21b      	sxthne	r3, r3
 8004080:	e7cf      	b.n	8004022 <_printf_i+0x52>
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	6825      	ldr	r5, [r4, #0]
 8004086:	1d18      	adds	r0, r3, #4
 8004088:	6010      	str	r0, [r2, #0]
 800408a:	0628      	lsls	r0, r5, #24
 800408c:	d501      	bpl.n	8004092 <_printf_i+0xc2>
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	e002      	b.n	8004098 <_printf_i+0xc8>
 8004092:	0668      	lsls	r0, r5, #25
 8004094:	d5fb      	bpl.n	800408e <_printf_i+0xbe>
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	296f      	cmp	r1, #111	; 0x6f
 800409a:	bf14      	ite	ne
 800409c:	220a      	movne	r2, #10
 800409e:	2208      	moveq	r2, #8
 80040a0:	4852      	ldr	r0, [pc, #328]	; (80041ec <_printf_i+0x21c>)
 80040a2:	2100      	movs	r1, #0
 80040a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a8:	6865      	ldr	r5, [r4, #4]
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	60a5      	str	r5, [r4, #8]
 80040ae:	f2c0 8095 	blt.w	80041dc <_printf_i+0x20c>
 80040b2:	6821      	ldr	r1, [r4, #0]
 80040b4:	f021 0104 	bic.w	r1, r1, #4
 80040b8:	6021      	str	r1, [r4, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d13d      	bne.n	800413a <_printf_i+0x16a>
 80040be:	2d00      	cmp	r5, #0
 80040c0:	f040 808e 	bne.w	80041e0 <_printf_i+0x210>
 80040c4:	4665      	mov	r5, ip
 80040c6:	2a08      	cmp	r2, #8
 80040c8:	d10b      	bne.n	80040e2 <_printf_i+0x112>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	07db      	lsls	r3, r3, #31
 80040ce:	d508      	bpl.n	80040e2 <_printf_i+0x112>
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	6862      	ldr	r2, [r4, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	bfde      	ittt	le
 80040d8:	2330      	movle	r3, #48	; 0x30
 80040da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040e2:	ebac 0305 	sub.w	r3, ip, r5
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	f8cd 8000 	str.w	r8, [sp]
 80040ec:	463b      	mov	r3, r7
 80040ee:	aa03      	add	r2, sp, #12
 80040f0:	4621      	mov	r1, r4
 80040f2:	4630      	mov	r0, r6
 80040f4:	f7ff fef6 	bl	8003ee4 <_printf_common>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d14d      	bne.n	8004198 <_printf_i+0x1c8>
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	b005      	add	sp, #20
 8004102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004106:	4839      	ldr	r0, [pc, #228]	; (80041ec <_printf_i+0x21c>)
 8004108:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800410c:	6813      	ldr	r3, [r2, #0]
 800410e:	6821      	ldr	r1, [r4, #0]
 8004110:	1d1d      	adds	r5, r3, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6015      	str	r5, [r2, #0]
 8004116:	060a      	lsls	r2, r1, #24
 8004118:	d50b      	bpl.n	8004132 <_printf_i+0x162>
 800411a:	07ca      	lsls	r2, r1, #31
 800411c:	bf44      	itt	mi
 800411e:	f041 0120 	orrmi.w	r1, r1, #32
 8004122:	6021      	strmi	r1, [r4, #0]
 8004124:	b91b      	cbnz	r3, 800412e <_printf_i+0x15e>
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	f022 0220 	bic.w	r2, r2, #32
 800412c:	6022      	str	r2, [r4, #0]
 800412e:	2210      	movs	r2, #16
 8004130:	e7b7      	b.n	80040a2 <_printf_i+0xd2>
 8004132:	064d      	lsls	r5, r1, #25
 8004134:	bf48      	it	mi
 8004136:	b29b      	uxthmi	r3, r3
 8004138:	e7ef      	b.n	800411a <_printf_i+0x14a>
 800413a:	4665      	mov	r5, ip
 800413c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004140:	fb02 3311 	mls	r3, r2, r1, r3
 8004144:	5cc3      	ldrb	r3, [r0, r3]
 8004146:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800414a:	460b      	mov	r3, r1
 800414c:	2900      	cmp	r1, #0
 800414e:	d1f5      	bne.n	800413c <_printf_i+0x16c>
 8004150:	e7b9      	b.n	80040c6 <_printf_i+0xf6>
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	6825      	ldr	r5, [r4, #0]
 8004156:	1d18      	adds	r0, r3, #4
 8004158:	6961      	ldr	r1, [r4, #20]
 800415a:	6010      	str	r0, [r2, #0]
 800415c:	0628      	lsls	r0, r5, #24
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	d501      	bpl.n	8004166 <_printf_i+0x196>
 8004162:	6019      	str	r1, [r3, #0]
 8004164:	e002      	b.n	800416c <_printf_i+0x19c>
 8004166:	066a      	lsls	r2, r5, #25
 8004168:	d5fb      	bpl.n	8004162 <_printf_i+0x192>
 800416a:	8019      	strh	r1, [r3, #0]
 800416c:	2300      	movs	r3, #0
 800416e:	4665      	mov	r5, ip
 8004170:	6123      	str	r3, [r4, #16]
 8004172:	e7b9      	b.n	80040e8 <_printf_i+0x118>
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	1d19      	adds	r1, r3, #4
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	681d      	ldr	r5, [r3, #0]
 800417c:	6862      	ldr	r2, [r4, #4]
 800417e:	2100      	movs	r1, #0
 8004180:	4628      	mov	r0, r5
 8004182:	f000 ff71 	bl	8005068 <memchr>
 8004186:	b108      	cbz	r0, 800418c <_printf_i+0x1bc>
 8004188:	1b40      	subs	r0, r0, r5
 800418a:	6060      	str	r0, [r4, #4]
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	6123      	str	r3, [r4, #16]
 8004190:	2300      	movs	r3, #0
 8004192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004196:	e7a7      	b.n	80040e8 <_printf_i+0x118>
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	462a      	mov	r2, r5
 800419c:	4639      	mov	r1, r7
 800419e:	4630      	mov	r0, r6
 80041a0:	47c0      	blx	r8
 80041a2:	3001      	adds	r0, #1
 80041a4:	d0aa      	beq.n	80040fc <_printf_i+0x12c>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	079b      	lsls	r3, r3, #30
 80041aa:	d413      	bmi.n	80041d4 <_printf_i+0x204>
 80041ac:	68e0      	ldr	r0, [r4, #12]
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	4298      	cmp	r0, r3
 80041b2:	bfb8      	it	lt
 80041b4:	4618      	movlt	r0, r3
 80041b6:	e7a3      	b.n	8004100 <_printf_i+0x130>
 80041b8:	2301      	movs	r3, #1
 80041ba:	464a      	mov	r2, r9
 80041bc:	4639      	mov	r1, r7
 80041be:	4630      	mov	r0, r6
 80041c0:	47c0      	blx	r8
 80041c2:	3001      	adds	r0, #1
 80041c4:	d09a      	beq.n	80040fc <_printf_i+0x12c>
 80041c6:	3501      	adds	r5, #1
 80041c8:	68e3      	ldr	r3, [r4, #12]
 80041ca:	9a03      	ldr	r2, [sp, #12]
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	42ab      	cmp	r3, r5
 80041d0:	dcf2      	bgt.n	80041b8 <_printf_i+0x1e8>
 80041d2:	e7eb      	b.n	80041ac <_printf_i+0x1dc>
 80041d4:	2500      	movs	r5, #0
 80041d6:	f104 0919 	add.w	r9, r4, #25
 80041da:	e7f5      	b.n	80041c8 <_printf_i+0x1f8>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1ac      	bne.n	800413a <_printf_i+0x16a>
 80041e0:	7803      	ldrb	r3, [r0, #0]
 80041e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041ea:	e76c      	b.n	80040c6 <_printf_i+0xf6>
 80041ec:	0800601a 	.word	0x0800601a
 80041f0:	0800602b 	.word	0x0800602b

080041f4 <iprintf>:
 80041f4:	b40f      	push	{r0, r1, r2, r3}
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <iprintf+0x2c>)
 80041f8:	b513      	push	{r0, r1, r4, lr}
 80041fa:	681c      	ldr	r4, [r3, #0]
 80041fc:	b124      	cbz	r4, 8004208 <iprintf+0x14>
 80041fe:	69a3      	ldr	r3, [r4, #24]
 8004200:	b913      	cbnz	r3, 8004208 <iprintf+0x14>
 8004202:	4620      	mov	r0, r4
 8004204:	f000 fe90 	bl	8004f28 <__sinit>
 8004208:	ab05      	add	r3, sp, #20
 800420a:	9a04      	ldr	r2, [sp, #16]
 800420c:	68a1      	ldr	r1, [r4, #8]
 800420e:	4620      	mov	r0, r4
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	f001 fafb 	bl	800580c <_vfiprintf_r>
 8004216:	b002      	add	sp, #8
 8004218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800421c:	b004      	add	sp, #16
 800421e:	4770      	bx	lr
 8004220:	2000000c 	.word	0x2000000c

08004224 <quorem>:
 8004224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	6903      	ldr	r3, [r0, #16]
 800422a:	690c      	ldr	r4, [r1, #16]
 800422c:	4680      	mov	r8, r0
 800422e:	42a3      	cmp	r3, r4
 8004230:	f2c0 8084 	blt.w	800433c <quorem+0x118>
 8004234:	3c01      	subs	r4, #1
 8004236:	f101 0714 	add.w	r7, r1, #20
 800423a:	f100 0614 	add.w	r6, r0, #20
 800423e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004242:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004246:	3501      	adds	r5, #1
 8004248:	fbb0 f5f5 	udiv	r5, r0, r5
 800424c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004250:	eb06 030c 	add.w	r3, r6, ip
 8004254:	eb07 090c 	add.w	r9, r7, ip
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	b39d      	cbz	r5, 80042c4 <quorem+0xa0>
 800425c:	f04f 0a00 	mov.w	sl, #0
 8004260:	4638      	mov	r0, r7
 8004262:	46b6      	mov	lr, r6
 8004264:	46d3      	mov	fp, sl
 8004266:	f850 2b04 	ldr.w	r2, [r0], #4
 800426a:	b293      	uxth	r3, r2
 800426c:	fb05 a303 	mla	r3, r5, r3, sl
 8004270:	0c12      	lsrs	r2, r2, #16
 8004272:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004276:	fb05 a202 	mla	r2, r5, r2, sl
 800427a:	b29b      	uxth	r3, r3
 800427c:	ebab 0303 	sub.w	r3, fp, r3
 8004280:	f8de b000 	ldr.w	fp, [lr]
 8004284:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004288:	fa1f fb8b 	uxth.w	fp, fp
 800428c:	445b      	add	r3, fp
 800428e:	fa1f fb82 	uxth.w	fp, r2
 8004292:	f8de 2000 	ldr.w	r2, [lr]
 8004296:	4581      	cmp	r9, r0
 8004298:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800429c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042a6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80042aa:	f84e 3b04 	str.w	r3, [lr], #4
 80042ae:	d2da      	bcs.n	8004266 <quorem+0x42>
 80042b0:	f856 300c 	ldr.w	r3, [r6, ip]
 80042b4:	b933      	cbnz	r3, 80042c4 <quorem+0xa0>
 80042b6:	9b01      	ldr	r3, [sp, #4]
 80042b8:	3b04      	subs	r3, #4
 80042ba:	429e      	cmp	r6, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	d331      	bcc.n	8004324 <quorem+0x100>
 80042c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80042c4:	4640      	mov	r0, r8
 80042c6:	f001 f8fd 	bl	80054c4 <__mcmp>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	db26      	blt.n	800431c <quorem+0xf8>
 80042ce:	4630      	mov	r0, r6
 80042d0:	f04f 0c00 	mov.w	ip, #0
 80042d4:	3501      	adds	r5, #1
 80042d6:	f857 1b04 	ldr.w	r1, [r7], #4
 80042da:	f8d0 e000 	ldr.w	lr, [r0]
 80042de:	b28b      	uxth	r3, r1
 80042e0:	ebac 0303 	sub.w	r3, ip, r3
 80042e4:	fa1f f28e 	uxth.w	r2, lr
 80042e8:	4413      	add	r3, r2
 80042ea:	0c0a      	lsrs	r2, r1, #16
 80042ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80042f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042fa:	45b9      	cmp	r9, r7
 80042fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004300:	f840 3b04 	str.w	r3, [r0], #4
 8004304:	d2e7      	bcs.n	80042d6 <quorem+0xb2>
 8004306:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800430a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800430e:	b92a      	cbnz	r2, 800431c <quorem+0xf8>
 8004310:	3b04      	subs	r3, #4
 8004312:	429e      	cmp	r6, r3
 8004314:	461a      	mov	r2, r3
 8004316:	d30b      	bcc.n	8004330 <quorem+0x10c>
 8004318:	f8c8 4010 	str.w	r4, [r8, #16]
 800431c:	4628      	mov	r0, r5
 800431e:	b003      	add	sp, #12
 8004320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	3b04      	subs	r3, #4
 8004328:	2a00      	cmp	r2, #0
 800432a:	d1c9      	bne.n	80042c0 <quorem+0x9c>
 800432c:	3c01      	subs	r4, #1
 800432e:	e7c4      	b.n	80042ba <quorem+0x96>
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	3b04      	subs	r3, #4
 8004334:	2a00      	cmp	r2, #0
 8004336:	d1ef      	bne.n	8004318 <quorem+0xf4>
 8004338:	3c01      	subs	r4, #1
 800433a:	e7ea      	b.n	8004312 <quorem+0xee>
 800433c:	2000      	movs	r0, #0
 800433e:	e7ee      	b.n	800431e <quorem+0xfa>

08004340 <_dtoa_r>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	4616      	mov	r6, r2
 8004346:	461f      	mov	r7, r3
 8004348:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800434a:	b095      	sub	sp, #84	; 0x54
 800434c:	4604      	mov	r4, r0
 800434e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004352:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004356:	b93d      	cbnz	r5, 8004368 <_dtoa_r+0x28>
 8004358:	2010      	movs	r0, #16
 800435a:	f000 fe7d 	bl	8005058 <malloc>
 800435e:	6260      	str	r0, [r4, #36]	; 0x24
 8004360:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004364:	6005      	str	r5, [r0, #0]
 8004366:	60c5      	str	r5, [r0, #12]
 8004368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	b151      	cbz	r1, 8004384 <_dtoa_r+0x44>
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	2301      	movs	r3, #1
 8004372:	4093      	lsls	r3, r2
 8004374:	604a      	str	r2, [r1, #4]
 8004376:	608b      	str	r3, [r1, #8]
 8004378:	4620      	mov	r0, r4
 800437a:	f000 fec2 	bl	8005102 <_Bfree>
 800437e:	2200      	movs	r2, #0
 8004380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	1e3b      	subs	r3, r7, #0
 8004386:	bfaf      	iteee	ge
 8004388:	2300      	movge	r3, #0
 800438a:	2201      	movlt	r2, #1
 800438c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004390:	9303      	strlt	r3, [sp, #12]
 8004392:	bfac      	ite	ge
 8004394:	f8c8 3000 	strge.w	r3, [r8]
 8004398:	f8c8 2000 	strlt.w	r2, [r8]
 800439c:	4bae      	ldr	r3, [pc, #696]	; (8004658 <_dtoa_r+0x318>)
 800439e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80043a2:	ea33 0308 	bics.w	r3, r3, r8
 80043a6:	d11b      	bne.n	80043e0 <_dtoa_r+0xa0>
 80043a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80043ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	9b02      	ldr	r3, [sp, #8]
 80043b2:	b923      	cbnz	r3, 80043be <_dtoa_r+0x7e>
 80043b4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80043b8:	2800      	cmp	r0, #0
 80043ba:	f000 8545 	beq.w	8004e48 <_dtoa_r+0xb08>
 80043be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043c0:	b953      	cbnz	r3, 80043d8 <_dtoa_r+0x98>
 80043c2:	4ba6      	ldr	r3, [pc, #664]	; (800465c <_dtoa_r+0x31c>)
 80043c4:	e021      	b.n	800440a <_dtoa_r+0xca>
 80043c6:	4ba6      	ldr	r3, [pc, #664]	; (8004660 <_dtoa_r+0x320>)
 80043c8:	9306      	str	r3, [sp, #24]
 80043ca:	3308      	adds	r3, #8
 80043cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	9806      	ldr	r0, [sp, #24]
 80043d2:	b015      	add	sp, #84	; 0x54
 80043d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d8:	4ba0      	ldr	r3, [pc, #640]	; (800465c <_dtoa_r+0x31c>)
 80043da:	9306      	str	r3, [sp, #24]
 80043dc:	3303      	adds	r3, #3
 80043de:	e7f5      	b.n	80043cc <_dtoa_r+0x8c>
 80043e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2300      	movs	r3, #0
 80043e8:	4630      	mov	r0, r6
 80043ea:	4639      	mov	r1, r7
 80043ec:	f7fc fadc 	bl	80009a8 <__aeabi_dcmpeq>
 80043f0:	4682      	mov	sl, r0
 80043f2:	b160      	cbz	r0, 800440e <_dtoa_r+0xce>
 80043f4:	2301      	movs	r3, #1
 80043f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8520 	beq.w	8004e42 <_dtoa_r+0xb02>
 8004402:	4b98      	ldr	r3, [pc, #608]	; (8004664 <_dtoa_r+0x324>)
 8004404:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	3b01      	subs	r3, #1
 800440a:	9306      	str	r3, [sp, #24]
 800440c:	e7e0      	b.n	80043d0 <_dtoa_r+0x90>
 800440e:	ab12      	add	r3, sp, #72	; 0x48
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	ab13      	add	r3, sp, #76	; 0x4c
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	4632      	mov	r2, r6
 8004418:	463b      	mov	r3, r7
 800441a:	4620      	mov	r0, r4
 800441c:	f001 f8ca 	bl	80055b4 <__d2b>
 8004420:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004424:	4683      	mov	fp, r0
 8004426:	2d00      	cmp	r5, #0
 8004428:	d07d      	beq.n	8004526 <_dtoa_r+0x1e6>
 800442a:	46b0      	mov	r8, r6
 800442c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004430:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004434:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004438:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800443c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004440:	2200      	movs	r2, #0
 8004442:	4b89      	ldr	r3, [pc, #548]	; (8004668 <_dtoa_r+0x328>)
 8004444:	4640      	mov	r0, r8
 8004446:	4649      	mov	r1, r9
 8004448:	f7fb fe8e 	bl	8000168 <__aeabi_dsub>
 800444c:	a37c      	add	r3, pc, #496	; (adr r3, 8004640 <_dtoa_r+0x300>)
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f7fc f841 	bl	80004d8 <__aeabi_dmul>
 8004456:	a37c      	add	r3, pc, #496	; (adr r3, 8004648 <_dtoa_r+0x308>)
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f7fb fe86 	bl	800016c <__adddf3>
 8004460:	4606      	mov	r6, r0
 8004462:	4628      	mov	r0, r5
 8004464:	460f      	mov	r7, r1
 8004466:	f7fb ffcd 	bl	8000404 <__aeabi_i2d>
 800446a:	a379      	add	r3, pc, #484	; (adr r3, 8004650 <_dtoa_r+0x310>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fc f832 	bl	80004d8 <__aeabi_dmul>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4630      	mov	r0, r6
 800447a:	4639      	mov	r1, r7
 800447c:	f7fb fe76 	bl	800016c <__adddf3>
 8004480:	4606      	mov	r6, r0
 8004482:	460f      	mov	r7, r1
 8004484:	f7fc fad8 	bl	8000a38 <__aeabi_d2iz>
 8004488:	2200      	movs	r2, #0
 800448a:	4682      	mov	sl, r0
 800448c:	2300      	movs	r3, #0
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	f7fc fa93 	bl	80009bc <__aeabi_dcmplt>
 8004496:	b148      	cbz	r0, 80044ac <_dtoa_r+0x16c>
 8004498:	4650      	mov	r0, sl
 800449a:	f7fb ffb3 	bl	8000404 <__aeabi_i2d>
 800449e:	4632      	mov	r2, r6
 80044a0:	463b      	mov	r3, r7
 80044a2:	f7fc fa81 	bl	80009a8 <__aeabi_dcmpeq>
 80044a6:	b908      	cbnz	r0, 80044ac <_dtoa_r+0x16c>
 80044a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ac:	f1ba 0f16 	cmp.w	sl, #22
 80044b0:	d85a      	bhi.n	8004568 <_dtoa_r+0x228>
 80044b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044b6:	496d      	ldr	r1, [pc, #436]	; (800466c <_dtoa_r+0x32c>)
 80044b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80044bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044c0:	f7fc fa9a 	bl	80009f8 <__aeabi_dcmpgt>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d051      	beq.n	800456c <_dtoa_r+0x22c>
 80044c8:	2300      	movs	r3, #0
 80044ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ce:	930d      	str	r3, [sp, #52]	; 0x34
 80044d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044d2:	1b5d      	subs	r5, r3, r5
 80044d4:	1e6b      	subs	r3, r5, #1
 80044d6:	9307      	str	r3, [sp, #28]
 80044d8:	bf43      	ittte	mi
 80044da:	2300      	movmi	r3, #0
 80044dc:	f1c5 0901 	rsbmi	r9, r5, #1
 80044e0:	9307      	strmi	r3, [sp, #28]
 80044e2:	f04f 0900 	movpl.w	r9, #0
 80044e6:	f1ba 0f00 	cmp.w	sl, #0
 80044ea:	db41      	blt.n	8004570 <_dtoa_r+0x230>
 80044ec:	9b07      	ldr	r3, [sp, #28]
 80044ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80044f2:	4453      	add	r3, sl
 80044f4:	9307      	str	r3, [sp, #28]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9308      	str	r3, [sp, #32]
 80044fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044fc:	2b09      	cmp	r3, #9
 80044fe:	f200 808f 	bhi.w	8004620 <_dtoa_r+0x2e0>
 8004502:	2b05      	cmp	r3, #5
 8004504:	bfc4      	itt	gt
 8004506:	3b04      	subgt	r3, #4
 8004508:	931e      	strgt	r3, [sp, #120]	; 0x78
 800450a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800450c:	bfc8      	it	gt
 800450e:	2500      	movgt	r5, #0
 8004510:	f1a3 0302 	sub.w	r3, r3, #2
 8004514:	bfd8      	it	le
 8004516:	2501      	movle	r5, #1
 8004518:	2b03      	cmp	r3, #3
 800451a:	f200 808d 	bhi.w	8004638 <_dtoa_r+0x2f8>
 800451e:	e8df f003 	tbb	[pc, r3]
 8004522:	7d7b      	.short	0x7d7b
 8004524:	6f2f      	.short	0x6f2f
 8004526:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800452a:	441d      	add	r5, r3
 800452c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004530:	2820      	cmp	r0, #32
 8004532:	dd13      	ble.n	800455c <_dtoa_r+0x21c>
 8004534:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004538:	9b02      	ldr	r3, [sp, #8]
 800453a:	fa08 f800 	lsl.w	r8, r8, r0
 800453e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004542:	fa23 f000 	lsr.w	r0, r3, r0
 8004546:	ea48 0000 	orr.w	r0, r8, r0
 800454a:	f7fb ff4b 	bl	80003e4 <__aeabi_ui2d>
 800454e:	2301      	movs	r3, #1
 8004550:	4680      	mov	r8, r0
 8004552:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004556:	3d01      	subs	r5, #1
 8004558:	9310      	str	r3, [sp, #64]	; 0x40
 800455a:	e771      	b.n	8004440 <_dtoa_r+0x100>
 800455c:	9b02      	ldr	r3, [sp, #8]
 800455e:	f1c0 0020 	rsb	r0, r0, #32
 8004562:	fa03 f000 	lsl.w	r0, r3, r0
 8004566:	e7f0      	b.n	800454a <_dtoa_r+0x20a>
 8004568:	2301      	movs	r3, #1
 800456a:	e7b0      	b.n	80044ce <_dtoa_r+0x18e>
 800456c:	900d      	str	r0, [sp, #52]	; 0x34
 800456e:	e7af      	b.n	80044d0 <_dtoa_r+0x190>
 8004570:	f1ca 0300 	rsb	r3, sl, #0
 8004574:	9308      	str	r3, [sp, #32]
 8004576:	2300      	movs	r3, #0
 8004578:	eba9 090a 	sub.w	r9, r9, sl
 800457c:	930c      	str	r3, [sp, #48]	; 0x30
 800457e:	e7bc      	b.n	80044fa <_dtoa_r+0x1ba>
 8004580:	2301      	movs	r3, #1
 8004582:	9309      	str	r3, [sp, #36]	; 0x24
 8004584:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004586:	2b00      	cmp	r3, #0
 8004588:	dd74      	ble.n	8004674 <_dtoa_r+0x334>
 800458a:	4698      	mov	r8, r3
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	2200      	movs	r2, #0
 8004590:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004592:	6072      	str	r2, [r6, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	f102 0014 	add.w	r0, r2, #20
 800459a:	4298      	cmp	r0, r3
 800459c:	6871      	ldr	r1, [r6, #4]
 800459e:	d96e      	bls.n	800467e <_dtoa_r+0x33e>
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 fd7a 	bl	800509a <_Balloc>
 80045a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a8:	6030      	str	r0, [r6, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f1b8 0f0e 	cmp.w	r8, #14
 80045b0:	9306      	str	r3, [sp, #24]
 80045b2:	f200 80ed 	bhi.w	8004790 <_dtoa_r+0x450>
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	f000 80ea 	beq.w	8004790 <_dtoa_r+0x450>
 80045bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045c0:	f1ba 0f00 	cmp.w	sl, #0
 80045c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80045c8:	dd77      	ble.n	80046ba <_dtoa_r+0x37a>
 80045ca:	4a28      	ldr	r2, [pc, #160]	; (800466c <_dtoa_r+0x32c>)
 80045cc:	f00a 030f 	and.w	r3, sl, #15
 80045d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80045d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80045d8:	06f0      	lsls	r0, r6, #27
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80045e2:	d568      	bpl.n	80046b6 <_dtoa_r+0x376>
 80045e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <_dtoa_r+0x330>)
 80045ea:	2503      	movs	r5, #3
 80045ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045f0:	f7fc f89c 	bl	800072c <__aeabi_ddiv>
 80045f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045f8:	f006 060f 	and.w	r6, r6, #15
 80045fc:	4f1c      	ldr	r7, [pc, #112]	; (8004670 <_dtoa_r+0x330>)
 80045fe:	e04f      	b.n	80046a0 <_dtoa_r+0x360>
 8004600:	2301      	movs	r3, #1
 8004602:	9309      	str	r3, [sp, #36]	; 0x24
 8004604:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004606:	4453      	add	r3, sl
 8004608:	f103 0801 	add.w	r8, r3, #1
 800460c:	9304      	str	r3, [sp, #16]
 800460e:	4643      	mov	r3, r8
 8004610:	2b01      	cmp	r3, #1
 8004612:	bfb8      	it	lt
 8004614:	2301      	movlt	r3, #1
 8004616:	e7ba      	b.n	800458e <_dtoa_r+0x24e>
 8004618:	2300      	movs	r3, #0
 800461a:	e7b2      	b.n	8004582 <_dtoa_r+0x242>
 800461c:	2300      	movs	r3, #0
 800461e:	e7f0      	b.n	8004602 <_dtoa_r+0x2c2>
 8004620:	2501      	movs	r5, #1
 8004622:	2300      	movs	r3, #0
 8004624:	9509      	str	r5, [sp, #36]	; 0x24
 8004626:	931e      	str	r3, [sp, #120]	; 0x78
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
 800462c:	2200      	movs	r2, #0
 800462e:	9304      	str	r3, [sp, #16]
 8004630:	4698      	mov	r8, r3
 8004632:	2312      	movs	r3, #18
 8004634:	921f      	str	r2, [sp, #124]	; 0x7c
 8004636:	e7aa      	b.n	800458e <_dtoa_r+0x24e>
 8004638:	2301      	movs	r3, #1
 800463a:	9309      	str	r3, [sp, #36]	; 0x24
 800463c:	e7f4      	b.n	8004628 <_dtoa_r+0x2e8>
 800463e:	bf00      	nop
 8004640:	636f4361 	.word	0x636f4361
 8004644:	3fd287a7 	.word	0x3fd287a7
 8004648:	8b60c8b3 	.word	0x8b60c8b3
 800464c:	3fc68a28 	.word	0x3fc68a28
 8004650:	509f79fb 	.word	0x509f79fb
 8004654:	3fd34413 	.word	0x3fd34413
 8004658:	7ff00000 	.word	0x7ff00000
 800465c:	08006045 	.word	0x08006045
 8004660:	0800603c 	.word	0x0800603c
 8004664:	08006019 	.word	0x08006019
 8004668:	3ff80000 	.word	0x3ff80000
 800466c:	080060d8 	.word	0x080060d8
 8004670:	080060b0 	.word	0x080060b0
 8004674:	2301      	movs	r3, #1
 8004676:	9304      	str	r3, [sp, #16]
 8004678:	4698      	mov	r8, r3
 800467a:	461a      	mov	r2, r3
 800467c:	e7da      	b.n	8004634 <_dtoa_r+0x2f4>
 800467e:	3101      	adds	r1, #1
 8004680:	6071      	str	r1, [r6, #4]
 8004682:	0052      	lsls	r2, r2, #1
 8004684:	e787      	b.n	8004596 <_dtoa_r+0x256>
 8004686:	07f1      	lsls	r1, r6, #31
 8004688:	d508      	bpl.n	800469c <_dtoa_r+0x35c>
 800468a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800468e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004692:	f7fb ff21 	bl	80004d8 <__aeabi_dmul>
 8004696:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800469a:	3501      	adds	r5, #1
 800469c:	1076      	asrs	r6, r6, #1
 800469e:	3708      	adds	r7, #8
 80046a0:	2e00      	cmp	r6, #0
 80046a2:	d1f0      	bne.n	8004686 <_dtoa_r+0x346>
 80046a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ac:	f7fc f83e 	bl	800072c <__aeabi_ddiv>
 80046b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046b4:	e01b      	b.n	80046ee <_dtoa_r+0x3ae>
 80046b6:	2502      	movs	r5, #2
 80046b8:	e7a0      	b.n	80045fc <_dtoa_r+0x2bc>
 80046ba:	f000 80a4 	beq.w	8004806 <_dtoa_r+0x4c6>
 80046be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80046c2:	f1ca 0600 	rsb	r6, sl, #0
 80046c6:	4ba0      	ldr	r3, [pc, #640]	; (8004948 <_dtoa_r+0x608>)
 80046c8:	f006 020f 	and.w	r2, r6, #15
 80046cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f7fb ff00 	bl	80004d8 <__aeabi_dmul>
 80046d8:	2502      	movs	r5, #2
 80046da:	2300      	movs	r3, #0
 80046dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046e0:	4f9a      	ldr	r7, [pc, #616]	; (800494c <_dtoa_r+0x60c>)
 80046e2:	1136      	asrs	r6, r6, #4
 80046e4:	2e00      	cmp	r6, #0
 80046e6:	f040 8083 	bne.w	80047f0 <_dtoa_r+0x4b0>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e0      	bne.n	80046b0 <_dtoa_r+0x370>
 80046ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 808a 	beq.w	800480a <_dtoa_r+0x4ca>
 80046f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80046fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004702:	2200      	movs	r2, #0
 8004704:	4b92      	ldr	r3, [pc, #584]	; (8004950 <_dtoa_r+0x610>)
 8004706:	f7fc f959 	bl	80009bc <__aeabi_dcmplt>
 800470a:	2800      	cmp	r0, #0
 800470c:	d07d      	beq.n	800480a <_dtoa_r+0x4ca>
 800470e:	f1b8 0f00 	cmp.w	r8, #0
 8004712:	d07a      	beq.n	800480a <_dtoa_r+0x4ca>
 8004714:	9b04      	ldr	r3, [sp, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	dd36      	ble.n	8004788 <_dtoa_r+0x448>
 800471a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800471e:	2200      	movs	r2, #0
 8004720:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <_dtoa_r+0x614>)
 8004722:	f7fb fed9 	bl	80004d8 <__aeabi_dmul>
 8004726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800472a:	9e04      	ldr	r6, [sp, #16]
 800472c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004730:	3501      	adds	r5, #1
 8004732:	4628      	mov	r0, r5
 8004734:	f7fb fe66 	bl	8000404 <__aeabi_i2d>
 8004738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800473c:	f7fb fecc 	bl	80004d8 <__aeabi_dmul>
 8004740:	2200      	movs	r2, #0
 8004742:	4b85      	ldr	r3, [pc, #532]	; (8004958 <_dtoa_r+0x618>)
 8004744:	f7fb fd12 	bl	800016c <__adddf3>
 8004748:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800474c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004750:	950b      	str	r5, [sp, #44]	; 0x2c
 8004752:	2e00      	cmp	r6, #0
 8004754:	d15c      	bne.n	8004810 <_dtoa_r+0x4d0>
 8004756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	4b7f      	ldr	r3, [pc, #508]	; (800495c <_dtoa_r+0x61c>)
 800475e:	f7fb fd03 	bl	8000168 <__aeabi_dsub>
 8004762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004764:	462b      	mov	r3, r5
 8004766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800476a:	f7fc f945 	bl	80009f8 <__aeabi_dcmpgt>
 800476e:	2800      	cmp	r0, #0
 8004770:	f040 8281 	bne.w	8004c76 <_dtoa_r+0x936>
 8004774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800477a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800477e:	f7fc f91d 	bl	80009bc <__aeabi_dcmplt>
 8004782:	2800      	cmp	r0, #0
 8004784:	f040 8275 	bne.w	8004c72 <_dtoa_r+0x932>
 8004788:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800478c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004792:	2b00      	cmp	r3, #0
 8004794:	f2c0 814b 	blt.w	8004a2e <_dtoa_r+0x6ee>
 8004798:	f1ba 0f0e 	cmp.w	sl, #14
 800479c:	f300 8147 	bgt.w	8004a2e <_dtoa_r+0x6ee>
 80047a0:	4b69      	ldr	r3, [pc, #420]	; (8004948 <_dtoa_r+0x608>)
 80047a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f280 80d7 	bge.w	8004964 <_dtoa_r+0x624>
 80047b6:	f1b8 0f00 	cmp.w	r8, #0
 80047ba:	f300 80d3 	bgt.w	8004964 <_dtoa_r+0x624>
 80047be:	f040 8257 	bne.w	8004c70 <_dtoa_r+0x930>
 80047c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047c6:	2200      	movs	r2, #0
 80047c8:	4b64      	ldr	r3, [pc, #400]	; (800495c <_dtoa_r+0x61c>)
 80047ca:	f7fb fe85 	bl	80004d8 <__aeabi_dmul>
 80047ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047d2:	f7fc f907 	bl	80009e4 <__aeabi_dcmpge>
 80047d6:	4646      	mov	r6, r8
 80047d8:	4647      	mov	r7, r8
 80047da:	2800      	cmp	r0, #0
 80047dc:	f040 822d 	bne.w	8004c3a <_dtoa_r+0x8fa>
 80047e0:	9b06      	ldr	r3, [sp, #24]
 80047e2:	9a06      	ldr	r2, [sp, #24]
 80047e4:	1c5d      	adds	r5, r3, #1
 80047e6:	2331      	movs	r3, #49	; 0x31
 80047e8:	f10a 0a01 	add.w	sl, sl, #1
 80047ec:	7013      	strb	r3, [r2, #0]
 80047ee:	e228      	b.n	8004c42 <_dtoa_r+0x902>
 80047f0:	07f2      	lsls	r2, r6, #31
 80047f2:	d505      	bpl.n	8004800 <_dtoa_r+0x4c0>
 80047f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f8:	f7fb fe6e 	bl	80004d8 <__aeabi_dmul>
 80047fc:	2301      	movs	r3, #1
 80047fe:	3501      	adds	r5, #1
 8004800:	1076      	asrs	r6, r6, #1
 8004802:	3708      	adds	r7, #8
 8004804:	e76e      	b.n	80046e4 <_dtoa_r+0x3a4>
 8004806:	2502      	movs	r5, #2
 8004808:	e771      	b.n	80046ee <_dtoa_r+0x3ae>
 800480a:	4657      	mov	r7, sl
 800480c:	4646      	mov	r6, r8
 800480e:	e790      	b.n	8004732 <_dtoa_r+0x3f2>
 8004810:	4b4d      	ldr	r3, [pc, #308]	; (8004948 <_dtoa_r+0x608>)
 8004812:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004816:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481c:	2b00      	cmp	r3, #0
 800481e:	d048      	beq.n	80048b2 <_dtoa_r+0x572>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	2000      	movs	r0, #0
 8004826:	494e      	ldr	r1, [pc, #312]	; (8004960 <_dtoa_r+0x620>)
 8004828:	f7fb ff80 	bl	800072c <__aeabi_ddiv>
 800482c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004830:	f7fb fc9a 	bl	8000168 <__aeabi_dsub>
 8004834:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004838:	9d06      	ldr	r5, [sp, #24]
 800483a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800483e:	f7fc f8fb 	bl	8000a38 <__aeabi_d2iz>
 8004842:	9011      	str	r0, [sp, #68]	; 0x44
 8004844:	f7fb fdde 	bl	8000404 <__aeabi_i2d>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004850:	f7fb fc8a 	bl	8000168 <__aeabi_dsub>
 8004854:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800485a:	3330      	adds	r3, #48	; 0x30
 800485c:	f805 3b01 	strb.w	r3, [r5], #1
 8004860:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004864:	f7fc f8aa 	bl	80009bc <__aeabi_dcmplt>
 8004868:	2800      	cmp	r0, #0
 800486a:	d163      	bne.n	8004934 <_dtoa_r+0x5f4>
 800486c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004870:	2000      	movs	r0, #0
 8004872:	4937      	ldr	r1, [pc, #220]	; (8004950 <_dtoa_r+0x610>)
 8004874:	f7fb fc78 	bl	8000168 <__aeabi_dsub>
 8004878:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800487c:	f7fc f89e 	bl	80009bc <__aeabi_dcmplt>
 8004880:	2800      	cmp	r0, #0
 8004882:	f040 80b5 	bne.w	80049f0 <_dtoa_r+0x6b0>
 8004886:	9b06      	ldr	r3, [sp, #24]
 8004888:	1aeb      	subs	r3, r5, r3
 800488a:	429e      	cmp	r6, r3
 800488c:	f77f af7c 	ble.w	8004788 <_dtoa_r+0x448>
 8004890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004894:	2200      	movs	r2, #0
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <_dtoa_r+0x614>)
 8004898:	f7fb fe1e 	bl	80004d8 <__aeabi_dmul>
 800489c:	2200      	movs	r2, #0
 800489e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <_dtoa_r+0x614>)
 80048a8:	f7fb fe16 	bl	80004d8 <__aeabi_dmul>
 80048ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048b0:	e7c3      	b.n	800483a <_dtoa_r+0x4fa>
 80048b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048b6:	f7fb fe0f 	bl	80004d8 <__aeabi_dmul>
 80048ba:	9b06      	ldr	r3, [sp, #24]
 80048bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048c0:	199d      	adds	r5, r3, r6
 80048c2:	461e      	mov	r6, r3
 80048c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048c8:	f7fc f8b6 	bl	8000a38 <__aeabi_d2iz>
 80048cc:	9011      	str	r0, [sp, #68]	; 0x44
 80048ce:	f7fb fd99 	bl	8000404 <__aeabi_i2d>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048da:	f7fb fc45 	bl	8000168 <__aeabi_dsub>
 80048de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e4:	3330      	adds	r3, #48	; 0x30
 80048e6:	f806 3b01 	strb.w	r3, [r6], #1
 80048ea:	42ae      	cmp	r6, r5
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	d124      	bne.n	800493c <_dtoa_r+0x5fc>
 80048f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <_dtoa_r+0x620>)
 80048f8:	f7fb fc38 	bl	800016c <__adddf3>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004904:	f7fc f878 	bl	80009f8 <__aeabi_dcmpgt>
 8004908:	2800      	cmp	r0, #0
 800490a:	d171      	bne.n	80049f0 <_dtoa_r+0x6b0>
 800490c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004910:	2000      	movs	r0, #0
 8004912:	4913      	ldr	r1, [pc, #76]	; (8004960 <_dtoa_r+0x620>)
 8004914:	f7fb fc28 	bl	8000168 <__aeabi_dsub>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004920:	f7fc f84c 	bl	80009bc <__aeabi_dcmplt>
 8004924:	2800      	cmp	r0, #0
 8004926:	f43f af2f 	beq.w	8004788 <_dtoa_r+0x448>
 800492a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800492e:	1e6a      	subs	r2, r5, #1
 8004930:	2b30      	cmp	r3, #48	; 0x30
 8004932:	d001      	beq.n	8004938 <_dtoa_r+0x5f8>
 8004934:	46ba      	mov	sl, r7
 8004936:	e04a      	b.n	80049ce <_dtoa_r+0x68e>
 8004938:	4615      	mov	r5, r2
 800493a:	e7f6      	b.n	800492a <_dtoa_r+0x5ea>
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <_dtoa_r+0x614>)
 800493e:	f7fb fdcb 	bl	80004d8 <__aeabi_dmul>
 8004942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004946:	e7bd      	b.n	80048c4 <_dtoa_r+0x584>
 8004948:	080060d8 	.word	0x080060d8
 800494c:	080060b0 	.word	0x080060b0
 8004950:	3ff00000 	.word	0x3ff00000
 8004954:	40240000 	.word	0x40240000
 8004958:	401c0000 	.word	0x401c0000
 800495c:	40140000 	.word	0x40140000
 8004960:	3fe00000 	.word	0x3fe00000
 8004964:	9d06      	ldr	r5, [sp, #24]
 8004966:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800496a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800496e:	4630      	mov	r0, r6
 8004970:	4639      	mov	r1, r7
 8004972:	f7fb fedb 	bl	800072c <__aeabi_ddiv>
 8004976:	f7fc f85f 	bl	8000a38 <__aeabi_d2iz>
 800497a:	4681      	mov	r9, r0
 800497c:	f7fb fd42 	bl	8000404 <__aeabi_i2d>
 8004980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4630      	mov	r0, r6
 800498e:	4639      	mov	r1, r7
 8004990:	f7fb fbea 	bl	8000168 <__aeabi_dsub>
 8004994:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004998:	f805 6b01 	strb.w	r6, [r5], #1
 800499c:	9e06      	ldr	r6, [sp, #24]
 800499e:	4602      	mov	r2, r0
 80049a0:	1bae      	subs	r6, r5, r6
 80049a2:	45b0      	cmp	r8, r6
 80049a4:	460b      	mov	r3, r1
 80049a6:	d135      	bne.n	8004a14 <_dtoa_r+0x6d4>
 80049a8:	f7fb fbe0 	bl	800016c <__adddf3>
 80049ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049b0:	4606      	mov	r6, r0
 80049b2:	460f      	mov	r7, r1
 80049b4:	f7fc f820 	bl	80009f8 <__aeabi_dcmpgt>
 80049b8:	b9c8      	cbnz	r0, 80049ee <_dtoa_r+0x6ae>
 80049ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049be:	4630      	mov	r0, r6
 80049c0:	4639      	mov	r1, r7
 80049c2:	f7fb fff1 	bl	80009a8 <__aeabi_dcmpeq>
 80049c6:	b110      	cbz	r0, 80049ce <_dtoa_r+0x68e>
 80049c8:	f019 0f01 	tst.w	r9, #1
 80049cc:	d10f      	bne.n	80049ee <_dtoa_r+0x6ae>
 80049ce:	4659      	mov	r1, fp
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 fb96 	bl	8005102 <_Bfree>
 80049d6:	2300      	movs	r3, #0
 80049d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049da:	702b      	strb	r3, [r5, #0]
 80049dc:	f10a 0301 	add.w	r3, sl, #1
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f43f acf3 	beq.w	80043d0 <_dtoa_r+0x90>
 80049ea:	601d      	str	r5, [r3, #0]
 80049ec:	e4f0      	b.n	80043d0 <_dtoa_r+0x90>
 80049ee:	4657      	mov	r7, sl
 80049f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80049f4:	1e6b      	subs	r3, r5, #1
 80049f6:	2a39      	cmp	r2, #57	; 0x39
 80049f8:	d106      	bne.n	8004a08 <_dtoa_r+0x6c8>
 80049fa:	9a06      	ldr	r2, [sp, #24]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d107      	bne.n	8004a10 <_dtoa_r+0x6d0>
 8004a00:	2330      	movs	r3, #48	; 0x30
 8004a02:	7013      	strb	r3, [r2, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	3701      	adds	r7, #1
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	3201      	adds	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e791      	b.n	8004934 <_dtoa_r+0x5f4>
 8004a10:	461d      	mov	r5, r3
 8004a12:	e7ed      	b.n	80049f0 <_dtoa_r+0x6b0>
 8004a14:	2200      	movs	r2, #0
 8004a16:	4b99      	ldr	r3, [pc, #612]	; (8004c7c <_dtoa_r+0x93c>)
 8004a18:	f7fb fd5e 	bl	80004d8 <__aeabi_dmul>
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4606      	mov	r6, r0
 8004a22:	460f      	mov	r7, r1
 8004a24:	f7fb ffc0 	bl	80009a8 <__aeabi_dcmpeq>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d09e      	beq.n	800496a <_dtoa_r+0x62a>
 8004a2c:	e7cf      	b.n	80049ce <_dtoa_r+0x68e>
 8004a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	f000 8088 	beq.w	8004b46 <_dtoa_r+0x806>
 8004a36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a38:	2a01      	cmp	r2, #1
 8004a3a:	dc6d      	bgt.n	8004b18 <_dtoa_r+0x7d8>
 8004a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d066      	beq.n	8004b10 <_dtoa_r+0x7d0>
 8004a42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a46:	464d      	mov	r5, r9
 8004a48:	9e08      	ldr	r6, [sp, #32]
 8004a4a:	9a07      	ldr	r2, [sp, #28]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	441a      	add	r2, r3
 8004a50:	4620      	mov	r0, r4
 8004a52:	4499      	add	r9, r3
 8004a54:	9207      	str	r2, [sp, #28]
 8004a56:	f000 fbf4 	bl	8005242 <__i2b>
 8004a5a:	4607      	mov	r7, r0
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	dd0b      	ble.n	8004a78 <_dtoa_r+0x738>
 8004a60:	9b07      	ldr	r3, [sp, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	dd08      	ble.n	8004a78 <_dtoa_r+0x738>
 8004a66:	42ab      	cmp	r3, r5
 8004a68:	bfa8      	it	ge
 8004a6a:	462b      	movge	r3, r5
 8004a6c:	9a07      	ldr	r2, [sp, #28]
 8004a6e:	eba9 0903 	sub.w	r9, r9, r3
 8004a72:	1aed      	subs	r5, r5, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	9307      	str	r3, [sp, #28]
 8004a78:	9b08      	ldr	r3, [sp, #32]
 8004a7a:	b1eb      	cbz	r3, 8004ab8 <_dtoa_r+0x778>
 8004a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d065      	beq.n	8004b4e <_dtoa_r+0x80e>
 8004a82:	b18e      	cbz	r6, 8004aa8 <_dtoa_r+0x768>
 8004a84:	4639      	mov	r1, r7
 8004a86:	4632      	mov	r2, r6
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 fc79 	bl	8005380 <__pow5mult>
 8004a8e:	465a      	mov	r2, fp
 8004a90:	4601      	mov	r1, r0
 8004a92:	4607      	mov	r7, r0
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 fbdd 	bl	8005254 <__multiply>
 8004a9a:	4659      	mov	r1, fp
 8004a9c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 fb2f 	bl	8005102 <_Bfree>
 8004aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa6:	469b      	mov	fp, r3
 8004aa8:	9b08      	ldr	r3, [sp, #32]
 8004aaa:	1b9a      	subs	r2, r3, r6
 8004aac:	d004      	beq.n	8004ab8 <_dtoa_r+0x778>
 8004aae:	4659      	mov	r1, fp
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f000 fc65 	bl	8005380 <__pow5mult>
 8004ab6:	4683      	mov	fp, r0
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4620      	mov	r0, r4
 8004abc:	f000 fbc1 	bl	8005242 <__i2b>
 8004ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 81c6 	beq.w	8004e56 <_dtoa_r+0xb16>
 8004aca:	461a      	mov	r2, r3
 8004acc:	4601      	mov	r1, r0
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f000 fc56 	bl	8005380 <__pow5mult>
 8004ad4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	dc3e      	bgt.n	8004b5a <_dtoa_r+0x81a>
 8004adc:	9b02      	ldr	r3, [sp, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d137      	bne.n	8004b52 <_dtoa_r+0x812>
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d134      	bne.n	8004b56 <_dtoa_r+0x816>
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	0d1b      	lsrs	r3, r3, #20
 8004af4:	051b      	lsls	r3, r3, #20
 8004af6:	b12b      	cbz	r3, 8004b04 <_dtoa_r+0x7c4>
 8004af8:	9b07      	ldr	r3, [sp, #28]
 8004afa:	f109 0901 	add.w	r9, r9, #1
 8004afe:	3301      	adds	r3, #1
 8004b00:	9307      	str	r3, [sp, #28]
 8004b02:	2301      	movs	r3, #1
 8004b04:	9308      	str	r3, [sp, #32]
 8004b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d128      	bne.n	8004b5e <_dtoa_r+0x81e>
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	e02e      	b.n	8004b6e <_dtoa_r+0x82e>
 8004b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b16:	e796      	b.n	8004a46 <_dtoa_r+0x706>
 8004b18:	9b08      	ldr	r3, [sp, #32]
 8004b1a:	f108 36ff 	add.w	r6, r8, #4294967295
 8004b1e:	42b3      	cmp	r3, r6
 8004b20:	bfb7      	itett	lt
 8004b22:	9b08      	ldrlt	r3, [sp, #32]
 8004b24:	1b9e      	subge	r6, r3, r6
 8004b26:	1af2      	sublt	r2, r6, r3
 8004b28:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004b2a:	bfbf      	itttt	lt
 8004b2c:	9608      	strlt	r6, [sp, #32]
 8004b2e:	189b      	addlt	r3, r3, r2
 8004b30:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004b32:	2600      	movlt	r6, #0
 8004b34:	f1b8 0f00 	cmp.w	r8, #0
 8004b38:	bfb9      	ittee	lt
 8004b3a:	eba9 0508 	sublt.w	r5, r9, r8
 8004b3e:	2300      	movlt	r3, #0
 8004b40:	464d      	movge	r5, r9
 8004b42:	4643      	movge	r3, r8
 8004b44:	e781      	b.n	8004a4a <_dtoa_r+0x70a>
 8004b46:	9e08      	ldr	r6, [sp, #32]
 8004b48:	464d      	mov	r5, r9
 8004b4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b4c:	e786      	b.n	8004a5c <_dtoa_r+0x71c>
 8004b4e:	9a08      	ldr	r2, [sp, #32]
 8004b50:	e7ad      	b.n	8004aae <_dtoa_r+0x76e>
 8004b52:	2300      	movs	r3, #0
 8004b54:	e7d6      	b.n	8004b04 <_dtoa_r+0x7c4>
 8004b56:	9b02      	ldr	r3, [sp, #8]
 8004b58:	e7d4      	b.n	8004b04 <_dtoa_r+0x7c4>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9308      	str	r3, [sp, #32]
 8004b5e:	6933      	ldr	r3, [r6, #16]
 8004b60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b64:	6918      	ldr	r0, [r3, #16]
 8004b66:	f000 fb1e 	bl	80051a6 <__hi0bits>
 8004b6a:	f1c0 0020 	rsb	r0, r0, #32
 8004b6e:	9b07      	ldr	r3, [sp, #28]
 8004b70:	4418      	add	r0, r3
 8004b72:	f010 001f 	ands.w	r0, r0, #31
 8004b76:	d047      	beq.n	8004c08 <_dtoa_r+0x8c8>
 8004b78:	f1c0 0320 	rsb	r3, r0, #32
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	dd3b      	ble.n	8004bf8 <_dtoa_r+0x8b8>
 8004b80:	9b07      	ldr	r3, [sp, #28]
 8004b82:	f1c0 001c 	rsb	r0, r0, #28
 8004b86:	4481      	add	r9, r0
 8004b88:	4405      	add	r5, r0
 8004b8a:	4403      	add	r3, r0
 8004b8c:	9307      	str	r3, [sp, #28]
 8004b8e:	f1b9 0f00 	cmp.w	r9, #0
 8004b92:	dd05      	ble.n	8004ba0 <_dtoa_r+0x860>
 8004b94:	4659      	mov	r1, fp
 8004b96:	464a      	mov	r2, r9
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f000 fc3f 	bl	800541c <__lshift>
 8004b9e:	4683      	mov	fp, r0
 8004ba0:	9b07      	ldr	r3, [sp, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	dd05      	ble.n	8004bb2 <_dtoa_r+0x872>
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 fc36 	bl	800541c <__lshift>
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb4:	b353      	cbz	r3, 8004c0c <_dtoa_r+0x8cc>
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4658      	mov	r0, fp
 8004bba:	f000 fc83 	bl	80054c4 <__mcmp>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	da24      	bge.n	8004c0c <_dtoa_r+0x8cc>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	220a      	movs	r2, #10
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 fab1 	bl	8005130 <__multadd>
 8004bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bd4:	4683      	mov	fp, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8144 	beq.w	8004e64 <_dtoa_r+0xb24>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4639      	mov	r1, r7
 8004be0:	220a      	movs	r2, #10
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 faa4 	bl	8005130 <__multadd>
 8004be8:	9b04      	ldr	r3, [sp, #16]
 8004bea:	4607      	mov	r7, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dc4d      	bgt.n	8004c8c <_dtoa_r+0x94c>
 8004bf0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	dd4a      	ble.n	8004c8c <_dtoa_r+0x94c>
 8004bf6:	e011      	b.n	8004c1c <_dtoa_r+0x8dc>
 8004bf8:	d0c9      	beq.n	8004b8e <_dtoa_r+0x84e>
 8004bfa:	9a07      	ldr	r2, [sp, #28]
 8004bfc:	331c      	adds	r3, #28
 8004bfe:	441a      	add	r2, r3
 8004c00:	4499      	add	r9, r3
 8004c02:	441d      	add	r5, r3
 8004c04:	4613      	mov	r3, r2
 8004c06:	e7c1      	b.n	8004b8c <_dtoa_r+0x84c>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	e7f6      	b.n	8004bfa <_dtoa_r+0x8ba>
 8004c0c:	f1b8 0f00 	cmp.w	r8, #0
 8004c10:	dc36      	bgt.n	8004c80 <_dtoa_r+0x940>
 8004c12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	dd33      	ble.n	8004c80 <_dtoa_r+0x940>
 8004c18:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c1c:	9b04      	ldr	r3, [sp, #16]
 8004c1e:	b963      	cbnz	r3, 8004c3a <_dtoa_r+0x8fa>
 8004c20:	4631      	mov	r1, r6
 8004c22:	2205      	movs	r2, #5
 8004c24:	4620      	mov	r0, r4
 8004c26:	f000 fa83 	bl	8005130 <__multadd>
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	4658      	mov	r0, fp
 8004c30:	f000 fc48 	bl	80054c4 <__mcmp>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f73f add3 	bgt.w	80047e0 <_dtoa_r+0x4a0>
 8004c3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c3c:	9d06      	ldr	r5, [sp, #24]
 8004c3e:	ea6f 0a03 	mvn.w	sl, r3
 8004c42:	f04f 0900 	mov.w	r9, #0
 8004c46:	4631      	mov	r1, r6
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 fa5a 	bl	8005102 <_Bfree>
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	f43f aebd 	beq.w	80049ce <_dtoa_r+0x68e>
 8004c54:	f1b9 0f00 	cmp.w	r9, #0
 8004c58:	d005      	beq.n	8004c66 <_dtoa_r+0x926>
 8004c5a:	45b9      	cmp	r9, r7
 8004c5c:	d003      	beq.n	8004c66 <_dtoa_r+0x926>
 8004c5e:	4649      	mov	r1, r9
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 fa4e 	bl	8005102 <_Bfree>
 8004c66:	4639      	mov	r1, r7
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f000 fa4a 	bl	8005102 <_Bfree>
 8004c6e:	e6ae      	b.n	80049ce <_dtoa_r+0x68e>
 8004c70:	2600      	movs	r6, #0
 8004c72:	4637      	mov	r7, r6
 8004c74:	e7e1      	b.n	8004c3a <_dtoa_r+0x8fa>
 8004c76:	46ba      	mov	sl, r7
 8004c78:	4637      	mov	r7, r6
 8004c7a:	e5b1      	b.n	80047e0 <_dtoa_r+0x4a0>
 8004c7c:	40240000 	.word	0x40240000
 8004c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c82:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80f3 	beq.w	8004e72 <_dtoa_r+0xb32>
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	dd05      	ble.n	8004c9c <_dtoa_r+0x95c>
 8004c90:	4639      	mov	r1, r7
 8004c92:	462a      	mov	r2, r5
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 fbc1 	bl	800541c <__lshift>
 8004c9a:	4607      	mov	r7, r0
 8004c9c:	9b08      	ldr	r3, [sp, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d04c      	beq.n	8004d3c <_dtoa_r+0x9fc>
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 f9f8 	bl	800509a <_Balloc>
 8004caa:	4605      	mov	r5, r0
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	f107 010c 	add.w	r1, r7, #12
 8004cb2:	3202      	adds	r2, #2
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	300c      	adds	r0, #12
 8004cb8:	f000 f9e4 	bl	8005084 <memcpy>
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f000 fbab 	bl	800541c <__lshift>
 8004cc6:	46b9      	mov	r9, r7
 8004cc8:	4607      	mov	r7, r0
 8004cca:	9b06      	ldr	r3, [sp, #24]
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	9b02      	ldr	r3, [sp, #8]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	9308      	str	r3, [sp, #32]
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4658      	mov	r0, fp
 8004cda:	f7ff faa3 	bl	8004224 <quorem>
 8004cde:	4649      	mov	r1, r9
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004ce6:	4658      	mov	r0, fp
 8004ce8:	f000 fbec 	bl	80054c4 <__mcmp>
 8004cec:	463a      	mov	r2, r7
 8004cee:	9002      	str	r0, [sp, #8]
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 fc00 	bl	80054f8 <__mdiff>
 8004cf8:	68c3      	ldr	r3, [r0, #12]
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	bb03      	cbnz	r3, 8004d40 <_dtoa_r+0xa00>
 8004cfe:	4601      	mov	r1, r0
 8004d00:	9009      	str	r0, [sp, #36]	; 0x24
 8004d02:	4658      	mov	r0, fp
 8004d04:	f000 fbde 	bl	80054c4 <__mcmp>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4620      	mov	r0, r4
 8004d10:	9309      	str	r3, [sp, #36]	; 0x24
 8004d12:	f000 f9f6 	bl	8005102 <_Bfree>
 8004d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d18:	b9a3      	cbnz	r3, 8004d44 <_dtoa_r+0xa04>
 8004d1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d1c:	b992      	cbnz	r2, 8004d44 <_dtoa_r+0xa04>
 8004d1e:	9a08      	ldr	r2, [sp, #32]
 8004d20:	b982      	cbnz	r2, 8004d44 <_dtoa_r+0xa04>
 8004d22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d26:	d029      	beq.n	8004d7c <_dtoa_r+0xa3c>
 8004d28:	9b02      	ldr	r3, [sp, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dd01      	ble.n	8004d32 <_dtoa_r+0x9f2>
 8004d2e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004d32:	9b07      	ldr	r3, [sp, #28]
 8004d34:	1c5d      	adds	r5, r3, #1
 8004d36:	f883 8000 	strb.w	r8, [r3]
 8004d3a:	e784      	b.n	8004c46 <_dtoa_r+0x906>
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	e7c2      	b.n	8004cc6 <_dtoa_r+0x986>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7e3      	b.n	8004d0c <_dtoa_r+0x9cc>
 8004d44:	9a02      	ldr	r2, [sp, #8]
 8004d46:	2a00      	cmp	r2, #0
 8004d48:	db04      	blt.n	8004d54 <_dtoa_r+0xa14>
 8004d4a:	d123      	bne.n	8004d94 <_dtoa_r+0xa54>
 8004d4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d4e:	bb0a      	cbnz	r2, 8004d94 <_dtoa_r+0xa54>
 8004d50:	9a08      	ldr	r2, [sp, #32]
 8004d52:	b9fa      	cbnz	r2, 8004d94 <_dtoa_r+0xa54>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	ddec      	ble.n	8004d32 <_dtoa_r+0x9f2>
 8004d58:	4659      	mov	r1, fp
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 fb5d 	bl	800541c <__lshift>
 8004d62:	4631      	mov	r1, r6
 8004d64:	4683      	mov	fp, r0
 8004d66:	f000 fbad 	bl	80054c4 <__mcmp>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	dc03      	bgt.n	8004d76 <_dtoa_r+0xa36>
 8004d6e:	d1e0      	bne.n	8004d32 <_dtoa_r+0x9f2>
 8004d70:	f018 0f01 	tst.w	r8, #1
 8004d74:	d0dd      	beq.n	8004d32 <_dtoa_r+0x9f2>
 8004d76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d7a:	d1d8      	bne.n	8004d2e <_dtoa_r+0x9ee>
 8004d7c:	9b07      	ldr	r3, [sp, #28]
 8004d7e:	9a07      	ldr	r2, [sp, #28]
 8004d80:	1c5d      	adds	r5, r3, #1
 8004d82:	2339      	movs	r3, #57	; 0x39
 8004d84:	7013      	strb	r3, [r2, #0]
 8004d86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d8a:	1e6a      	subs	r2, r5, #1
 8004d8c:	2b39      	cmp	r3, #57	; 0x39
 8004d8e:	d04d      	beq.n	8004e2c <_dtoa_r+0xaec>
 8004d90:	3301      	adds	r3, #1
 8004d92:	e052      	b.n	8004e3a <_dtoa_r+0xafa>
 8004d94:	9a07      	ldr	r2, [sp, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f102 0501 	add.w	r5, r2, #1
 8004d9c:	dd06      	ble.n	8004dac <_dtoa_r+0xa6c>
 8004d9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004da2:	d0eb      	beq.n	8004d7c <_dtoa_r+0xa3c>
 8004da4:	f108 0801 	add.w	r8, r8, #1
 8004da8:	9b07      	ldr	r3, [sp, #28]
 8004daa:	e7c4      	b.n	8004d36 <_dtoa_r+0x9f6>
 8004dac:	9b06      	ldr	r3, [sp, #24]
 8004dae:	9a04      	ldr	r2, [sp, #16]
 8004db0:	1aeb      	subs	r3, r5, r3
 8004db2:	4293      	cmp	r3, r2
 8004db4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004db8:	d021      	beq.n	8004dfe <_dtoa_r+0xabe>
 8004dba:	4659      	mov	r1, fp
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	220a      	movs	r2, #10
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 f9b5 	bl	8005130 <__multadd>
 8004dc6:	45b9      	cmp	r9, r7
 8004dc8:	4683      	mov	fp, r0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	f04f 020a 	mov.w	r2, #10
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	d105      	bne.n	8004de4 <_dtoa_r+0xaa4>
 8004dd8:	f000 f9aa 	bl	8005130 <__multadd>
 8004ddc:	4681      	mov	r9, r0
 8004dde:	4607      	mov	r7, r0
 8004de0:	9507      	str	r5, [sp, #28]
 8004de2:	e778      	b.n	8004cd6 <_dtoa_r+0x996>
 8004de4:	f000 f9a4 	bl	8005130 <__multadd>
 8004de8:	4639      	mov	r1, r7
 8004dea:	4681      	mov	r9, r0
 8004dec:	2300      	movs	r3, #0
 8004dee:	220a      	movs	r2, #10
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 f99d 	bl	8005130 <__multadd>
 8004df6:	4607      	mov	r7, r0
 8004df8:	e7f2      	b.n	8004de0 <_dtoa_r+0xaa0>
 8004dfa:	f04f 0900 	mov.w	r9, #0
 8004dfe:	4659      	mov	r1, fp
 8004e00:	2201      	movs	r2, #1
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 fb0a 	bl	800541c <__lshift>
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4683      	mov	fp, r0
 8004e0c:	f000 fb5a 	bl	80054c4 <__mcmp>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	dcb8      	bgt.n	8004d86 <_dtoa_r+0xa46>
 8004e14:	d102      	bne.n	8004e1c <_dtoa_r+0xadc>
 8004e16:	f018 0f01 	tst.w	r8, #1
 8004e1a:	d1b4      	bne.n	8004d86 <_dtoa_r+0xa46>
 8004e1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e20:	1e6a      	subs	r2, r5, #1
 8004e22:	2b30      	cmp	r3, #48	; 0x30
 8004e24:	f47f af0f 	bne.w	8004c46 <_dtoa_r+0x906>
 8004e28:	4615      	mov	r5, r2
 8004e2a:	e7f7      	b.n	8004e1c <_dtoa_r+0xadc>
 8004e2c:	9b06      	ldr	r3, [sp, #24]
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d105      	bne.n	8004e3e <_dtoa_r+0xafe>
 8004e32:	2331      	movs	r3, #49	; 0x31
 8004e34:	9a06      	ldr	r2, [sp, #24]
 8004e36:	f10a 0a01 	add.w	sl, sl, #1
 8004e3a:	7013      	strb	r3, [r2, #0]
 8004e3c:	e703      	b.n	8004c46 <_dtoa_r+0x906>
 8004e3e:	4615      	mov	r5, r2
 8004e40:	e7a1      	b.n	8004d86 <_dtoa_r+0xa46>
 8004e42:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <_dtoa_r+0xb60>)
 8004e44:	f7ff bae1 	b.w	800440a <_dtoa_r+0xca>
 8004e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f47f aabb 	bne.w	80043c6 <_dtoa_r+0x86>
 8004e50:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <_dtoa_r+0xb64>)
 8004e52:	f7ff bada 	b.w	800440a <_dtoa_r+0xca>
 8004e56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	f77f ae3f 	ble.w	8004adc <_dtoa_r+0x79c>
 8004e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e60:	9308      	str	r3, [sp, #32]
 8004e62:	e653      	b.n	8004b0c <_dtoa_r+0x7cc>
 8004e64:	9b04      	ldr	r3, [sp, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	dc03      	bgt.n	8004e72 <_dtoa_r+0xb32>
 8004e6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f73f aed5 	bgt.w	8004c1c <_dtoa_r+0x8dc>
 8004e72:	9d06      	ldr	r5, [sp, #24]
 8004e74:	4631      	mov	r1, r6
 8004e76:	4658      	mov	r0, fp
 8004e78:	f7ff f9d4 	bl	8004224 <quorem>
 8004e7c:	9b06      	ldr	r3, [sp, #24]
 8004e7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e82:	f805 8b01 	strb.w	r8, [r5], #1
 8004e86:	9a04      	ldr	r2, [sp, #16]
 8004e88:	1aeb      	subs	r3, r5, r3
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	ddb5      	ble.n	8004dfa <_dtoa_r+0xaba>
 8004e8e:	4659      	mov	r1, fp
 8004e90:	2300      	movs	r3, #0
 8004e92:	220a      	movs	r2, #10
 8004e94:	4620      	mov	r0, r4
 8004e96:	f000 f94b 	bl	8005130 <__multadd>
 8004e9a:	4683      	mov	fp, r0
 8004e9c:	e7ea      	b.n	8004e74 <_dtoa_r+0xb34>
 8004e9e:	bf00      	nop
 8004ea0:	08006018 	.word	0x08006018
 8004ea4:	0800603c 	.word	0x0800603c

08004ea8 <std>:
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	4604      	mov	r4, r0
 8004eae:	e9c0 3300 	strd	r3, r3, [r0]
 8004eb2:	6083      	str	r3, [r0, #8]
 8004eb4:	8181      	strh	r1, [r0, #12]
 8004eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8004eb8:	81c2      	strh	r2, [r0, #14]
 8004eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ebe:	6183      	str	r3, [r0, #24]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	2208      	movs	r2, #8
 8004ec4:	305c      	adds	r0, #92	; 0x5c
 8004ec6:	f7fe fd3d 	bl	8003944 <memset>
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <std+0x38>)
 8004ecc:	6224      	str	r4, [r4, #32]
 8004ece:	6263      	str	r3, [r4, #36]	; 0x24
 8004ed0:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <std+0x3c>)
 8004ed2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <std+0x40>)
 8004ed6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <std+0x44>)
 8004eda:	6323      	str	r3, [r4, #48]	; 0x30
 8004edc:	bd10      	pop	{r4, pc}
 8004ede:	bf00      	nop
 8004ee0:	08005a59 	.word	0x08005a59
 8004ee4:	08005a7b 	.word	0x08005a7b
 8004ee8:	08005ab3 	.word	0x08005ab3
 8004eec:	08005ad7 	.word	0x08005ad7

08004ef0 <_cleanup_r>:
 8004ef0:	4901      	ldr	r1, [pc, #4]	; (8004ef8 <_cleanup_r+0x8>)
 8004ef2:	f000 b885 	b.w	8005000 <_fwalk_reent>
 8004ef6:	bf00      	nop
 8004ef8:	08005db1 	.word	0x08005db1

08004efc <__sfmoreglue>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	2568      	movs	r5, #104	; 0x68
 8004f00:	1e4a      	subs	r2, r1, #1
 8004f02:	4355      	muls	r5, r2
 8004f04:	460e      	mov	r6, r1
 8004f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f0a:	f000 fbfd 	bl	8005708 <_malloc_r>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	b140      	cbz	r0, 8004f24 <__sfmoreglue+0x28>
 8004f12:	2100      	movs	r1, #0
 8004f14:	e9c0 1600 	strd	r1, r6, [r0]
 8004f18:	300c      	adds	r0, #12
 8004f1a:	60a0      	str	r0, [r4, #8]
 8004f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f20:	f7fe fd10 	bl	8003944 <memset>
 8004f24:	4620      	mov	r0, r4
 8004f26:	bd70      	pop	{r4, r5, r6, pc}

08004f28 <__sinit>:
 8004f28:	6983      	ldr	r3, [r0, #24]
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	bb33      	cbnz	r3, 8004f7e <__sinit+0x56>
 8004f30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f34:	6503      	str	r3, [r0, #80]	; 0x50
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <__sinit+0x58>)
 8004f38:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <__sinit+0x5c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6282      	str	r2, [r0, #40]	; 0x28
 8004f3e:	4298      	cmp	r0, r3
 8004f40:	bf04      	itt	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	6183      	streq	r3, [r0, #24]
 8004f46:	f000 f81f 	bl	8004f88 <__sfp>
 8004f4a:	6060      	str	r0, [r4, #4]
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 f81b 	bl	8004f88 <__sfp>
 8004f52:	60a0      	str	r0, [r4, #8]
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f817 	bl	8004f88 <__sfp>
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	60e0      	str	r0, [r4, #12]
 8004f5e:	2104      	movs	r1, #4
 8004f60:	6860      	ldr	r0, [r4, #4]
 8004f62:	f7ff ffa1 	bl	8004ea8 <std>
 8004f66:	2201      	movs	r2, #1
 8004f68:	2109      	movs	r1, #9
 8004f6a:	68a0      	ldr	r0, [r4, #8]
 8004f6c:	f7ff ff9c 	bl	8004ea8 <std>
 8004f70:	2202      	movs	r2, #2
 8004f72:	2112      	movs	r1, #18
 8004f74:	68e0      	ldr	r0, [r4, #12]
 8004f76:	f7ff ff97 	bl	8004ea8 <std>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61a3      	str	r3, [r4, #24]
 8004f7e:	bd10      	pop	{r4, pc}
 8004f80:	08006004 	.word	0x08006004
 8004f84:	08004ef1 	.word	0x08004ef1

08004f88 <__sfp>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <__sfp+0x70>)
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	681e      	ldr	r6, [r3, #0]
 8004f90:	69b3      	ldr	r3, [r6, #24]
 8004f92:	b913      	cbnz	r3, 8004f9a <__sfp+0x12>
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7ff ffc7 	bl	8004f28 <__sinit>
 8004f9a:	3648      	adds	r6, #72	; 0x48
 8004f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	d503      	bpl.n	8004fac <__sfp+0x24>
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	b133      	cbz	r3, 8004fb6 <__sfp+0x2e>
 8004fa8:	6836      	ldr	r6, [r6, #0]
 8004faa:	e7f7      	b.n	8004f9c <__sfp+0x14>
 8004fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fb0:	b16d      	cbz	r5, 8004fce <__sfp+0x46>
 8004fb2:	3468      	adds	r4, #104	; 0x68
 8004fb4:	e7f4      	b.n	8004fa0 <__sfp+0x18>
 8004fb6:	2104      	movs	r1, #4
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7ff ff9f 	bl	8004efc <__sfmoreglue>
 8004fbe:	6030      	str	r0, [r6, #0]
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d1f1      	bne.n	8004fa8 <__sfp+0x20>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4620      	mov	r0, r4
 8004fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <__sfp+0x74>)
 8004fd0:	6665      	str	r5, [r4, #100]	; 0x64
 8004fd2:	e9c4 5500 	strd	r5, r5, [r4]
 8004fd6:	60a5      	str	r5, [r4, #8]
 8004fd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004fdc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fe8:	f7fe fcac 	bl	8003944 <memset>
 8004fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ff4:	e7e9      	b.n	8004fca <__sfp+0x42>
 8004ff6:	bf00      	nop
 8004ff8:	08006004 	.word	0x08006004
 8004ffc:	ffff0001 	.word	0xffff0001

08005000 <_fwalk_reent>:
 8005000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005004:	4680      	mov	r8, r0
 8005006:	4689      	mov	r9, r1
 8005008:	2600      	movs	r6, #0
 800500a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800500e:	b914      	cbnz	r4, 8005016 <_fwalk_reent+0x16>
 8005010:	4630      	mov	r0, r6
 8005012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005016:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800501a:	3f01      	subs	r7, #1
 800501c:	d501      	bpl.n	8005022 <_fwalk_reent+0x22>
 800501e:	6824      	ldr	r4, [r4, #0]
 8005020:	e7f5      	b.n	800500e <_fwalk_reent+0xe>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d907      	bls.n	8005038 <_fwalk_reent+0x38>
 8005028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800502c:	3301      	adds	r3, #1
 800502e:	d003      	beq.n	8005038 <_fwalk_reent+0x38>
 8005030:	4629      	mov	r1, r5
 8005032:	4640      	mov	r0, r8
 8005034:	47c8      	blx	r9
 8005036:	4306      	orrs	r6, r0
 8005038:	3568      	adds	r5, #104	; 0x68
 800503a:	e7ee      	b.n	800501a <_fwalk_reent+0x1a>

0800503c <_localeconv_r>:
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <_localeconv_r+0x14>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a18      	ldr	r0, [r3, #32]
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <_localeconv_r+0x18>)
 8005044:	2800      	cmp	r0, #0
 8005046:	bf08      	it	eq
 8005048:	4618      	moveq	r0, r3
 800504a:	30f0      	adds	r0, #240	; 0xf0
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c
 8005054:	20000070 	.word	0x20000070

08005058 <malloc>:
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <malloc+0xc>)
 800505a:	4601      	mov	r1, r0
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	f000 bb53 	b.w	8005708 <_malloc_r>
 8005062:	bf00      	nop
 8005064:	2000000c 	.word	0x2000000c

08005068 <memchr>:
 8005068:	b510      	push	{r4, lr}
 800506a:	b2c9      	uxtb	r1, r1
 800506c:	4402      	add	r2, r0
 800506e:	4290      	cmp	r0, r2
 8005070:	4603      	mov	r3, r0
 8005072:	d101      	bne.n	8005078 <memchr+0x10>
 8005074:	2300      	movs	r3, #0
 8005076:	e003      	b.n	8005080 <memchr+0x18>
 8005078:	781c      	ldrb	r4, [r3, #0]
 800507a:	3001      	adds	r0, #1
 800507c:	428c      	cmp	r4, r1
 800507e:	d1f6      	bne.n	800506e <memchr+0x6>
 8005080:	4618      	mov	r0, r3
 8005082:	bd10      	pop	{r4, pc}

08005084 <memcpy>:
 8005084:	b510      	push	{r4, lr}
 8005086:	1e43      	subs	r3, r0, #1
 8005088:	440a      	add	r2, r1
 800508a:	4291      	cmp	r1, r2
 800508c:	d100      	bne.n	8005090 <memcpy+0xc>
 800508e:	bd10      	pop	{r4, pc}
 8005090:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005098:	e7f7      	b.n	800508a <memcpy+0x6>

0800509a <_Balloc>:
 800509a:	b570      	push	{r4, r5, r6, lr}
 800509c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800509e:	4604      	mov	r4, r0
 80050a0:	460e      	mov	r6, r1
 80050a2:	b93d      	cbnz	r5, 80050b4 <_Balloc+0x1a>
 80050a4:	2010      	movs	r0, #16
 80050a6:	f7ff ffd7 	bl	8005058 <malloc>
 80050aa:	6260      	str	r0, [r4, #36]	; 0x24
 80050ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050b0:	6005      	str	r5, [r0, #0]
 80050b2:	60c5      	str	r5, [r0, #12]
 80050b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80050b6:	68eb      	ldr	r3, [r5, #12]
 80050b8:	b183      	cbz	r3, 80050dc <_Balloc+0x42>
 80050ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80050c2:	b9b8      	cbnz	r0, 80050f4 <_Balloc+0x5a>
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f506 	lsl.w	r5, r1, r6
 80050ca:	1d6a      	adds	r2, r5, #5
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 fabf 	bl	8005652 <_calloc_r>
 80050d4:	b160      	cbz	r0, 80050f0 <_Balloc+0x56>
 80050d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80050da:	e00e      	b.n	80050fa <_Balloc+0x60>
 80050dc:	2221      	movs	r2, #33	; 0x21
 80050de:	2104      	movs	r1, #4
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 fab6 	bl	8005652 <_calloc_r>
 80050e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e8:	60e8      	str	r0, [r5, #12]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e4      	bne.n	80050ba <_Balloc+0x20>
 80050f0:	2000      	movs	r0, #0
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	6802      	ldr	r2, [r0, #0]
 80050f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80050fa:	2300      	movs	r3, #0
 80050fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005100:	e7f7      	b.n	80050f2 <_Balloc+0x58>

08005102 <_Bfree>:
 8005102:	b570      	push	{r4, r5, r6, lr}
 8005104:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005106:	4606      	mov	r6, r0
 8005108:	460d      	mov	r5, r1
 800510a:	b93c      	cbnz	r4, 800511c <_Bfree+0x1a>
 800510c:	2010      	movs	r0, #16
 800510e:	f7ff ffa3 	bl	8005058 <malloc>
 8005112:	6270      	str	r0, [r6, #36]	; 0x24
 8005114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005118:	6004      	str	r4, [r0, #0]
 800511a:	60c4      	str	r4, [r0, #12]
 800511c:	b13d      	cbz	r5, 800512e <_Bfree+0x2c>
 800511e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005120:	686a      	ldr	r2, [r5, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005128:	6029      	str	r1, [r5, #0]
 800512a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800512e:	bd70      	pop	{r4, r5, r6, pc}

08005130 <__multadd>:
 8005130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005134:	461f      	mov	r7, r3
 8005136:	4606      	mov	r6, r0
 8005138:	460c      	mov	r4, r1
 800513a:	2300      	movs	r3, #0
 800513c:	690d      	ldr	r5, [r1, #16]
 800513e:	f101 0c14 	add.w	ip, r1, #20
 8005142:	f8dc 0000 	ldr.w	r0, [ip]
 8005146:	3301      	adds	r3, #1
 8005148:	b281      	uxth	r1, r0
 800514a:	fb02 7101 	mla	r1, r2, r1, r7
 800514e:	0c00      	lsrs	r0, r0, #16
 8005150:	0c0f      	lsrs	r7, r1, #16
 8005152:	fb02 7000 	mla	r0, r2, r0, r7
 8005156:	b289      	uxth	r1, r1
 8005158:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800515c:	429d      	cmp	r5, r3
 800515e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005162:	f84c 1b04 	str.w	r1, [ip], #4
 8005166:	dcec      	bgt.n	8005142 <__multadd+0x12>
 8005168:	b1d7      	cbz	r7, 80051a0 <__multadd+0x70>
 800516a:	68a3      	ldr	r3, [r4, #8]
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc12      	bgt.n	8005196 <__multadd+0x66>
 8005170:	6861      	ldr	r1, [r4, #4]
 8005172:	4630      	mov	r0, r6
 8005174:	3101      	adds	r1, #1
 8005176:	f7ff ff90 	bl	800509a <_Balloc>
 800517a:	4680      	mov	r8, r0
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	f104 010c 	add.w	r1, r4, #12
 8005182:	3202      	adds	r2, #2
 8005184:	0092      	lsls	r2, r2, #2
 8005186:	300c      	adds	r0, #12
 8005188:	f7ff ff7c 	bl	8005084 <memcpy>
 800518c:	4621      	mov	r1, r4
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff ffb7 	bl	8005102 <_Bfree>
 8005194:	4644      	mov	r4, r8
 8005196:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800519a:	3501      	adds	r5, #1
 800519c:	615f      	str	r7, [r3, #20]
 800519e:	6125      	str	r5, [r4, #16]
 80051a0:	4620      	mov	r0, r4
 80051a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051a6 <__hi0bits>:
 80051a6:	0c02      	lsrs	r2, r0, #16
 80051a8:	0412      	lsls	r2, r2, #16
 80051aa:	4603      	mov	r3, r0
 80051ac:	b9b2      	cbnz	r2, 80051dc <__hi0bits+0x36>
 80051ae:	0403      	lsls	r3, r0, #16
 80051b0:	2010      	movs	r0, #16
 80051b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80051b6:	bf04      	itt	eq
 80051b8:	021b      	lsleq	r3, r3, #8
 80051ba:	3008      	addeq	r0, #8
 80051bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80051c0:	bf04      	itt	eq
 80051c2:	011b      	lsleq	r3, r3, #4
 80051c4:	3004      	addeq	r0, #4
 80051c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80051ca:	bf04      	itt	eq
 80051cc:	009b      	lsleq	r3, r3, #2
 80051ce:	3002      	addeq	r0, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	db06      	blt.n	80051e2 <__hi0bits+0x3c>
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	d503      	bpl.n	80051e0 <__hi0bits+0x3a>
 80051d8:	3001      	adds	r0, #1
 80051da:	4770      	bx	lr
 80051dc:	2000      	movs	r0, #0
 80051de:	e7e8      	b.n	80051b2 <__hi0bits+0xc>
 80051e0:	2020      	movs	r0, #32
 80051e2:	4770      	bx	lr

080051e4 <__lo0bits>:
 80051e4:	6803      	ldr	r3, [r0, #0]
 80051e6:	4601      	mov	r1, r0
 80051e8:	f013 0207 	ands.w	r2, r3, #7
 80051ec:	d00b      	beq.n	8005206 <__lo0bits+0x22>
 80051ee:	07da      	lsls	r2, r3, #31
 80051f0:	d423      	bmi.n	800523a <__lo0bits+0x56>
 80051f2:	0798      	lsls	r0, r3, #30
 80051f4:	bf49      	itett	mi
 80051f6:	085b      	lsrmi	r3, r3, #1
 80051f8:	089b      	lsrpl	r3, r3, #2
 80051fa:	2001      	movmi	r0, #1
 80051fc:	600b      	strmi	r3, [r1, #0]
 80051fe:	bf5c      	itt	pl
 8005200:	600b      	strpl	r3, [r1, #0]
 8005202:	2002      	movpl	r0, #2
 8005204:	4770      	bx	lr
 8005206:	b298      	uxth	r0, r3
 8005208:	b9a8      	cbnz	r0, 8005236 <__lo0bits+0x52>
 800520a:	2010      	movs	r0, #16
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005212:	bf04      	itt	eq
 8005214:	0a1b      	lsreq	r3, r3, #8
 8005216:	3008      	addeq	r0, #8
 8005218:	071a      	lsls	r2, r3, #28
 800521a:	bf04      	itt	eq
 800521c:	091b      	lsreq	r3, r3, #4
 800521e:	3004      	addeq	r0, #4
 8005220:	079a      	lsls	r2, r3, #30
 8005222:	bf04      	itt	eq
 8005224:	089b      	lsreq	r3, r3, #2
 8005226:	3002      	addeq	r0, #2
 8005228:	07da      	lsls	r2, r3, #31
 800522a:	d402      	bmi.n	8005232 <__lo0bits+0x4e>
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	d006      	beq.n	800523e <__lo0bits+0x5a>
 8005230:	3001      	adds	r0, #1
 8005232:	600b      	str	r3, [r1, #0]
 8005234:	4770      	bx	lr
 8005236:	4610      	mov	r0, r2
 8005238:	e7e9      	b.n	800520e <__lo0bits+0x2a>
 800523a:	2000      	movs	r0, #0
 800523c:	4770      	bx	lr
 800523e:	2020      	movs	r0, #32
 8005240:	4770      	bx	lr

08005242 <__i2b>:
 8005242:	b510      	push	{r4, lr}
 8005244:	460c      	mov	r4, r1
 8005246:	2101      	movs	r1, #1
 8005248:	f7ff ff27 	bl	800509a <_Balloc>
 800524c:	2201      	movs	r2, #1
 800524e:	6144      	str	r4, [r0, #20]
 8005250:	6102      	str	r2, [r0, #16]
 8005252:	bd10      	pop	{r4, pc}

08005254 <__multiply>:
 8005254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005258:	4614      	mov	r4, r2
 800525a:	690a      	ldr	r2, [r1, #16]
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	4688      	mov	r8, r1
 8005260:	429a      	cmp	r2, r3
 8005262:	bfbe      	ittt	lt
 8005264:	460b      	movlt	r3, r1
 8005266:	46a0      	movlt	r8, r4
 8005268:	461c      	movlt	r4, r3
 800526a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800526e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005276:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800527a:	eb07 0609 	add.w	r6, r7, r9
 800527e:	42b3      	cmp	r3, r6
 8005280:	bfb8      	it	lt
 8005282:	3101      	addlt	r1, #1
 8005284:	f7ff ff09 	bl	800509a <_Balloc>
 8005288:	f100 0514 	add.w	r5, r0, #20
 800528c:	462b      	mov	r3, r5
 800528e:	2200      	movs	r2, #0
 8005290:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005294:	4573      	cmp	r3, lr
 8005296:	d316      	bcc.n	80052c6 <__multiply+0x72>
 8005298:	f104 0214 	add.w	r2, r4, #20
 800529c:	f108 0114 	add.w	r1, r8, #20
 80052a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80052a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	9201      	str	r2, [sp, #4]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d80c      	bhi.n	80052cc <__multiply+0x78>
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	dd03      	ble.n	80052be <__multiply+0x6a>
 80052b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d05d      	beq.n	800537a <__multiply+0x126>
 80052be:	6106      	str	r6, [r0, #16]
 80052c0:	b003      	add	sp, #12
 80052c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c6:	f843 2b04 	str.w	r2, [r3], #4
 80052ca:	e7e3      	b.n	8005294 <__multiply+0x40>
 80052cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80052d0:	f1bb 0f00 	cmp.w	fp, #0
 80052d4:	d023      	beq.n	800531e <__multiply+0xca>
 80052d6:	4689      	mov	r9, r1
 80052d8:	46ac      	mov	ip, r5
 80052da:	f04f 0800 	mov.w	r8, #0
 80052de:	f859 4b04 	ldr.w	r4, [r9], #4
 80052e2:	f8dc a000 	ldr.w	sl, [ip]
 80052e6:	b2a3      	uxth	r3, r4
 80052e8:	fa1f fa8a 	uxth.w	sl, sl
 80052ec:	fb0b a303 	mla	r3, fp, r3, sl
 80052f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052f4:	f8dc 4000 	ldr.w	r4, [ip]
 80052f8:	4443      	add	r3, r8
 80052fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80052fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8005302:	46e2      	mov	sl, ip
 8005304:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800530e:	454f      	cmp	r7, r9
 8005310:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005314:	f84a 3b04 	str.w	r3, [sl], #4
 8005318:	d82b      	bhi.n	8005372 <__multiply+0x11e>
 800531a:	f8cc 8004 	str.w	r8, [ip, #4]
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	3204      	adds	r2, #4
 8005322:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005326:	f1ba 0f00 	cmp.w	sl, #0
 800532a:	d020      	beq.n	800536e <__multiply+0x11a>
 800532c:	4689      	mov	r9, r1
 800532e:	46a8      	mov	r8, r5
 8005330:	f04f 0b00 	mov.w	fp, #0
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	f8b9 c000 	ldrh.w	ip, [r9]
 800533a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800533e:	b29b      	uxth	r3, r3
 8005340:	fb0a 440c 	mla	r4, sl, ip, r4
 8005344:	46c4      	mov	ip, r8
 8005346:	445c      	add	r4, fp
 8005348:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800534c:	f84c 3b04 	str.w	r3, [ip], #4
 8005350:	f859 3b04 	ldr.w	r3, [r9], #4
 8005354:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	fb0a b303 	mla	r3, sl, r3, fp
 800535e:	454f      	cmp	r7, r9
 8005360:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005364:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005368:	d805      	bhi.n	8005376 <__multiply+0x122>
 800536a:	f8c8 3004 	str.w	r3, [r8, #4]
 800536e:	3504      	adds	r5, #4
 8005370:	e79b      	b.n	80052aa <__multiply+0x56>
 8005372:	46d4      	mov	ip, sl
 8005374:	e7b3      	b.n	80052de <__multiply+0x8a>
 8005376:	46e0      	mov	r8, ip
 8005378:	e7dd      	b.n	8005336 <__multiply+0xe2>
 800537a:	3e01      	subs	r6, #1
 800537c:	e799      	b.n	80052b2 <__multiply+0x5e>
	...

08005380 <__pow5mult>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	4615      	mov	r5, r2
 8005386:	f012 0203 	ands.w	r2, r2, #3
 800538a:	4606      	mov	r6, r0
 800538c:	460f      	mov	r7, r1
 800538e:	d007      	beq.n	80053a0 <__pow5mult+0x20>
 8005390:	4c21      	ldr	r4, [pc, #132]	; (8005418 <__pow5mult+0x98>)
 8005392:	3a01      	subs	r2, #1
 8005394:	2300      	movs	r3, #0
 8005396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800539a:	f7ff fec9 	bl	8005130 <__multadd>
 800539e:	4607      	mov	r7, r0
 80053a0:	10ad      	asrs	r5, r5, #2
 80053a2:	d035      	beq.n	8005410 <__pow5mult+0x90>
 80053a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053a6:	b93c      	cbnz	r4, 80053b8 <__pow5mult+0x38>
 80053a8:	2010      	movs	r0, #16
 80053aa:	f7ff fe55 	bl	8005058 <malloc>
 80053ae:	6270      	str	r0, [r6, #36]	; 0x24
 80053b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053b4:	6004      	str	r4, [r0, #0]
 80053b6:	60c4      	str	r4, [r0, #12]
 80053b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053c0:	b94c      	cbnz	r4, 80053d6 <__pow5mult+0x56>
 80053c2:	f240 2171 	movw	r1, #625	; 0x271
 80053c6:	4630      	mov	r0, r6
 80053c8:	f7ff ff3b 	bl	8005242 <__i2b>
 80053cc:	2300      	movs	r3, #0
 80053ce:	4604      	mov	r4, r0
 80053d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80053d4:	6003      	str	r3, [r0, #0]
 80053d6:	f04f 0800 	mov.w	r8, #0
 80053da:	07eb      	lsls	r3, r5, #31
 80053dc:	d50a      	bpl.n	80053f4 <__pow5mult+0x74>
 80053de:	4639      	mov	r1, r7
 80053e0:	4622      	mov	r2, r4
 80053e2:	4630      	mov	r0, r6
 80053e4:	f7ff ff36 	bl	8005254 <__multiply>
 80053e8:	4681      	mov	r9, r0
 80053ea:	4639      	mov	r1, r7
 80053ec:	4630      	mov	r0, r6
 80053ee:	f7ff fe88 	bl	8005102 <_Bfree>
 80053f2:	464f      	mov	r7, r9
 80053f4:	106d      	asrs	r5, r5, #1
 80053f6:	d00b      	beq.n	8005410 <__pow5mult+0x90>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	b938      	cbnz	r0, 800540c <__pow5mult+0x8c>
 80053fc:	4622      	mov	r2, r4
 80053fe:	4621      	mov	r1, r4
 8005400:	4630      	mov	r0, r6
 8005402:	f7ff ff27 	bl	8005254 <__multiply>
 8005406:	6020      	str	r0, [r4, #0]
 8005408:	f8c0 8000 	str.w	r8, [r0]
 800540c:	4604      	mov	r4, r0
 800540e:	e7e4      	b.n	80053da <__pow5mult+0x5a>
 8005410:	4638      	mov	r0, r7
 8005412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005416:	bf00      	nop
 8005418:	080061a0 	.word	0x080061a0

0800541c <__lshift>:
 800541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	460c      	mov	r4, r1
 8005422:	4607      	mov	r7, r0
 8005424:	4616      	mov	r6, r2
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800542c:	eb0a 0903 	add.w	r9, sl, r3
 8005430:	6849      	ldr	r1, [r1, #4]
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	f109 0501 	add.w	r5, r9, #1
 8005438:	42ab      	cmp	r3, r5
 800543a:	db32      	blt.n	80054a2 <__lshift+0x86>
 800543c:	4638      	mov	r0, r7
 800543e:	f7ff fe2c 	bl	800509a <_Balloc>
 8005442:	2300      	movs	r3, #0
 8005444:	4680      	mov	r8, r0
 8005446:	461a      	mov	r2, r3
 8005448:	f100 0114 	add.w	r1, r0, #20
 800544c:	4553      	cmp	r3, sl
 800544e:	db2b      	blt.n	80054a8 <__lshift+0x8c>
 8005450:	6920      	ldr	r0, [r4, #16]
 8005452:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005456:	f104 0314 	add.w	r3, r4, #20
 800545a:	f016 021f 	ands.w	r2, r6, #31
 800545e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005462:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005466:	d025      	beq.n	80054b4 <__lshift+0x98>
 8005468:	2000      	movs	r0, #0
 800546a:	f1c2 0e20 	rsb	lr, r2, #32
 800546e:	468a      	mov	sl, r1
 8005470:	681e      	ldr	r6, [r3, #0]
 8005472:	4096      	lsls	r6, r2
 8005474:	4330      	orrs	r0, r6
 8005476:	f84a 0b04 	str.w	r0, [sl], #4
 800547a:	f853 0b04 	ldr.w	r0, [r3], #4
 800547e:	459c      	cmp	ip, r3
 8005480:	fa20 f00e 	lsr.w	r0, r0, lr
 8005484:	d814      	bhi.n	80054b0 <__lshift+0x94>
 8005486:	6048      	str	r0, [r1, #4]
 8005488:	b108      	cbz	r0, 800548e <__lshift+0x72>
 800548a:	f109 0502 	add.w	r5, r9, #2
 800548e:	3d01      	subs	r5, #1
 8005490:	4638      	mov	r0, r7
 8005492:	f8c8 5010 	str.w	r5, [r8, #16]
 8005496:	4621      	mov	r1, r4
 8005498:	f7ff fe33 	bl	8005102 <_Bfree>
 800549c:	4640      	mov	r0, r8
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a2:	3101      	adds	r1, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	e7c7      	b.n	8005438 <__lshift+0x1c>
 80054a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80054ac:	3301      	adds	r3, #1
 80054ae:	e7cd      	b.n	800544c <__lshift+0x30>
 80054b0:	4651      	mov	r1, sl
 80054b2:	e7dc      	b.n	800546e <__lshift+0x52>
 80054b4:	3904      	subs	r1, #4
 80054b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ba:	459c      	cmp	ip, r3
 80054bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80054c0:	d8f9      	bhi.n	80054b6 <__lshift+0x9a>
 80054c2:	e7e4      	b.n	800548e <__lshift+0x72>

080054c4 <__mcmp>:
 80054c4:	6903      	ldr	r3, [r0, #16]
 80054c6:	690a      	ldr	r2, [r1, #16]
 80054c8:	b530      	push	{r4, r5, lr}
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	d10c      	bne.n	80054e8 <__mcmp+0x24>
 80054ce:	0092      	lsls	r2, r2, #2
 80054d0:	3014      	adds	r0, #20
 80054d2:	3114      	adds	r1, #20
 80054d4:	1884      	adds	r4, r0, r2
 80054d6:	4411      	add	r1, r2
 80054d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80054e0:	4295      	cmp	r5, r2
 80054e2:	d003      	beq.n	80054ec <__mcmp+0x28>
 80054e4:	d305      	bcc.n	80054f2 <__mcmp+0x2e>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd30      	pop	{r4, r5, pc}
 80054ec:	42a0      	cmp	r0, r4
 80054ee:	d3f3      	bcc.n	80054d8 <__mcmp+0x14>
 80054f0:	e7fa      	b.n	80054e8 <__mcmp+0x24>
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	e7f7      	b.n	80054e8 <__mcmp+0x24>

080054f8 <__mdiff>:
 80054f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	460d      	mov	r5, r1
 80054fe:	4607      	mov	r7, r0
 8005500:	4611      	mov	r1, r2
 8005502:	4628      	mov	r0, r5
 8005504:	4614      	mov	r4, r2
 8005506:	f7ff ffdd 	bl	80054c4 <__mcmp>
 800550a:	1e06      	subs	r6, r0, #0
 800550c:	d108      	bne.n	8005520 <__mdiff+0x28>
 800550e:	4631      	mov	r1, r6
 8005510:	4638      	mov	r0, r7
 8005512:	f7ff fdc2 	bl	800509a <_Balloc>
 8005516:	2301      	movs	r3, #1
 8005518:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	bfa4      	itt	ge
 8005522:	4623      	movge	r3, r4
 8005524:	462c      	movge	r4, r5
 8005526:	4638      	mov	r0, r7
 8005528:	6861      	ldr	r1, [r4, #4]
 800552a:	bfa6      	itte	ge
 800552c:	461d      	movge	r5, r3
 800552e:	2600      	movge	r6, #0
 8005530:	2601      	movlt	r6, #1
 8005532:	f7ff fdb2 	bl	800509a <_Balloc>
 8005536:	f04f 0e00 	mov.w	lr, #0
 800553a:	60c6      	str	r6, [r0, #12]
 800553c:	692b      	ldr	r3, [r5, #16]
 800553e:	6926      	ldr	r6, [r4, #16]
 8005540:	f104 0214 	add.w	r2, r4, #20
 8005544:	f105 0914 	add.w	r9, r5, #20
 8005548:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800554c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005550:	f100 0114 	add.w	r1, r0, #20
 8005554:	f852 ab04 	ldr.w	sl, [r2], #4
 8005558:	f859 5b04 	ldr.w	r5, [r9], #4
 800555c:	fa1f f38a 	uxth.w	r3, sl
 8005560:	4473      	add	r3, lr
 8005562:	b2ac      	uxth	r4, r5
 8005564:	1b1b      	subs	r3, r3, r4
 8005566:	0c2c      	lsrs	r4, r5, #16
 8005568:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800556c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005570:	b29b      	uxth	r3, r3
 8005572:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005576:	45c8      	cmp	r8, r9
 8005578:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800557c:	4694      	mov	ip, r2
 800557e:	f841 4b04 	str.w	r4, [r1], #4
 8005582:	d8e7      	bhi.n	8005554 <__mdiff+0x5c>
 8005584:	45bc      	cmp	ip, r7
 8005586:	d304      	bcc.n	8005592 <__mdiff+0x9a>
 8005588:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800558c:	b183      	cbz	r3, 80055b0 <__mdiff+0xb8>
 800558e:	6106      	str	r6, [r0, #16]
 8005590:	e7c4      	b.n	800551c <__mdiff+0x24>
 8005592:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005596:	b2a2      	uxth	r2, r4
 8005598:	4472      	add	r2, lr
 800559a:	1413      	asrs	r3, r2, #16
 800559c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80055a0:	b292      	uxth	r2, r2
 80055a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055a6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80055aa:	f841 2b04 	str.w	r2, [r1], #4
 80055ae:	e7e9      	b.n	8005584 <__mdiff+0x8c>
 80055b0:	3e01      	subs	r6, #1
 80055b2:	e7e9      	b.n	8005588 <__mdiff+0x90>

080055b4 <__d2b>:
 80055b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055b8:	461c      	mov	r4, r3
 80055ba:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80055be:	2101      	movs	r1, #1
 80055c0:	4690      	mov	r8, r2
 80055c2:	f7ff fd6a 	bl	800509a <_Balloc>
 80055c6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80055ca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80055ce:	4607      	mov	r7, r0
 80055d0:	bb34      	cbnz	r4, 8005620 <__d2b+0x6c>
 80055d2:	9201      	str	r2, [sp, #4]
 80055d4:	f1b8 0200 	subs.w	r2, r8, #0
 80055d8:	d027      	beq.n	800562a <__d2b+0x76>
 80055da:	a802      	add	r0, sp, #8
 80055dc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80055e0:	f7ff fe00 	bl	80051e4 <__lo0bits>
 80055e4:	9900      	ldr	r1, [sp, #0]
 80055e6:	b1f0      	cbz	r0, 8005626 <__d2b+0x72>
 80055e8:	9a01      	ldr	r2, [sp, #4]
 80055ea:	f1c0 0320 	rsb	r3, r0, #32
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	430b      	orrs	r3, r1
 80055f4:	40c2      	lsrs	r2, r0
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	9201      	str	r2, [sp, #4]
 80055fa:	9b01      	ldr	r3, [sp, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf14      	ite	ne
 8005600:	2102      	movne	r1, #2
 8005602:	2101      	moveq	r1, #1
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	6139      	str	r1, [r7, #16]
 8005608:	b1c4      	cbz	r4, 800563c <__d2b+0x88>
 800560a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800560e:	4404      	add	r4, r0
 8005610:	6034      	str	r4, [r6, #0]
 8005612:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005616:	6028      	str	r0, [r5, #0]
 8005618:	4638      	mov	r0, r7
 800561a:	b002      	add	sp, #8
 800561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005620:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005624:	e7d5      	b.n	80055d2 <__d2b+0x1e>
 8005626:	6179      	str	r1, [r7, #20]
 8005628:	e7e7      	b.n	80055fa <__d2b+0x46>
 800562a:	a801      	add	r0, sp, #4
 800562c:	f7ff fdda 	bl	80051e4 <__lo0bits>
 8005630:	2101      	movs	r1, #1
 8005632:	9b01      	ldr	r3, [sp, #4]
 8005634:	6139      	str	r1, [r7, #16]
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	3020      	adds	r0, #32
 800563a:	e7e5      	b.n	8005608 <__d2b+0x54>
 800563c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005640:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005644:	6030      	str	r0, [r6, #0]
 8005646:	6918      	ldr	r0, [r3, #16]
 8005648:	f7ff fdad 	bl	80051a6 <__hi0bits>
 800564c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005650:	e7e1      	b.n	8005616 <__d2b+0x62>

08005652 <_calloc_r>:
 8005652:	b538      	push	{r3, r4, r5, lr}
 8005654:	fb02 f401 	mul.w	r4, r2, r1
 8005658:	4621      	mov	r1, r4
 800565a:	f000 f855 	bl	8005708 <_malloc_r>
 800565e:	4605      	mov	r5, r0
 8005660:	b118      	cbz	r0, 800566a <_calloc_r+0x18>
 8005662:	4622      	mov	r2, r4
 8005664:	2100      	movs	r1, #0
 8005666:	f7fe f96d 	bl	8003944 <memset>
 800566a:	4628      	mov	r0, r5
 800566c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005670 <_free_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4605      	mov	r5, r0
 8005674:	2900      	cmp	r1, #0
 8005676:	d043      	beq.n	8005700 <_free_r+0x90>
 8005678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800567c:	1f0c      	subs	r4, r1, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	bfb8      	it	lt
 8005682:	18e4      	addlt	r4, r4, r3
 8005684:	f000 fc46 	bl	8005f14 <__malloc_lock>
 8005688:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <_free_r+0x94>)
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	4610      	mov	r0, r2
 800568e:	b933      	cbnz	r3, 800569e <_free_r+0x2e>
 8005690:	6063      	str	r3, [r4, #4]
 8005692:	6014      	str	r4, [r2, #0]
 8005694:	4628      	mov	r0, r5
 8005696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800569a:	f000 bc3c 	b.w	8005f16 <__malloc_unlock>
 800569e:	42a3      	cmp	r3, r4
 80056a0:	d90b      	bls.n	80056ba <_free_r+0x4a>
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	1862      	adds	r2, r4, r1
 80056a6:	4293      	cmp	r3, r2
 80056a8:	bf01      	itttt	eq
 80056aa:	681a      	ldreq	r2, [r3, #0]
 80056ac:	685b      	ldreq	r3, [r3, #4]
 80056ae:	1852      	addeq	r2, r2, r1
 80056b0:	6022      	streq	r2, [r4, #0]
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	6004      	str	r4, [r0, #0]
 80056b6:	e7ed      	b.n	8005694 <_free_r+0x24>
 80056b8:	4613      	mov	r3, r2
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	b10a      	cbz	r2, 80056c2 <_free_r+0x52>
 80056be:	42a2      	cmp	r2, r4
 80056c0:	d9fa      	bls.n	80056b8 <_free_r+0x48>
 80056c2:	6819      	ldr	r1, [r3, #0]
 80056c4:	1858      	adds	r0, r3, r1
 80056c6:	42a0      	cmp	r0, r4
 80056c8:	d10b      	bne.n	80056e2 <_free_r+0x72>
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	4401      	add	r1, r0
 80056ce:	1858      	adds	r0, r3, r1
 80056d0:	4282      	cmp	r2, r0
 80056d2:	6019      	str	r1, [r3, #0]
 80056d4:	d1de      	bne.n	8005694 <_free_r+0x24>
 80056d6:	6810      	ldr	r0, [r2, #0]
 80056d8:	6852      	ldr	r2, [r2, #4]
 80056da:	4401      	add	r1, r0
 80056dc:	6019      	str	r1, [r3, #0]
 80056de:	605a      	str	r2, [r3, #4]
 80056e0:	e7d8      	b.n	8005694 <_free_r+0x24>
 80056e2:	d902      	bls.n	80056ea <_free_r+0x7a>
 80056e4:	230c      	movs	r3, #12
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	e7d4      	b.n	8005694 <_free_r+0x24>
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	1821      	adds	r1, r4, r0
 80056ee:	428a      	cmp	r2, r1
 80056f0:	bf01      	itttt	eq
 80056f2:	6811      	ldreq	r1, [r2, #0]
 80056f4:	6852      	ldreq	r2, [r2, #4]
 80056f6:	1809      	addeq	r1, r1, r0
 80056f8:	6021      	streq	r1, [r4, #0]
 80056fa:	6062      	str	r2, [r4, #4]
 80056fc:	605c      	str	r4, [r3, #4]
 80056fe:	e7c9      	b.n	8005694 <_free_r+0x24>
 8005700:	bd38      	pop	{r3, r4, r5, pc}
 8005702:	bf00      	nop
 8005704:	200001fc 	.word	0x200001fc

08005708 <_malloc_r>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	1ccd      	adds	r5, r1, #3
 800570c:	f025 0503 	bic.w	r5, r5, #3
 8005710:	3508      	adds	r5, #8
 8005712:	2d0c      	cmp	r5, #12
 8005714:	bf38      	it	cc
 8005716:	250c      	movcc	r5, #12
 8005718:	2d00      	cmp	r5, #0
 800571a:	4606      	mov	r6, r0
 800571c:	db01      	blt.n	8005722 <_malloc_r+0x1a>
 800571e:	42a9      	cmp	r1, r5
 8005720:	d903      	bls.n	800572a <_malloc_r+0x22>
 8005722:	230c      	movs	r3, #12
 8005724:	6033      	str	r3, [r6, #0]
 8005726:	2000      	movs	r0, #0
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	f000 fbf3 	bl	8005f14 <__malloc_lock>
 800572e:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <_malloc_r+0xac>)
 8005730:	6814      	ldr	r4, [r2, #0]
 8005732:	4621      	mov	r1, r4
 8005734:	b991      	cbnz	r1, 800575c <_malloc_r+0x54>
 8005736:	4c20      	ldr	r4, [pc, #128]	; (80057b8 <_malloc_r+0xb0>)
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	b91b      	cbnz	r3, 8005744 <_malloc_r+0x3c>
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f97b 	bl	8005a38 <_sbrk_r>
 8005742:	6020      	str	r0, [r4, #0]
 8005744:	4629      	mov	r1, r5
 8005746:	4630      	mov	r0, r6
 8005748:	f000 f976 	bl	8005a38 <_sbrk_r>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d124      	bne.n	800579a <_malloc_r+0x92>
 8005750:	230c      	movs	r3, #12
 8005752:	4630      	mov	r0, r6
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	f000 fbde 	bl	8005f16 <__malloc_unlock>
 800575a:	e7e4      	b.n	8005726 <_malloc_r+0x1e>
 800575c:	680b      	ldr	r3, [r1, #0]
 800575e:	1b5b      	subs	r3, r3, r5
 8005760:	d418      	bmi.n	8005794 <_malloc_r+0x8c>
 8005762:	2b0b      	cmp	r3, #11
 8005764:	d90f      	bls.n	8005786 <_malloc_r+0x7e>
 8005766:	600b      	str	r3, [r1, #0]
 8005768:	18cc      	adds	r4, r1, r3
 800576a:	50cd      	str	r5, [r1, r3]
 800576c:	4630      	mov	r0, r6
 800576e:	f000 fbd2 	bl	8005f16 <__malloc_unlock>
 8005772:	f104 000b 	add.w	r0, r4, #11
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	f020 0007 	bic.w	r0, r0, #7
 800577c:	1ac3      	subs	r3, r0, r3
 800577e:	d0d3      	beq.n	8005728 <_malloc_r+0x20>
 8005780:	425a      	negs	r2, r3
 8005782:	50e2      	str	r2, [r4, r3]
 8005784:	e7d0      	b.n	8005728 <_malloc_r+0x20>
 8005786:	684b      	ldr	r3, [r1, #4]
 8005788:	428c      	cmp	r4, r1
 800578a:	bf16      	itet	ne
 800578c:	6063      	strne	r3, [r4, #4]
 800578e:	6013      	streq	r3, [r2, #0]
 8005790:	460c      	movne	r4, r1
 8005792:	e7eb      	b.n	800576c <_malloc_r+0x64>
 8005794:	460c      	mov	r4, r1
 8005796:	6849      	ldr	r1, [r1, #4]
 8005798:	e7cc      	b.n	8005734 <_malloc_r+0x2c>
 800579a:	1cc4      	adds	r4, r0, #3
 800579c:	f024 0403 	bic.w	r4, r4, #3
 80057a0:	42a0      	cmp	r0, r4
 80057a2:	d005      	beq.n	80057b0 <_malloc_r+0xa8>
 80057a4:	1a21      	subs	r1, r4, r0
 80057a6:	4630      	mov	r0, r6
 80057a8:	f000 f946 	bl	8005a38 <_sbrk_r>
 80057ac:	3001      	adds	r0, #1
 80057ae:	d0cf      	beq.n	8005750 <_malloc_r+0x48>
 80057b0:	6025      	str	r5, [r4, #0]
 80057b2:	e7db      	b.n	800576c <_malloc_r+0x64>
 80057b4:	200001fc 	.word	0x200001fc
 80057b8:	20000200 	.word	0x20000200

080057bc <__sfputc_r>:
 80057bc:	6893      	ldr	r3, [r2, #8]
 80057be:	b410      	push	{r4}
 80057c0:	3b01      	subs	r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	6093      	str	r3, [r2, #8]
 80057c6:	da07      	bge.n	80057d8 <__sfputc_r+0x1c>
 80057c8:	6994      	ldr	r4, [r2, #24]
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	db01      	blt.n	80057d2 <__sfputc_r+0x16>
 80057ce:	290a      	cmp	r1, #10
 80057d0:	d102      	bne.n	80057d8 <__sfputc_r+0x1c>
 80057d2:	bc10      	pop	{r4}
 80057d4:	f000 b984 	b.w	8005ae0 <__swbuf_r>
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	1c58      	adds	r0, r3, #1
 80057dc:	6010      	str	r0, [r2, #0]
 80057de:	7019      	strb	r1, [r3, #0]
 80057e0:	4608      	mov	r0, r1
 80057e2:	bc10      	pop	{r4}
 80057e4:	4770      	bx	lr

080057e6 <__sfputs_r>:
 80057e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	4614      	mov	r4, r2
 80057ee:	18d5      	adds	r5, r2, r3
 80057f0:	42ac      	cmp	r4, r5
 80057f2:	d101      	bne.n	80057f8 <__sfputs_r+0x12>
 80057f4:	2000      	movs	r0, #0
 80057f6:	e007      	b.n	8005808 <__sfputs_r+0x22>
 80057f8:	463a      	mov	r2, r7
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff ffdc 	bl	80057bc <__sfputc_r>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d1f3      	bne.n	80057f0 <__sfputs_r+0xa>
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800580c <_vfiprintf_r>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	b09d      	sub	sp, #116	; 0x74
 8005814:	4617      	mov	r7, r2
 8005816:	461d      	mov	r5, r3
 8005818:	4606      	mov	r6, r0
 800581a:	b118      	cbz	r0, 8005824 <_vfiprintf_r+0x18>
 800581c:	6983      	ldr	r3, [r0, #24]
 800581e:	b90b      	cbnz	r3, 8005824 <_vfiprintf_r+0x18>
 8005820:	f7ff fb82 	bl	8004f28 <__sinit>
 8005824:	4b7c      	ldr	r3, [pc, #496]	; (8005a18 <_vfiprintf_r+0x20c>)
 8005826:	429c      	cmp	r4, r3
 8005828:	d158      	bne.n	80058dc <_vfiprintf_r+0xd0>
 800582a:	6874      	ldr	r4, [r6, #4]
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	0718      	lsls	r0, r3, #28
 8005830:	d55e      	bpl.n	80058f0 <_vfiprintf_r+0xe4>
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d05b      	beq.n	80058f0 <_vfiprintf_r+0xe4>
 8005838:	2300      	movs	r3, #0
 800583a:	9309      	str	r3, [sp, #36]	; 0x24
 800583c:	2320      	movs	r3, #32
 800583e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005842:	2330      	movs	r3, #48	; 0x30
 8005844:	f04f 0b01 	mov.w	fp, #1
 8005848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800584c:	9503      	str	r5, [sp, #12]
 800584e:	46b8      	mov	r8, r7
 8005850:	4645      	mov	r5, r8
 8005852:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005856:	b10b      	cbz	r3, 800585c <_vfiprintf_r+0x50>
 8005858:	2b25      	cmp	r3, #37	; 0x25
 800585a:	d154      	bne.n	8005906 <_vfiprintf_r+0xfa>
 800585c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005860:	d00b      	beq.n	800587a <_vfiprintf_r+0x6e>
 8005862:	4653      	mov	r3, sl
 8005864:	463a      	mov	r2, r7
 8005866:	4621      	mov	r1, r4
 8005868:	4630      	mov	r0, r6
 800586a:	f7ff ffbc 	bl	80057e6 <__sfputs_r>
 800586e:	3001      	adds	r0, #1
 8005870:	f000 80c2 	beq.w	80059f8 <_vfiprintf_r+0x1ec>
 8005874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005876:	4453      	add	r3, sl
 8005878:	9309      	str	r3, [sp, #36]	; 0x24
 800587a:	f898 3000 	ldrb.w	r3, [r8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80ba 	beq.w	80059f8 <_vfiprintf_r+0x1ec>
 8005884:	2300      	movs	r3, #0
 8005886:	f04f 32ff 	mov.w	r2, #4294967295
 800588a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	9307      	str	r3, [sp, #28]
 8005892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005896:	931a      	str	r3, [sp, #104]	; 0x68
 8005898:	46a8      	mov	r8, r5
 800589a:	2205      	movs	r2, #5
 800589c:	f818 1b01 	ldrb.w	r1, [r8], #1
 80058a0:	485e      	ldr	r0, [pc, #376]	; (8005a1c <_vfiprintf_r+0x210>)
 80058a2:	f7ff fbe1 	bl	8005068 <memchr>
 80058a6:	9b04      	ldr	r3, [sp, #16]
 80058a8:	bb78      	cbnz	r0, 800590a <_vfiprintf_r+0xfe>
 80058aa:	06d9      	lsls	r1, r3, #27
 80058ac:	bf44      	itt	mi
 80058ae:	2220      	movmi	r2, #32
 80058b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058b4:	071a      	lsls	r2, r3, #28
 80058b6:	bf44      	itt	mi
 80058b8:	222b      	movmi	r2, #43	; 0x2b
 80058ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058be:	782a      	ldrb	r2, [r5, #0]
 80058c0:	2a2a      	cmp	r2, #42	; 0x2a
 80058c2:	d02a      	beq.n	800591a <_vfiprintf_r+0x10e>
 80058c4:	46a8      	mov	r8, r5
 80058c6:	2000      	movs	r0, #0
 80058c8:	250a      	movs	r5, #10
 80058ca:	9a07      	ldr	r2, [sp, #28]
 80058cc:	4641      	mov	r1, r8
 80058ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058d2:	3b30      	subs	r3, #48	; 0x30
 80058d4:	2b09      	cmp	r3, #9
 80058d6:	d969      	bls.n	80059ac <_vfiprintf_r+0x1a0>
 80058d8:	b360      	cbz	r0, 8005934 <_vfiprintf_r+0x128>
 80058da:	e024      	b.n	8005926 <_vfiprintf_r+0x11a>
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <_vfiprintf_r+0x214>)
 80058de:	429c      	cmp	r4, r3
 80058e0:	d101      	bne.n	80058e6 <_vfiprintf_r+0xda>
 80058e2:	68b4      	ldr	r4, [r6, #8]
 80058e4:	e7a2      	b.n	800582c <_vfiprintf_r+0x20>
 80058e6:	4b4f      	ldr	r3, [pc, #316]	; (8005a24 <_vfiprintf_r+0x218>)
 80058e8:	429c      	cmp	r4, r3
 80058ea:	bf08      	it	eq
 80058ec:	68f4      	ldreq	r4, [r6, #12]
 80058ee:	e79d      	b.n	800582c <_vfiprintf_r+0x20>
 80058f0:	4621      	mov	r1, r4
 80058f2:	4630      	mov	r0, r6
 80058f4:	f000 f958 	bl	8005ba8 <__swsetup_r>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d09d      	beq.n	8005838 <_vfiprintf_r+0x2c>
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005900:	b01d      	add	sp, #116	; 0x74
 8005902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	46a8      	mov	r8, r5
 8005908:	e7a2      	b.n	8005850 <_vfiprintf_r+0x44>
 800590a:	4a44      	ldr	r2, [pc, #272]	; (8005a1c <_vfiprintf_r+0x210>)
 800590c:	4645      	mov	r5, r8
 800590e:	1a80      	subs	r0, r0, r2
 8005910:	fa0b f000 	lsl.w	r0, fp, r0
 8005914:	4318      	orrs	r0, r3
 8005916:	9004      	str	r0, [sp, #16]
 8005918:	e7be      	b.n	8005898 <_vfiprintf_r+0x8c>
 800591a:	9a03      	ldr	r2, [sp, #12]
 800591c:	1d11      	adds	r1, r2, #4
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	9103      	str	r1, [sp, #12]
 8005922:	2a00      	cmp	r2, #0
 8005924:	db01      	blt.n	800592a <_vfiprintf_r+0x11e>
 8005926:	9207      	str	r2, [sp, #28]
 8005928:	e004      	b.n	8005934 <_vfiprintf_r+0x128>
 800592a:	4252      	negs	r2, r2
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	9207      	str	r2, [sp, #28]
 8005932:	9304      	str	r3, [sp, #16]
 8005934:	f898 3000 	ldrb.w	r3, [r8]
 8005938:	2b2e      	cmp	r3, #46	; 0x2e
 800593a:	d10e      	bne.n	800595a <_vfiprintf_r+0x14e>
 800593c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005940:	2b2a      	cmp	r3, #42	; 0x2a
 8005942:	d138      	bne.n	80059b6 <_vfiprintf_r+0x1aa>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	f108 0802 	add.w	r8, r8, #2
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	9203      	str	r2, [sp, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	bfb8      	it	lt
 8005954:	f04f 33ff 	movlt.w	r3, #4294967295
 8005958:	9305      	str	r3, [sp, #20]
 800595a:	4d33      	ldr	r5, [pc, #204]	; (8005a28 <_vfiprintf_r+0x21c>)
 800595c:	2203      	movs	r2, #3
 800595e:	f898 1000 	ldrb.w	r1, [r8]
 8005962:	4628      	mov	r0, r5
 8005964:	f7ff fb80 	bl	8005068 <memchr>
 8005968:	b140      	cbz	r0, 800597c <_vfiprintf_r+0x170>
 800596a:	2340      	movs	r3, #64	; 0x40
 800596c:	1b40      	subs	r0, r0, r5
 800596e:	fa03 f000 	lsl.w	r0, r3, r0
 8005972:	9b04      	ldr	r3, [sp, #16]
 8005974:	f108 0801 	add.w	r8, r8, #1
 8005978:	4303      	orrs	r3, r0
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	f898 1000 	ldrb.w	r1, [r8]
 8005980:	2206      	movs	r2, #6
 8005982:	482a      	ldr	r0, [pc, #168]	; (8005a2c <_vfiprintf_r+0x220>)
 8005984:	f108 0701 	add.w	r7, r8, #1
 8005988:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800598c:	f7ff fb6c 	bl	8005068 <memchr>
 8005990:	2800      	cmp	r0, #0
 8005992:	d037      	beq.n	8005a04 <_vfiprintf_r+0x1f8>
 8005994:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <_vfiprintf_r+0x224>)
 8005996:	bb1b      	cbnz	r3, 80059e0 <_vfiprintf_r+0x1d4>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	3307      	adds	r3, #7
 800599c:	f023 0307 	bic.w	r3, r3, #7
 80059a0:	3308      	adds	r3, #8
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a6:	444b      	add	r3, r9
 80059a8:	9309      	str	r3, [sp, #36]	; 0x24
 80059aa:	e750      	b.n	800584e <_vfiprintf_r+0x42>
 80059ac:	fb05 3202 	mla	r2, r5, r2, r3
 80059b0:	2001      	movs	r0, #1
 80059b2:	4688      	mov	r8, r1
 80059b4:	e78a      	b.n	80058cc <_vfiprintf_r+0xc0>
 80059b6:	2300      	movs	r3, #0
 80059b8:	250a      	movs	r5, #10
 80059ba:	4619      	mov	r1, r3
 80059bc:	f108 0801 	add.w	r8, r8, #1
 80059c0:	9305      	str	r3, [sp, #20]
 80059c2:	4640      	mov	r0, r8
 80059c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c8:	3a30      	subs	r2, #48	; 0x30
 80059ca:	2a09      	cmp	r2, #9
 80059cc:	d903      	bls.n	80059d6 <_vfiprintf_r+0x1ca>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0c3      	beq.n	800595a <_vfiprintf_r+0x14e>
 80059d2:	9105      	str	r1, [sp, #20]
 80059d4:	e7c1      	b.n	800595a <_vfiprintf_r+0x14e>
 80059d6:	fb05 2101 	mla	r1, r5, r1, r2
 80059da:	2301      	movs	r3, #1
 80059dc:	4680      	mov	r8, r0
 80059de:	e7f0      	b.n	80059c2 <_vfiprintf_r+0x1b6>
 80059e0:	ab03      	add	r3, sp, #12
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	4622      	mov	r2, r4
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <_vfiprintf_r+0x228>)
 80059e8:	a904      	add	r1, sp, #16
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fe f844 	bl	8003a78 <_printf_float>
 80059f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80059f4:	4681      	mov	r9, r0
 80059f6:	d1d5      	bne.n	80059a4 <_vfiprintf_r+0x198>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	065b      	lsls	r3, r3, #25
 80059fc:	f53f af7e 	bmi.w	80058fc <_vfiprintf_r+0xf0>
 8005a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a02:	e77d      	b.n	8005900 <_vfiprintf_r+0xf4>
 8005a04:	ab03      	add	r3, sp, #12
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	4622      	mov	r2, r4
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <_vfiprintf_r+0x228>)
 8005a0c:	a904      	add	r1, sp, #16
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7fe fade 	bl	8003fd0 <_printf_i>
 8005a14:	e7ec      	b.n	80059f0 <_vfiprintf_r+0x1e4>
 8005a16:	bf00      	nop
 8005a18:	0800606c 	.word	0x0800606c
 8005a1c:	080061ac 	.word	0x080061ac
 8005a20:	0800608c 	.word	0x0800608c
 8005a24:	0800604c 	.word	0x0800604c
 8005a28:	080061b2 	.word	0x080061b2
 8005a2c:	080061b6 	.word	0x080061b6
 8005a30:	08003a79 	.word	0x08003a79
 8005a34:	080057e7 	.word	0x080057e7

08005a38 <_sbrk_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	4c05      	ldr	r4, [pc, #20]	; (8005a54 <_sbrk_r+0x1c>)
 8005a3e:	4605      	mov	r5, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	6023      	str	r3, [r4, #0]
 8005a44:	f7fb fbb2 	bl	80011ac <_sbrk>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_sbrk_r+0x1a>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_sbrk_r+0x1a>
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	2000029c 	.word	0x2000029c

08005a58 <__sread>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	f000 fa5a 	bl	8005f18 <_read_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	bfab      	itete	ge
 8005a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a6c:	181b      	addge	r3, r3, r0
 8005a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a72:	bfac      	ite	ge
 8005a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a76:	81a3      	strhlt	r3, [r4, #12]
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <__swrite>:
 8005a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7e:	461f      	mov	r7, r3
 8005a80:	898b      	ldrh	r3, [r1, #12]
 8005a82:	4605      	mov	r5, r0
 8005a84:	05db      	lsls	r3, r3, #23
 8005a86:	460c      	mov	r4, r1
 8005a88:	4616      	mov	r6, r2
 8005a8a:	d505      	bpl.n	8005a98 <__swrite+0x1e>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a94:	f000 f9b6 	bl	8005e04 <_lseek_r>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	4632      	mov	r2, r6
 8005a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	f000 b869 	b.w	8005b84 <_write_r>

08005ab2 <__sseek>:
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 f9a3 	bl	8005e04 <_lseek_r>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	bf15      	itete	ne
 8005ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ace:	81a3      	strheq	r3, [r4, #12]
 8005ad0:	bf18      	it	ne
 8005ad2:	81a3      	strhne	r3, [r4, #12]
 8005ad4:	bd10      	pop	{r4, pc}

08005ad6 <__sclose>:
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 b8d3 	b.w	8005c84 <_close_r>
	...

08005ae0 <__swbuf_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	460e      	mov	r6, r1
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	b118      	cbz	r0, 8005af2 <__swbuf_r+0x12>
 8005aea:	6983      	ldr	r3, [r0, #24]
 8005aec:	b90b      	cbnz	r3, 8005af2 <__swbuf_r+0x12>
 8005aee:	f7ff fa1b 	bl	8004f28 <__sinit>
 8005af2:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <__swbuf_r+0x98>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	d12a      	bne.n	8005b4e <__swbuf_r+0x6e>
 8005af8:	686c      	ldr	r4, [r5, #4]
 8005afa:	69a3      	ldr	r3, [r4, #24]
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	071a      	lsls	r2, r3, #28
 8005b02:	d52e      	bpl.n	8005b62 <__swbuf_r+0x82>
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	b363      	cbz	r3, 8005b62 <__swbuf_r+0x82>
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	6820      	ldr	r0, [r4, #0]
 8005b0c:	b2f6      	uxtb	r6, r6
 8005b0e:	1ac0      	subs	r0, r0, r3
 8005b10:	6963      	ldr	r3, [r4, #20]
 8005b12:	4637      	mov	r7, r6
 8005b14:	4283      	cmp	r3, r0
 8005b16:	dc04      	bgt.n	8005b22 <__swbuf_r+0x42>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f000 f948 	bl	8005db0 <_fflush_r>
 8005b20:	bb28      	cbnz	r0, 8005b6e <__swbuf_r+0x8e>
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	3001      	adds	r0, #1
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60a3      	str	r3, [r4, #8]
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	6022      	str	r2, [r4, #0]
 8005b30:	701e      	strb	r6, [r3, #0]
 8005b32:	6963      	ldr	r3, [r4, #20]
 8005b34:	4283      	cmp	r3, r0
 8005b36:	d004      	beq.n	8005b42 <__swbuf_r+0x62>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d519      	bpl.n	8005b72 <__swbuf_r+0x92>
 8005b3e:	2e0a      	cmp	r6, #10
 8005b40:	d117      	bne.n	8005b72 <__swbuf_r+0x92>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 f933 	bl	8005db0 <_fflush_r>
 8005b4a:	b190      	cbz	r0, 8005b72 <__swbuf_r+0x92>
 8005b4c:	e00f      	b.n	8005b6e <__swbuf_r+0x8e>
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <__swbuf_r+0x9c>)
 8005b50:	429c      	cmp	r4, r3
 8005b52:	d101      	bne.n	8005b58 <__swbuf_r+0x78>
 8005b54:	68ac      	ldr	r4, [r5, #8]
 8005b56:	e7d0      	b.n	8005afa <__swbuf_r+0x1a>
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <__swbuf_r+0xa0>)
 8005b5a:	429c      	cmp	r4, r3
 8005b5c:	bf08      	it	eq
 8005b5e:	68ec      	ldreq	r4, [r5, #12]
 8005b60:	e7cb      	b.n	8005afa <__swbuf_r+0x1a>
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 f81f 	bl	8005ba8 <__swsetup_r>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d0cc      	beq.n	8005b08 <__swbuf_r+0x28>
 8005b6e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b72:	4638      	mov	r0, r7
 8005b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b76:	bf00      	nop
 8005b78:	0800606c 	.word	0x0800606c
 8005b7c:	0800608c 	.word	0x0800608c
 8005b80:	0800604c 	.word	0x0800604c

08005b84 <_write_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4605      	mov	r5, r0
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4c05      	ldr	r4, [pc, #20]	; (8005ba4 <_write_r+0x20>)
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	f7fb fabd 	bl	8001112 <_write>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d102      	bne.n	8005ba2 <_write_r+0x1e>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	b103      	cbz	r3, 8005ba2 <_write_r+0x1e>
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	2000029c 	.word	0x2000029c

08005ba8 <__swsetup_r>:
 8005ba8:	4b32      	ldr	r3, [pc, #200]	; (8005c74 <__swsetup_r+0xcc>)
 8005baa:	b570      	push	{r4, r5, r6, lr}
 8005bac:	681d      	ldr	r5, [r3, #0]
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	b125      	cbz	r5, 8005bbe <__swsetup_r+0x16>
 8005bb4:	69ab      	ldr	r3, [r5, #24]
 8005bb6:	b913      	cbnz	r3, 8005bbe <__swsetup_r+0x16>
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f7ff f9b5 	bl	8004f28 <__sinit>
 8005bbe:	4b2e      	ldr	r3, [pc, #184]	; (8005c78 <__swsetup_r+0xd0>)
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	d10f      	bne.n	8005be4 <__swsetup_r+0x3c>
 8005bc4:	686c      	ldr	r4, [r5, #4]
 8005bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	0715      	lsls	r5, r2, #28
 8005bce:	d42c      	bmi.n	8005c2a <__swsetup_r+0x82>
 8005bd0:	06d0      	lsls	r0, r2, #27
 8005bd2:	d411      	bmi.n	8005bf8 <__swsetup_r+0x50>
 8005bd4:	2209      	movs	r2, #9
 8005bd6:	6032      	str	r2, [r6, #0]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	f04f 30ff 	mov.w	r0, #4294967295
 8005be2:	e03e      	b.n	8005c62 <__swsetup_r+0xba>
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <__swsetup_r+0xd4>)
 8005be6:	429c      	cmp	r4, r3
 8005be8:	d101      	bne.n	8005bee <__swsetup_r+0x46>
 8005bea:	68ac      	ldr	r4, [r5, #8]
 8005bec:	e7eb      	b.n	8005bc6 <__swsetup_r+0x1e>
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <__swsetup_r+0xd8>)
 8005bf0:	429c      	cmp	r4, r3
 8005bf2:	bf08      	it	eq
 8005bf4:	68ec      	ldreq	r4, [r5, #12]
 8005bf6:	e7e6      	b.n	8005bc6 <__swsetup_r+0x1e>
 8005bf8:	0751      	lsls	r1, r2, #29
 8005bfa:	d512      	bpl.n	8005c22 <__swsetup_r+0x7a>
 8005bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bfe:	b141      	cbz	r1, 8005c12 <__swsetup_r+0x6a>
 8005c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c04:	4299      	cmp	r1, r3
 8005c06:	d002      	beq.n	8005c0e <__swsetup_r+0x66>
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fd31 	bl	8005670 <_free_r>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6363      	str	r3, [r4, #52]	; 0x34
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6063      	str	r3, [r4, #4]
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	f043 0308 	orr.w	r3, r3, #8
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	b94b      	cbnz	r3, 8005c42 <__swsetup_r+0x9a>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c38:	d003      	beq.n	8005c42 <__swsetup_r+0x9a>
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f917 	bl	8005e70 <__smakebuf_r>
 8005c42:	89a2      	ldrh	r2, [r4, #12]
 8005c44:	f012 0301 	ands.w	r3, r2, #1
 8005c48:	d00c      	beq.n	8005c64 <__swsetup_r+0xbc>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60a3      	str	r3, [r4, #8]
 8005c4e:	6963      	ldr	r3, [r4, #20]
 8005c50:	425b      	negs	r3, r3
 8005c52:	61a3      	str	r3, [r4, #24]
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	b953      	cbnz	r3, 8005c6e <__swsetup_r+0xc6>
 8005c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c60:	d1ba      	bne.n	8005bd8 <__swsetup_r+0x30>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	0792      	lsls	r2, r2, #30
 8005c66:	bf58      	it	pl
 8005c68:	6963      	ldrpl	r3, [r4, #20]
 8005c6a:	60a3      	str	r3, [r4, #8]
 8005c6c:	e7f2      	b.n	8005c54 <__swsetup_r+0xac>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e7f7      	b.n	8005c62 <__swsetup_r+0xba>
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	0800606c 	.word	0x0800606c
 8005c7c:	0800608c 	.word	0x0800608c
 8005c80:	0800604c 	.word	0x0800604c

08005c84 <_close_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	2300      	movs	r3, #0
 8005c88:	4c05      	ldr	r4, [pc, #20]	; (8005ca0 <_close_r+0x1c>)
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	f7fb fa5b 	bl	800114a <_close>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_close_r+0x1a>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_close_r+0x1a>
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	2000029c 	.word	0x2000029c

08005ca4 <__sflush_r>:
 8005ca4:	898a      	ldrh	r2, [r1, #12]
 8005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	4605      	mov	r5, r0
 8005cac:	0710      	lsls	r0, r2, #28
 8005cae:	460c      	mov	r4, r1
 8005cb0:	d458      	bmi.n	8005d64 <__sflush_r+0xc0>
 8005cb2:	684b      	ldr	r3, [r1, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dc05      	bgt.n	8005cc4 <__sflush_r+0x20>
 8005cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	dc02      	bgt.n	8005cc4 <__sflush_r+0x20>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cc6:	2e00      	cmp	r6, #0
 8005cc8:	d0f9      	beq.n	8005cbe <__sflush_r+0x1a>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cd0:	682f      	ldr	r7, [r5, #0]
 8005cd2:	6a21      	ldr	r1, [r4, #32]
 8005cd4:	602b      	str	r3, [r5, #0]
 8005cd6:	d032      	beq.n	8005d3e <__sflush_r+0x9a>
 8005cd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	075a      	lsls	r2, r3, #29
 8005cde:	d505      	bpl.n	8005cec <__sflush_r+0x48>
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	1ac0      	subs	r0, r0, r3
 8005ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ce6:	b10b      	cbz	r3, 8005cec <__sflush_r+0x48>
 8005ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cea:	1ac0      	subs	r0, r0, r3
 8005cec:	2300      	movs	r3, #0
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cf2:	6a21      	ldr	r1, [r4, #32]
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b0      	blx	r6
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	d106      	bne.n	8005d0c <__sflush_r+0x68>
 8005cfe:	6829      	ldr	r1, [r5, #0]
 8005d00:	291d      	cmp	r1, #29
 8005d02:	d848      	bhi.n	8005d96 <__sflush_r+0xf2>
 8005d04:	4a29      	ldr	r2, [pc, #164]	; (8005dac <__sflush_r+0x108>)
 8005d06:	40ca      	lsrs	r2, r1
 8005d08:	07d6      	lsls	r6, r2, #31
 8005d0a:	d544      	bpl.n	8005d96 <__sflush_r+0xf2>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	6062      	str	r2, [r4, #4]
 8005d10:	6922      	ldr	r2, [r4, #16]
 8005d12:	04d9      	lsls	r1, r3, #19
 8005d14:	6022      	str	r2, [r4, #0]
 8005d16:	d504      	bpl.n	8005d22 <__sflush_r+0x7e>
 8005d18:	1c42      	adds	r2, r0, #1
 8005d1a:	d101      	bne.n	8005d20 <__sflush_r+0x7c>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b903      	cbnz	r3, 8005d22 <__sflush_r+0x7e>
 8005d20:	6560      	str	r0, [r4, #84]	; 0x54
 8005d22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d24:	602f      	str	r7, [r5, #0]
 8005d26:	2900      	cmp	r1, #0
 8005d28:	d0c9      	beq.n	8005cbe <__sflush_r+0x1a>
 8005d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	d002      	beq.n	8005d38 <__sflush_r+0x94>
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7ff fc9c 	bl	8005670 <_free_r>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	6360      	str	r0, [r4, #52]	; 0x34
 8005d3c:	e7c0      	b.n	8005cc0 <__sflush_r+0x1c>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b0      	blx	r6
 8005d44:	1c41      	adds	r1, r0, #1
 8005d46:	d1c8      	bne.n	8005cda <__sflush_r+0x36>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0c5      	beq.n	8005cda <__sflush_r+0x36>
 8005d4e:	2b1d      	cmp	r3, #29
 8005d50:	d001      	beq.n	8005d56 <__sflush_r+0xb2>
 8005d52:	2b16      	cmp	r3, #22
 8005d54:	d101      	bne.n	8005d5a <__sflush_r+0xb6>
 8005d56:	602f      	str	r7, [r5, #0]
 8005d58:	e7b1      	b.n	8005cbe <__sflush_r+0x1a>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	e7ad      	b.n	8005cc0 <__sflush_r+0x1c>
 8005d64:	690f      	ldr	r7, [r1, #16]
 8005d66:	2f00      	cmp	r7, #0
 8005d68:	d0a9      	beq.n	8005cbe <__sflush_r+0x1a>
 8005d6a:	0793      	lsls	r3, r2, #30
 8005d6c:	bf18      	it	ne
 8005d6e:	2300      	movne	r3, #0
 8005d70:	680e      	ldr	r6, [r1, #0]
 8005d72:	bf08      	it	eq
 8005d74:	694b      	ldreq	r3, [r1, #20]
 8005d76:	eba6 0807 	sub.w	r8, r6, r7
 8005d7a:	600f      	str	r7, [r1, #0]
 8005d7c:	608b      	str	r3, [r1, #8]
 8005d7e:	f1b8 0f00 	cmp.w	r8, #0
 8005d82:	dd9c      	ble.n	8005cbe <__sflush_r+0x1a>
 8005d84:	4643      	mov	r3, r8
 8005d86:	463a      	mov	r2, r7
 8005d88:	6a21      	ldr	r1, [r4, #32]
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d8e:	47b0      	blx	r6
 8005d90:	2800      	cmp	r0, #0
 8005d92:	dc06      	bgt.n	8005da2 <__sflush_r+0xfe>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	e78e      	b.n	8005cc0 <__sflush_r+0x1c>
 8005da2:	4407      	add	r7, r0
 8005da4:	eba8 0800 	sub.w	r8, r8, r0
 8005da8:	e7e9      	b.n	8005d7e <__sflush_r+0xda>
 8005daa:	bf00      	nop
 8005dac:	20400001 	.word	0x20400001

08005db0 <_fflush_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	690b      	ldr	r3, [r1, #16]
 8005db4:	4605      	mov	r5, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	b1db      	cbz	r3, 8005df2 <_fflush_r+0x42>
 8005dba:	b118      	cbz	r0, 8005dc4 <_fflush_r+0x14>
 8005dbc:	6983      	ldr	r3, [r0, #24]
 8005dbe:	b90b      	cbnz	r3, 8005dc4 <_fflush_r+0x14>
 8005dc0:	f7ff f8b2 	bl	8004f28 <__sinit>
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <_fflush_r+0x48>)
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	d109      	bne.n	8005dde <_fflush_r+0x2e>
 8005dca:	686c      	ldr	r4, [r5, #4]
 8005dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd0:	b17b      	cbz	r3, 8005df2 <_fflush_r+0x42>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dda:	f7ff bf63 	b.w	8005ca4 <__sflush_r>
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <_fflush_r+0x4c>)
 8005de0:	429c      	cmp	r4, r3
 8005de2:	d101      	bne.n	8005de8 <_fflush_r+0x38>
 8005de4:	68ac      	ldr	r4, [r5, #8]
 8005de6:	e7f1      	b.n	8005dcc <_fflush_r+0x1c>
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <_fflush_r+0x50>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	bf08      	it	eq
 8005dee:	68ec      	ldreq	r4, [r5, #12]
 8005df0:	e7ec      	b.n	8005dcc <_fflush_r+0x1c>
 8005df2:	2000      	movs	r0, #0
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	0800606c 	.word	0x0800606c
 8005dfc:	0800608c 	.word	0x0800608c
 8005e00:	0800604c 	.word	0x0800604c

08005e04 <_lseek_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4605      	mov	r5, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4c05      	ldr	r4, [pc, #20]	; (8005e24 <_lseek_r+0x20>)
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fb f9bd 	bl	8001192 <_lseek>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_lseek_r+0x1e>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_lseek_r+0x1e>
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	2000029c 	.word	0x2000029c

08005e28 <__swhatbuf_r>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	460e      	mov	r6, r1
 8005e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e30:	b096      	sub	sp, #88	; 0x58
 8005e32:	2900      	cmp	r1, #0
 8005e34:	4614      	mov	r4, r2
 8005e36:	461d      	mov	r5, r3
 8005e38:	da07      	bge.n	8005e4a <__swhatbuf_r+0x22>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	89b3      	ldrh	r3, [r6, #12]
 8005e40:	061a      	lsls	r2, r3, #24
 8005e42:	d410      	bmi.n	8005e66 <__swhatbuf_r+0x3e>
 8005e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e48:	e00e      	b.n	8005e68 <__swhatbuf_r+0x40>
 8005e4a:	466a      	mov	r2, sp
 8005e4c:	f000 f884 	bl	8005f58 <_fstat_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	dbf2      	blt.n	8005e3a <__swhatbuf_r+0x12>
 8005e54:	9a01      	ldr	r2, [sp, #4]
 8005e56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e5e:	425a      	negs	r2, r3
 8005e60:	415a      	adcs	r2, r3
 8005e62:	602a      	str	r2, [r5, #0]
 8005e64:	e7ee      	b.n	8005e44 <__swhatbuf_r+0x1c>
 8005e66:	2340      	movs	r3, #64	; 0x40
 8005e68:	2000      	movs	r0, #0
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	b016      	add	sp, #88	; 0x58
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}

08005e70 <__smakebuf_r>:
 8005e70:	898b      	ldrh	r3, [r1, #12]
 8005e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e74:	079d      	lsls	r5, r3, #30
 8005e76:	4606      	mov	r6, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	d507      	bpl.n	8005e8c <__smakebuf_r+0x1c>
 8005e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	6123      	str	r3, [r4, #16]
 8005e84:	2301      	movs	r3, #1
 8005e86:	6163      	str	r3, [r4, #20]
 8005e88:	b002      	add	sp, #8
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	ab01      	add	r3, sp, #4
 8005e8e:	466a      	mov	r2, sp
 8005e90:	f7ff ffca 	bl	8005e28 <__swhatbuf_r>
 8005e94:	9900      	ldr	r1, [sp, #0]
 8005e96:	4605      	mov	r5, r0
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f7ff fc35 	bl	8005708 <_malloc_r>
 8005e9e:	b948      	cbnz	r0, 8005eb4 <__smakebuf_r+0x44>
 8005ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea4:	059a      	lsls	r2, r3, #22
 8005ea6:	d4ef      	bmi.n	8005e88 <__smakebuf_r+0x18>
 8005ea8:	f023 0303 	bic.w	r3, r3, #3
 8005eac:	f043 0302 	orr.w	r3, r3, #2
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	e7e3      	b.n	8005e7c <__smakebuf_r+0xc>
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <__smakebuf_r+0x7c>)
 8005eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	6020      	str	r0, [r4, #0]
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	9b00      	ldr	r3, [sp, #0]
 8005ec4:	6120      	str	r0, [r4, #16]
 8005ec6:	6163      	str	r3, [r4, #20]
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	b15b      	cbz	r3, 8005ee4 <__smakebuf_r+0x74>
 8005ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 f853 	bl	8005f7c <_isatty_r>
 8005ed6:	b128      	cbz	r0, 8005ee4 <__smakebuf_r+0x74>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	81a3      	strh	r3, [r4, #12]
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	431d      	orrs	r5, r3
 8005ee8:	81a5      	strh	r5, [r4, #12]
 8005eea:	e7cd      	b.n	8005e88 <__smakebuf_r+0x18>
 8005eec:	08004ef1 	.word	0x08004ef1

08005ef0 <__ascii_mbtowc>:
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	b901      	cbnz	r1, 8005ef6 <__ascii_mbtowc+0x6>
 8005ef4:	a901      	add	r1, sp, #4
 8005ef6:	b142      	cbz	r2, 8005f0a <__ascii_mbtowc+0x1a>
 8005ef8:	b14b      	cbz	r3, 8005f0e <__ascii_mbtowc+0x1e>
 8005efa:	7813      	ldrb	r3, [r2, #0]
 8005efc:	600b      	str	r3, [r1, #0]
 8005efe:	7812      	ldrb	r2, [r2, #0]
 8005f00:	1c10      	adds	r0, r2, #0
 8005f02:	bf18      	it	ne
 8005f04:	2001      	movne	r0, #1
 8005f06:	b002      	add	sp, #8
 8005f08:	4770      	bx	lr
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	e7fb      	b.n	8005f06 <__ascii_mbtowc+0x16>
 8005f0e:	f06f 0001 	mvn.w	r0, #1
 8005f12:	e7f8      	b.n	8005f06 <__ascii_mbtowc+0x16>

08005f14 <__malloc_lock>:
 8005f14:	4770      	bx	lr

08005f16 <__malloc_unlock>:
 8005f16:	4770      	bx	lr

08005f18 <_read_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	2200      	movs	r2, #0
 8005f22:	4c05      	ldr	r4, [pc, #20]	; (8005f38 <_read_r+0x20>)
 8005f24:	6022      	str	r2, [r4, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fb f8d6 	bl	80010d8 <_read>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_read_r+0x1e>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_read_r+0x1e>
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	2000029c 	.word	0x2000029c

08005f3c <__ascii_wctomb>:
 8005f3c:	b149      	cbz	r1, 8005f52 <__ascii_wctomb+0x16>
 8005f3e:	2aff      	cmp	r2, #255	; 0xff
 8005f40:	bf8b      	itete	hi
 8005f42:	238a      	movhi	r3, #138	; 0x8a
 8005f44:	700a      	strbls	r2, [r1, #0]
 8005f46:	6003      	strhi	r3, [r0, #0]
 8005f48:	2001      	movls	r0, #1
 8005f4a:	bf88      	it	hi
 8005f4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f50:	4770      	bx	lr
 8005f52:	4608      	mov	r0, r1
 8005f54:	4770      	bx	lr
	...

08005f58 <_fstat_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	4c06      	ldr	r4, [pc, #24]	; (8005f78 <_fstat_r+0x20>)
 8005f5e:	4605      	mov	r5, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	f7fb f8fb 	bl	8001160 <_fstat>
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	d102      	bne.n	8005f74 <_fstat_r+0x1c>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	b103      	cbz	r3, 8005f74 <_fstat_r+0x1c>
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
 8005f76:	bf00      	nop
 8005f78:	2000029c 	.word	0x2000029c

08005f7c <_isatty_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4c05      	ldr	r4, [pc, #20]	; (8005f98 <_isatty_r+0x1c>)
 8005f82:	4605      	mov	r5, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	f7fb f8f9 	bl	800117e <_isatty>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_isatty_r+0x1a>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_isatty_r+0x1a>
 8005f94:	602b      	str	r3, [r5, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	2000029c 	.word	0x2000029c

08005f9c <_init>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr

08005fa8 <_fini>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr
